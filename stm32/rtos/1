// rtos.h
#ifndef RTOS_H
#define RTOS_H

#include <stdint.h>

#define MAX_TASK        8
#define TASK_STACK_SIZE 256
#define DEADLOCK_TIMEOUT_TICK 1000

// 스택 감시용 패턴
#define STACK_CANARY_PATTERN 0xA5A5A5A5

// ================= Task 종류 정의 =================
typedef enum {
    TASK_PERIODIC_CATCHUP,  // 1. 주기 + 누락된 횟수 보완
    TASK_PERIODIC_SKIP,     // 1. 주기만 중요, 지나치면 skip
    TASK_OPPORTUNISTIC,     // 2. 자주 실행되면 좋음 (우선순위로 관리)
    TASK_EVENT_DRIVEN       // 3. 외부 이벤트로 깨어남
} TaskType;

// ================= Task 상태/모니터링 구조 =================
typedef struct {
    TaskType type;
    uint8_t  priority;         // 0~7 (TASK_OPPORTUNISTIC 용)
    uint32_t period_tick;      // TASK_PERIODIC 용
    uint32_t last_run_tick;
    uint32_t missed_count;     // TASK_PERIODIC_CATCHUP 용
    uint8_t  active;           // TASK_EVENT_DRIVEN 용 (1이면 실행 요청됨)
    void (*func)();            // 실행 함수 포인터
} TaskControl;

extern TaskControl task_ctrl[MAX_TASK];
extern uint32_t*   task_stacks[MAX_TASK];
extern uint32_t    task_psp[MAX_TASK];
extern uint8_t     current_task;

void scheduler_init();
void scheduler_start();
void schedule();
void task_set_priority(uint8_t task_id, uint8_t new_prio);
void task_wake(uint8_t task_id);

// ================= Mutex 구조 =================
typedef struct {
    volatile uint8_t owner_task_id;
    volatile uint8_t lock_count; // 0이면 lock 안됨
} Mutex;

void mutex_init(Mutex *m);
void mutex_lock(Mutex *m, uint8_t task_id);
void mutex_unlock(Mutex *m, uint8_t task_id);
int  mutex_try_lock(Mutex *m, uint8_t task_id);
int  mutex_lock_timeout(Mutex *m, uint8_t task_id, uint32_t timeout_tick);

// ================= Task/Monitor/Stack =================
void pre_task(uint8_t task_id);
void post_task(uint8_t task_id);
void task_wrapper(void (*func)(), uint8_t task_id);
uint32_t task_check_stack_usage(uint32_t *stack_base, uint32_t stack_size);
void monitor_deadlock();
void monitor_waiting_tasks();
void monitor_stack();

#endif

// rtos.c (태스크 등록, delay 기능 추가)
#include "rtos.h"
#include <stdio.h>
#include <stdlib.h>

TaskControl task_ctrl[MAX_TASK];
uint32_t*   task_stacks[MAX_TASK];
uint32_t    task_psp[MAX_TASK];
uint32_t    task_delay[MAX_TASK];
uint8_t     current_task = 0;
uint8_t     task_count = 0;

extern uint32_t get_tick();

void task_register(TaskType type, void (*func)(), uint32_t period_tick, uint8_t prio) {
    if (task_count >= MAX_TASK) return;
    task_ctrl[task_count].type = type;
    task_ctrl[task_count].func = func;
    task_ctrl[task_count].period_tick = period_tick;
    task_ctrl[task_count].priority = prio;
    task_ctrl[task_count].last_run_tick = 0;
    task_ctrl[task_count].missed_count = 0;
    task_ctrl[task_count].active = (type == TASK_EVENT_DRIVEN);
    task_delay[task_count] = 0;
    task_count++;
}

void delay(uint32_t tick) {
    task_delay[current_task] = tick;
    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    while (task_delay[current_task] > 0); // sleep
}

void SysTick_Handler(void) {
    for (int i = 0; i < task_count; i++) {
        if (task_delay[i] > 0) task_delay[i]--;
    }
    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
}

void pre_task(uint8_t task_id) {
    task_ctrl[task_id].last_run_tick = get_tick();
}

void post_task(uint8_t task_id) {
    // 주기성 태스크 누락 보정
    if (task_ctrl[task_id].type == TASK_PERIODIC_CATCHUP &&
        task_ctrl[task_id].missed_count > 0)
    {
        task_ctrl[task_id].missed_count--;
    }
    if (task_ctrl[task_id].type == TASK_EVENT_DRIVEN) {
        task_ctrl[task_id].active = 0;
    }
}

void task_wrapper(void (*func)(), uint8_t task_id) {
    while (1) {
        pre_task(task_id);
        func();
        post_task(task_id);
    }
}

void scheduler_init() {
    for (int i = 0; i < task_count; i++) {
        task_stacks[i] = (uint32_t*)malloc(TASK_STACK_SIZE);
        for (int j = 0; j < TASK_STACK_SIZE / sizeof(uint32_t); j++) {
            task_stacks[i][j] = STACK_CANARY_PATTERN;
        }

        uint32_t *stk = task_stacks[i] + TASK_STACK_SIZE / 4;
        *(--stk) = 0x01000000;                        // xPSR
        *(--stk) = (uint32_t)task_wrapper;           // PC
        *(--stk) = 0; // LR
        *(--stk) = 0; // R12
        *(--stk) = 0; // R3
        *(--stk) = 0; // R2
        *(--stk) = 0; // R1
        *(--stk) = (uint32_t)task_ctrl[i].func;      // R0
        for (int r = 0; r < 8; r++) *(--stk) = 0;
        task_psp[i] = (uint32_t)stk;
    }
}

void scheduler_start() {
    current_task = 0;
    __set_PSP(task_psp[current_task]);
    __set_CONTROL(0x03);
    __ISB();
    task_wrapper(task_ctrl[current_task].func, current_task);
}

void task_set_priority(uint8_t task_id, uint8_t new_prio) {
    if (task_id < task_count && task_ctrl[task_id].type == TASK_OPPORTUNISTIC) {
        task_ctrl[task_id].priority = new_prio;
    }
}

void task_wake(uint8_t task_id) {
    if (task_id < task_count && task_ctrl[task_id].type == TASK_EVENT_DRIVEN) {
        task_ctrl[task_id].active = 1;
    }
}

void schedule() {
    uint32_t now = get_tick();
    uint8_t best_task = current_task;
    uint8_t best_score = 0;

    for (int i = 0; i < task_count; i++) {
        if (task_delay[i] > 0) continue;
        TaskControl *t = &task_ctrl[i];

        switch (t->type) {
        case TASK_PERIODIC_CATCHUP:
            if (now - t->last_run_tick >= t->period_tick) {
                uint32_t miss = (now - t->last_run_tick) / t->period_tick;
                t->missed_count = (miss > 3) ? 3 : miss;
                if (t->missed_count > 0) {
                    best_task = i;
                    goto chosen;
                }
            }
            break;
        case TASK_PERIODIC_SKIP:
            if (now - t->last_run_tick >= t->period_tick) {
                best_task = i;
                goto chosen;
            }
            break;
        case TASK_EVENT_DRIVEN:
            if (t->active) {
                best_task = i;
                goto chosen;
            }
            break;
        case TASK_OPPORTUNISTIC:
            if (t->priority > best_score) {
                best_score = t->priority;
                best_task = i;
            }
            break;
        }
    }

chosen:
    if (best_task != current_task) {
        task_psp[current_task] = __get_PSP();
        current_task = best_task;
        __set_PSP(task_psp[current_task]);
    }
}

void PendSV_Handler(void) {
    __asm volatile(
        "MRS R0, PSP\n"
        "STMDB R0!, {R4-R11}\n"
        "LDR R1, =task_psp\n"
        "LDR R2, =current_task\n"
        "LDR R3, [R2]\n"
        "STR R0, [R1, R3, LSL #2]\n"
        "BL schedule\n"
        "LDR R3, [R2]\n"
        "LDR R0, [R1, R3, LSL #2]\n"
        "LDMIA R0!, {R4-R11}\n"
        "MSR PSP, R0\n"
        "BX LR\n"
    );
}

// semaphore.h
#ifndef SEMAPHORE_H
#define SEMAPHORE_H

#include <stdint.h>

// ========== Binary Semaphore ==========
typedef struct {
    volatile uint8_t value;
} Semaphore;

void sem_init(Semaphore *s, uint8_t init_val);
void sem_wait(Semaphore *s);
void sem_give(Semaphore *s);

// ========== Recursive Mutex ==========
typedef struct {
    volatile uint8_t owner_task_id;
    volatile uint8_t lock_count;    // 0이면 잠기지 않음
} Mutex;

void mutex_init(Mutex *m);
void mutex_lock(Mutex *m, uint8_t task_id);
void mutex_unlock(Mutex *m, uint8_t task_id);

#endif // SEMAPHORE_H


// semaphore.c
#include "semaphore.h"

extern void delay(uint32_t ms);
extern uint8_t current_task;

// ========== Binary Semaphore ==========
void sem_init(Semaphore *s, uint8_t init_val) {
    s->value = init_val ? 1 : 0;
}

void sem_wait(Semaphore *s) {
    while (1) {
        __disable_irq();
        if (s->value) {
            s->value = 0;
            __enable_irq();
            return;
        }
        __enable_irq();
        delay(1);  // sleep 1 tick
    }
}

void sem_give(Semaphore *s) {
    __disable_irq();
    s->value = 1;
    __enable_irq();
}


// mutex.c
#include "rtos.h"

extern void delay(uint32_t ms);
extern uint8_t current_task;
extern uint32_t get_tick();

void mutex_init(Mutex *m) {
    m->lock_count = 0;
    m->owner_task_id = 0xFF;
}

void mutex_lock(Mutex *m, uint8_t task_id) {
    while (1) {
        __disable_irq();
        if (m->lock_count == 0) {
            m->owner_task_id = task_id;
            m->lock_count = 1;
            __enable_irq();
            return;
        } else if (m->owner_task_id == task_id) {
            m->lock_count++;
            __enable_irq();
            return;
        }
        __enable_irq();
        task_monitors[task_id].wait_tick = get_tick();
        task_monitors[task_id].wait_desc = "MUTEX_WAIT";
        delay(1);
    }
}

int mutex_try_lock(Mutex *m, uint8_t task_id) {
    int success = 0;
    __disable_irq();
    if (m->lock_count == 0) {
        m->owner_task_id = task_id;
        m->lock_count = 1;
        success = 1;
    } else if (m->owner_task_id == task_id) {
        m->lock_count++;
        success = 1;
    }
    __enable_irq();
    return success;
}

int mutex_lock_timeout(Mutex *m, uint8_t task_id, uint32_t timeout_tick) {
    uint32_t start = get_tick();
    while ((get_tick() - start) < timeout_tick) {
        __disable_irq();
        if (m->lock_count == 0) {
            m->owner_task_id = task_id;
            m->lock_count = 1;
            __enable_irq();
            return 1;
        } else if (m->owner_task_id == task_id) {
            m->lock_count++;
            __enable_irq();
            return 1;
        }
        __enable_irq();
        task_monitors[task_id].wait_tick = get_tick();
        task_monitors[task_id].wait_desc = "MUTEX_TIMEOUT";
        delay(1);
    }
    return 0;
}

void mutex_unlock(Mutex *m, uint8_t task_id) {
    __disable_irq();
    if (m->owner_task_id == task_id && m->lock_count > 0) {
        m->lock_count--;
        if (m->lock_count == 0) {
            m->owner_task_id = 0xFF;
        }
    }
    __enable_irq();
}

