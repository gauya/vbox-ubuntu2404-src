0000 0001 comment     .    comment         : // parser.cpp
0001 0002 comment     .    comment         : #include "parser.h"
0002 0003 comment     .    comment         : #include <iostream>
0003 0004 comment     .    comment         : #include <stdexcept>
0004 0005 comment     .    comment         : #include <utility> // std::move를 위해
0005 0007 name        .    dattype         : namespace
0006 0007 name        .    name            : MyLang
0007 0007 block       .  { brace_open      : {
0008 0009 comment     .    comment         : // ... (Parser 생성자 및 expect, currentToken, advance 함수는 동일) ...
0009 0011 name        .    name            : std
0010 0011 operator    . :: scope_op        : ::
0011 0011 name        .    name            : string
0012 0011 name        .    name            : tokenTypeToString
0013 0011 block       .  ( paren_open      : (
0014 0011 name        .    name            : TokenType
0015 0011 name        .    name            : type
0016 0011 block       .  ) paren_close     : )
0017 0011 block       .  { brace_open      : {
0018 0012 name        .    keyword         : return
0019 0012 string      .    undef           : 
0020 0012 sp_char     .  ; schar           : ;
0021 0013 block       .  } brace_close     : }
0022 0015 comment     .    comment         : // ... (parseProgram 함수는 동일) ...
0023 0017 name        .    name            : std
0024 0017 operator    . :: scope_op        : ::
0025 0017 name        .    name            : unique_ptr
0026 0017 block       .  < angle_bracket_open : <
0027 0017 name        .    name            : ASTNode
0028 0017 block       .  > angle_bracket_close : >
0029 0017 name        .    name            : Parser
0030 0017 operator    . :: scope_op        : ::
0031 0017 name        .    name            : parseStatement
0032 0017 block       .  ( paren_open      : (
0033 0017 block       .  ) paren_close     : )
0034 0017 block       .  { brace_open      : {
0035 0018 name        .    keyword         : if
0036 0018 block       .  ( paren_open      : (
0037 0018 name        .    name            : currentToken
0038 0018 block       .  ( paren_open      : (
0039 0018 block       .  ) paren_close     : )
0040 0018 sp_char     .  . schar           : .
0041 0018 name        .    name            : subtype
0042 0018 operator    . == relation_op     : ==
0043 0018 name        .    name            : TokenSubtype
0044 0018 operator    . :: scope_op        : ::
0045 0018 name        .    name            : KEYWORD
0046 0018 block       .  ) paren_close     : )
0047 0018 block       .  { brace_open      : {
0048 0019 name        .    keyword         : if
0049 0019 block       .  ( paren_open      : (
0050 0019 name        .    name            : currentToken
0051 0019 block       .  ( paren_open      : (
0052 0019 block       .  ) paren_close     : )
0053 0019 sp_char     .  . schar           : .
0054 0019 name        .    name            : value
0055 0019 operator    . == relation_op     : ==
0056 0019 string      .    undef           : if
0057 0019 block       .  ) paren_close     : )
0058 0019 block       .  { brace_open      : {
0059 0020 name        .    keyword         : return
0060 0020 name        .    name            : parseIfStatement
0061 0020 block       .  ( paren_open      : (
0062 0020 block       .  ) paren_close     : )
0063 0020 sp_char     .  ; schar           : ;
0064 0021 block       .  } brace_close     : }
0065 0021 name        .    keyword         : else
0066 0021 name        .    keyword         : if
0067 0021 block       .  ( paren_open      : (
0068 0021 name        .    name            : currentToken
0069 0021 block       .  ( paren_open      : (
0070 0021 block       .  ) paren_close     : )
0071 0021 sp_char     .  . schar           : .
0072 0021 name        .    name            : value
0073 0021 operator    . == relation_op     : ==
0074 0021 string      .    undef           : while
0075 0021 block       .  ) paren_close     : )
0076 0021 block       .  { brace_open      : {
0077 0022 name        .    keyword         : return
0078 0022 name        .    name            : parseWhileStatement
0079 0022 block       .  ( paren_open      : (
0080 0022 block       .  ) paren_close     : )
0081 0022 sp_char     .  ; schar           : ;
0082 0023 block       .  } brace_close     : }
0083 0023 name        .    keyword         : else
0084 0023 name        .    keyword         : if
0085 0023 block       .  ( paren_open      : (
0086 0023 name        .    name            : currentToken
0087 0023 block       .  ( paren_open      : (
0088 0023 block       .  ) paren_close     : )
0089 0023 sp_char     .  . schar           : .
0090 0023 name        .    name            : value
0091 0023 operator    . == relation_op     : ==
0092 0023 string      .    undef           : func
0093 0023 block       .  ) paren_close     : )
0094 0023 block       .  { brace_open      : {
0095 0024 name        .    keyword         : return
0096 0024 name        .    name            : parseFunctionDeclaration
0097 0024 block       .  ( paren_open      : (
0098 0024 block       .  ) paren_close     : )
0099 0024 sp_char     .  ; schar           : ;
0100 0025 block       .  } brace_close     : }
0101 0025 name        .    keyword         : else
0102 0025 name        .    keyword         : if
0103 0025 block       .  ( paren_open      : (
0104 0025 name        .    name            : currentToken
0105 0025 block       .  ( paren_open      : (
0106 0025 block       .  ) paren_close     : )
0107 0025 sp_char     .  . schar           : .
0108 0025 name        .    name            : value
0109 0025 operator    . == relation_op     : ==
0110 0025 string      .    undef           : return
0111 0025 block       .  ) paren_close     : )
0112 0025 block       .  { brace_open      : {
0113 0026 name        .    name            : expect
0114 0026 block       .  ( paren_open      : (
0115 0026 name        .    name            : TokenSubtype
0116 0026 operator    . :: scope_op        : ::
0117 0026 name        .    name            : KEYWORD
0118 0026 sp_char     .  , schar           : ,
0119 0026 string      .    undef           : return
0120 0026 block       .  ) paren_close     : )
0121 0026 sp_char     .  ; schar           : ;
0122 0027 name        .    keyword         : auto
0123 0027 name        .    name            : expr
0124 0027 operator    .  = assign_op       : =
0125 0027 name        .    name            : parseExpression
0126 0027 block       .  ( paren_open      : (
0127 0027 block       .  ) paren_close     : )
0128 0027 sp_char     .  ; schar           : ;
0129 0028 name        .    name            : expect
0130 0028 block       .  ( paren_open      : (
0131 0028 name        .    name            : TokenType
0132 0028 operator    . :: scope_op        : ::
0133 0028 name        .    name            : SCHAR
0134 0028 sp_char     .  , schar           : ,
0135 0028 string      .    undef           : ;
0136 0028 block       .  ) paren_close     : )
0137 0028 sp_char     .  ; schar           : ;
0138 0029 name        .    keyword         : return
0139 0029 name        .    name            : std
0140 0029 operator    . :: scope_op        : ::
0141 0029 name        .    name            : make_unique
0142 0029 block       .  < angle_bracket_open : <
0143 0029 name        .    name            : ReturnStatementNode
0144 0029 block       .  > angle_bracket_close : >
0145 0029 block       .  ( paren_open      : (
0146 0029 name        .    name            : std
0147 0029 operator    . :: scope_op        : ::
0148 0029 name        .    name            : move
0149 0029 block       .  ( paren_open      : (
0150 0029 name        .    name            : expr
0151 0029 block       .  ) paren_close     : )
0152 0029 block       .  ) paren_close     : )
0153 0029 sp_char     .  ; schar           : ;
0154 0030 block       .  } brace_close     : }
0155 0030 name        .    keyword         : else
0156 0030 block       .  { brace_open      : {
0157 0031 comment     .    comment         : // error 
0158 0032 block       .  } brace_close     : }
0159 0033 block       .  } brace_close     : }
0160 0034 name        .    keyword         : auto
0161 0034 name        .    name            : expr
0162 0034 operator    .  = assign_op       : =
0163 0034 name        .    name            : parseExpression
0164 0034 block       .  ( paren_open      : (
0165 0034 block       .  ) paren_close     : )
0166 0034 sp_char     .  ; schar           : ;
0167 0035 name        .    name            : expect
0168 0035 block       .  ( paren_open      : (
0169 0035 name        .    name            : TokenType
0170 0035 operator    . :: scope_op        : ::
0171 0035 name        .    name            : SCHAR
0172 0035 sp_char     .  , schar           : ,
0173 0035 string      .    undef           : ;
0174 0035 block       .  ) paren_close     : )
0175 0035 sp_char     .  ; schar           : ;
0176 0036 name        .    keyword         : return
0177 0036 name        .    name            : std
0178 0036 operator    . :: scope_op        : ::
0179 0036 name        .    name            : make_unique
0180 0036 block       .  < angle_bracket_open : <
0181 0036 name        .    name            : ExpressionStatementNode
0182 0036 block       .  > angle_bracket_close : >
0183 0036 block       .  ( paren_open      : (
0184 0036 name        .    name            : std
0185 0036 operator    . :: scope_op        : ::
0186 0036 name        .    name            : move
0187 0036 block       .  ( paren_open      : (
0188 0036 name        .    name            : expr
0189 0036 block       .  ) paren_close     : )
0190 0036 block       .  ) paren_close     : )
0191 0036 sp_char     .  ; schar           : ;
0192 0037 block       .  } brace_close     : }
0193 0039 comment     .    comment         : // --- 변경: parseBlock()의 반환 타입을 일치시킴 ---
0194 0040 name        .    name            : std
0195 0040 operator    . :: scope_op        : ::
0196 0040 name        .    name            : unique_ptr
0197 0040 block       .  < angle_bracket_open : <
0198 0040 name        .    name            : BlockNode
0199 0040 block       .  > angle_bracket_close : >
0200 0040 name        .    name            : Parser
0201 0040 operator    . :: scope_op        : ::
0202 0040 name        .    name            : parseBlock
0203 0040 block       .  ( paren_open      : (
0204 0040 block       .  ) paren_close     : )
0205 0040 block       .  { brace_open      : {
0206 0041 name        .    name            : expect
0207 0041 block       .  ( paren_open      : (
0208 0041 name        .    name            : TokenSubtype
0209 0041 operator    . :: scope_op        : ::
0210 0041 name        .    name            : BRACE_OPEN
0211 0041 block       .  ) paren_close     : )
0212 0041 sp_char     .  ; schar           : ;
0213 0041 comment     .    comment         : // '{'
0214 0042 name        .    keyword         : auto
0215 0042 name        .    name            : block_node
0216 0042 operator    .  = assign_op       : =
0217 0042 name        .    name            : std
0218 0042 operator    . :: scope_op        : ::
0219 0042 name        .    name            : make_unique
0220 0042 block       .  < angle_bracket_open : <
0221 0042 name        .    name            : BlockNode
0222 0042 block       .  > angle_bracket_close : >
0223 0042 block       .  ( paren_open      : (
0224 0042 block       .  ) paren_close     : )
0225 0042 sp_char     .  ; schar           : ;
0226 0043 name        .    keyword         : while
0227 0043 block       .  ( paren_open      : (
0228 0043 name        .    name            : currentToken
0229 0043 block       .  ( paren_open      : (
0230 0043 block       .  ) paren_close     : )
0231 0043 sp_char     .  . schar           : .
0232 0043 name        .    name            : subtype
0233 0043 operator    . != relation_op     : !=
0234 0043 name        .    name            : TokenSubtype
0235 0043 operator    . :: scope_op        : ::
0236 0043 name        .    name            : BRACE_CLOSE
0237 0043 operator    . && logic_op        : &&
0238 0044 name        .    name            : currentToken
0239 0044 block       .  ( paren_open      : (
0240 0044 block       .  ) paren_close     : )
0241 0044 sp_char     .  . schar           : .
0242 0044 name        .    name            : type
0243 0044 operator    . != relation_op     : !=
0244 0044 name        .    name            : TokenType
0245 0044 operator    . :: scope_op        : ::
0246 0044 name        .    name            : END_OF_FILE
0247 0044 block       .  ) paren_close     : )
0248 0044 block       .  { brace_open      : {
0249 0045 name        .    name            : block_node
0250 0045 operator    . -> struct_op       : ->
0251 0045 name        .    name            : statements
0252 0045 sp_char     .  . schar           : .
0253 0045 name        .    name            : push_back
0254 0045 block       .  ( paren_open      : (
0255 0045 name        .    name            : parseStatement
0256 0045 block       .  ( paren_open      : (
0257 0045 block       .  ) paren_close     : )
0258 0045 block       .  ) paren_close     : )
0259 0045 sp_char     .  ; schar           : ;
0260 0046 block       .  } brace_close     : }
0261 0047 name        .    name            : expect
0262 0047 block       .  ( paren_open      : (
0263 0047 name        .    name            : TokenSubtype
0264 0047 operator    . :: scope_op        : ::
0265 0047 name        .    name            : BRACE_CLOSE
0266 0047 block       .  ) paren_close     : )
0267 0047 sp_char     .  ; schar           : ;
0268 0047 comment     .    comment         : // '}'
0269 0048 name        .    keyword         : return
0270 0048 name        .    name            : block_node
0271 0048 sp_char     .  ; schar           : ;
0272 0049 block       .  } brace_close     : }
0273 0050 comment     .    comment         : // --- 여기까지 변경 ---
0274 0052 name        .    name            : std
0275 0052 operator    . :: scope_op        : ::
0276 0052 name        .    name            : unique_ptr
0277 0052 block       .  < angle_bracket_open : <
0278 0052 name        .    name            : ASTNode
0279 0052 block       .  > angle_bracket_close : >
0280 0052 name        .    name            : Parser
0281 0052 operator    . :: scope_op        : ::
0282 0052 name        .    name            : parseIfStatement
0283 0052 block       .  ( paren_open      : (
0284 0052 block       .  ) paren_close     : )
0285 0052 block       .  { brace_open      : {
0286 0053 name        .    name            : expect
0287 0053 block       .  ( paren_open      : (
0288 0053 name        .    name            : TokenSubtype
0289 0053 operator    . :: scope_op        : ::
0290 0053 name        .    name            : KEYWORD
0291 0053 sp_char     .  , schar           : ,
0292 0053 string      .    undef           : if
0293 0053 block       .  ) paren_close     : )
0294 0053 sp_char     .  ; schar           : ;
0295 0054 name        .    name            : expect
0296 0054 block       .  ( paren_open      : (
0297 0054 name        .    name            : TokenSubtype
0298 0054 operator    . :: scope_op        : ::
0299 0054 name        .    name            : PAREN_OPEN
0300 0054 block       .  ) paren_close     : )
0301 0054 sp_char     .  ; schar           : ;
0302 0055 name        .    keyword         : auto
0303 0055 name        .    name            : condition
0304 0055 operator    .  = assign_op       : =
0305 0055 name        .    name            : parseExpression
0306 0055 block       .  ( paren_open      : (
0307 0055 block       .  ) paren_close     : )
0308 0055 sp_char     .  ; schar           : ;
0309 0056 name        .    name            : expect
0310 0056 block       .  ( paren_open      : (
0311 0056 name        .    name            : TokenSubtype
0312 0056 operator    . :: scope_op        : ::
0313 0056 name        .    name            : PAREN_CLOSE
0314 0056 block       .  ) paren_close     : )
0315 0056 sp_char     .  ; schar           : ;
0316 0058 comment     .    comment         : // --- 변경: body와 else_body에 직접 할당 가능 ---
0317 0059 name        .    keyword         : auto
0318 0059 name        .    name            : body
0319 0059 operator    .  = assign_op       : =
0320 0059 name        .    name            : parseBlock
0321 0059 block       .  ( paren_open      : (
0322 0059 block       .  ) paren_close     : )
0323 0059 sp_char     .  ; schar           : ;
0324 0059 comment     .    comment         : // 이제 unique_ptr<BlockNode>를 반환
0325 0061 name        .    name            : std
0326 0061 operator    . :: scope_op        : ::
0327 0061 name        .    name            : unique_ptr
0328 0061 block       .  < angle_bracket_open : <
0329 0061 name        .    name            : BlockNode
0330 0061 block       .  > angle_bracket_close : >
0331 0061 name        .    name            : else_body
0332 0061 operator    .  = assign_op       : =
0333 0061 name        .    name            : nullptr
0334 0061 sp_char     .  ; schar           : ;
0335 0062 name        .    keyword         : if
0336 0062 block       .  ( paren_open      : (
0337 0062 name        .    name            : currentToken
0338 0062 block       .  ( paren_open      : (
0339 0062 block       .  ) paren_close     : )
0340 0062 sp_char     .  . schar           : .
0341 0062 name        .    name            : subtype
0342 0062 operator    . == relation_op     : ==
0343 0062 name        .    name            : TokenSubtype
0344 0062 operator    . :: scope_op        : ::
0345 0062 name        .    name            : KEYWORD
0346 0062 operator    . && logic_op        : &&
0347 0062 name        .    name            : currentToken
0348 0062 block       .  ( paren_open      : (
0349 0062 block       .  ) paren_close     : )
0350 0062 sp_char     .  . schar           : .
0351 0062 name        .    name            : value
0352 0062 operator    . == relation_op     : ==
0353 0062 string      .    undef           : else
0354 0062 block       .  ) paren_close     : )
0355 0062 block       .  { brace_open      : {
0356 0063 name        .    name            : expect
0357 0063 block       .  ( paren_open      : (
0358 0063 name        .    name            : TokenSubtype
0359 0063 operator    . :: scope_op        : ::
0360 0063 name        .    name            : KEYWORD
0361 0063 sp_char     .  , schar           : ,
0362 0063 string      .    undef           : else
0363 0063 block       .  ) paren_close     : )
0364 0063 sp_char     .  ; schar           : ;
0365 0064 name        .    name            : else_body
0366 0064 operator    .  = assign_op       : =
0367 0064 name        .    name            : parseBlock
0368 0064 block       .  ( paren_open      : (
0369 0064 block       .  ) paren_close     : )
0370 0064 sp_char     .  ; schar           : ;
0371 0064 comment     .    comment         : // 이제 unique_ptr<BlockNode>를 반환
0372 0065 block       .  } brace_close     : }
0373 0067 name        .    keyword         : auto
0374 0067 name        .    name            : if_node
0375 0067 operator    .  = assign_op       : =
0376 0067 name        .    name            : std
0377 0067 operator    . :: scope_op        : ::
0378 0067 name        .    name            : make_unique
0379 0067 block       .  < angle_bracket_open : <
0380 0067 name        .    name            : IfStatementNode
0381 0067 block       .  > angle_bracket_close : >
0382 0067 block       .  ( paren_open      : (
0383 0067 block       .  ) paren_close     : )
0384 0067 sp_char     .  ; schar           : ;
0385 0068 name        .    name            : if_node
0386 0068 operator    . -> struct_op       : ->
0387 0068 name        .    name            : condition
0388 0068 operator    .  = assign_op       : =
0389 0068 name        .    name            : std
0390 0068 operator    . :: scope_op        : ::
0391 0068 name        .    name            : move
0392 0068 block       .  ( paren_open      : (
0393 0068 name        .    name            : condition
0394 0068 block       .  ) paren_close     : )
0395 0068 sp_char     .  ; schar           : ;
0396 0069 name        .    name            : if_node
0397 0069 operator    . -> struct_op       : ->
0398 0069 name        .    name            : body
0399 0069 operator    .  = assign_op       : =
0400 0069 name        .    name            : std
0401 0069 operator    . :: scope_op        : ::
0402 0069 name        .    name            : move
0403 0069 block       .  ( paren_open      : (
0404 0069 name        .    name            : body
0405 0069 block       .  ) paren_close     : )
0406 0069 sp_char     .  ; schar           : ;
0407 0070 name        .    name            : if_node
0408 0070 operator    . -> struct_op       : ->
0409 0070 name        .    name            : else_body
0410 0070 operator    .  = assign_op       : =
0411 0070 name        .    name            : std
0412 0070 operator    . :: scope_op        : ::
0413 0070 name        .    name            : move
0414 0070 block       .  ( paren_open      : (
0415 0070 name        .    name            : else_body
0416 0070 block       .  ) paren_close     : )
0417 0070 sp_char     .  ; schar           : ;
0418 0071 name        .    keyword         : return
0419 0071 name        .    name            : if_node
0420 0071 sp_char     .  ; schar           : ;
0421 0072 block       .  } brace_close     : }
0422 0074 name        .    name            : std
0423 0074 operator    . :: scope_op        : ::
0424 0074 name        .    name            : unique_ptr
0425 0074 block       .  < angle_bracket_open : <
0426 0074 name        .    name            : ASTNode
0427 0074 block       .  > angle_bracket_close : >
0428 0074 name        .    name            : Parser
0429 0074 operator    . :: scope_op        : ::
0430 0074 name        .    name            : parseWhileStatement
0431 0074 block       .  ( paren_open      : (
0432 0074 block       .  ) paren_close     : )
0433 0074 block       .  { brace_open      : {
0434 0075 name        .    name            : expect
0435 0075 block       .  ( paren_open      : (
0436 0075 name        .    name            : TokenSubtype
0437 0075 operator    . :: scope_op        : ::
0438 0075 name        .    name            : KEYWORD
0439 0075 sp_char     .  , schar           : ,
0440 0075 string      .    undef           : while
0441 0075 block       .  ) paren_close     : )
0442 0075 sp_char     .  ; schar           : ;
0443 0076 name        .    name            : expect
0444 0076 block       .  ( paren_open      : (
0445 0076 name        .    name            : TokenSubtype
0446 0076 operator    . :: scope_op        : ::
0447 0076 name        .    name            : PAREN_OPEN
0448 0076 block       .  ) paren_close     : )
0449 0076 sp_char     .  ; schar           : ;
0450 0077 name        .    keyword         : auto
0451 0077 name        .    name            : condition
0452 0077 operator    .  = assign_op       : =
0453 0077 name        .    name            : parseExpression
0454 0077 block       .  ( paren_open      : (
0455 0077 block       .  ) paren_close     : )
0456 0077 sp_char     .  ; schar           : ;
0457 0078 name        .    name            : expect
0458 0078 block       .  ( paren_open      : (
0459 0078 name        .    name            : TokenSubtype
0460 0078 operator    . :: scope_op        : ::
0461 0078 name        .    name            : PAREN_CLOSE
0462 0078 block       .  ) paren_close     : )
0463 0078 sp_char     .  ; schar           : ;
0464 0080 comment     .    comment         : // --- 변경: body에 직접 할당 가능 ---
0465 0081 name        .    keyword         : auto
0466 0081 name        .    name            : body
0467 0081 operator    .  = assign_op       : =
0468 0081 name        .    name            : parseBlock
0469 0081 block       .  ( paren_open      : (
0470 0081 block       .  ) paren_close     : )
0471 0081 sp_char     .  ; schar           : ;
0472 0083 name        .    keyword         : auto
0473 0083 name        .    name            : while_node
0474 0083 operator    .  = assign_op       : =
0475 0083 name        .    name            : std
0476 0083 operator    . :: scope_op        : ::
0477 0083 name        .    name            : make_unique
0478 0083 block       .  < angle_bracket_open : <
0479 0083 name        .    name            : WhileStatementNode
0480 0083 block       .  > angle_bracket_close : >
0481 0083 block       .  ( paren_open      : (
0482 0083 block       .  ) paren_close     : )
0483 0083 sp_char     .  ; schar           : ;
0484 0084 name        .    name            : while_node
0485 0084 operator    . -> struct_op       : ->
0486 0084 name        .    name            : condition
0487 0084 operator    .  = assign_op       : =
0488 0084 name        .    name            : std
0489 0084 operator    . :: scope_op        : ::
0490 0084 name        .    name            : move
0491 0084 block       .  ( paren_open      : (
0492 0084 name        .    name            : condition
0493 0084 block       .  ) paren_close     : )
0494 0084 sp_char     .  ; schar           : ;
0495 0085 name        .    name            : while_node
0496 0085 operator    . -> struct_op       : ->
0497 0085 name        .    name            : body
0498 0085 operator    .  = assign_op       : =
0499 0085 name        .    name            : std
0500 0085 operator    . :: scope_op        : ::
0501 0085 name        .    name            : move
0502 0085 block       .  ( paren_open      : (
0503 0085 name        .    name            : body
0504 0085 block       .  ) paren_close     : )
0505 0085 sp_char     .  ; schar           : ;
0506 0086 name        .    keyword         : return
0507 0086 name        .    name            : while_node
0508 0086 sp_char     .  ; schar           : ;
0509 0087 block       .  } brace_close     : }
0510 0089 name        .    name            : std
0511 0089 operator    . :: scope_op        : ::
0512 0089 name        .    name            : unique_ptr
0513 0089 block       .  < angle_bracket_open : <
0514 0089 name        .    name            : ASTNode
0515 0089 block       .  > angle_bracket_close : >
0516 0089 name        .    name            : Parser
0517 0089 operator    . :: scope_op        : ::
0518 0089 name        .    name            : parseFunctionDeclaration
0519 0089 block       .  ( paren_open      : (
0520 0089 block       .  ) paren_close     : )
0521 0089 block       .  { brace_open      : {
0522 0090 name        .    name            : expect
0523 0090 block       .  ( paren_open      : (
0524 0090 name        .    name            : TokenSubtype
0525 0090 operator    . :: scope_op        : ::
0526 0090 name        .    name            : KEYWORD
0527 0090 sp_char     .  , schar           : ,
0528 0090 string      .    undef           : func
0529 0090 block       .  ) paren_close     : )
0530 0090 sp_char     .  ; schar           : ;
0531 0091 name        .    name            : Token
0532 0091 name        .    name            : name_token
0533 0091 operator    .  = assign_op       : =
0534 0091 name        .    name            : expect
0535 0091 block       .  ( paren_open      : (
0536 0091 name        .    name            : TokenSubtype
0537 0091 operator    . :: scope_op        : ::
0538 0091 name        .    name            : IDENTIFIER
0539 0091 block       .  ) paren_close     : )
0540 0091 sp_char     .  ; schar           : ;
0541 0092 name        .    name            : expect
0542 0092 block       .  ( paren_open      : (
0543 0092 name        .    name            : TokenSubtype
0544 0092 operator    . :: scope_op        : ::
0545 0092 name        .    name            : PAREN_OPEN
0546 0092 block       .  ) paren_close     : )
0547 0092 sp_char     .  ; schar           : ;
0548 0094 name        .    name            : std
0549 0094 operator    . :: scope_op        : ::
0550 0094 name        .    name            : vector
0551 0094 block       .  < angle_bracket_open : <
0552 0094 name        .    name            : std
0553 0094 operator    . :: scope_op        : ::
0554 0094 name        .    name            : string
0555 0094 block       .  > angle_bracket_close : >
0556 0094 name        .    name            : params
0557 0094 sp_char     .  ; schar           : ;
0558 0095 name        .    keyword         : if
0559 0095 block       .  ( paren_open      : (
0560 0095 name        .    name            : currentToken
0561 0095 block       .  ( paren_open      : (
0562 0095 block       .  ) paren_close     : )
0563 0095 sp_char     .  . schar           : .
0564 0095 name        .    name            : subtype
0565 0095 operator    . == relation_op     : ==
0566 0095 name        .    name            : TokenSubtype
0567 0095 operator    . :: scope_op        : ::
0568 0095 name        .    name            : IDENTIFIER
0569 0095 block       .  ) paren_close     : )
0570 0095 block       .  { brace_open      : {
0571 0096 name        .    name            : params
0572 0096 sp_char     .  . schar           : .
0573 0096 name        .    name            : push_back
0574 0096 block       .  ( paren_open      : (
0575 0096 name        .    name            : expect
0576 0096 block       .  ( paren_open      : (
0577 0096 name        .    name            : TokenSubtype
0578 0096 operator    . :: scope_op        : ::
0579 0096 name        .    name            : IDENTIFIER
0580 0096 block       .  ) paren_close     : )
0581 0096 sp_char     .  . schar           : .
0582 0096 name        .    name            : value
0583 0096 block       .  ) paren_close     : )
0584 0096 sp_char     .  ; schar           : ;
0585 0097 name        .    keyword         : while
0586 0097 block       .  ( paren_open      : (
0587 0097 name        .    name            : currentToken
0588 0097 block       .  ( paren_open      : (
0589 0097 block       .  ) paren_close     : )
0590 0097 sp_char     .  . schar           : .
0591 0097 name        .    name            : type
0592 0097 operator    . == relation_op     : ==
0593 0097 name        .    name            : TokenType
0594 0097 operator    . :: scope_op        : ::
0595 0097 name        .    name            : OPERATOR
0596 0097 operator    . && logic_op        : &&
0597 0097 name        .    name            : currentToken
0598 0097 block       .  ( paren_open      : (
0599 0097 block       .  ) paren_close     : )
0600 0097 sp_char     .  . schar           : .
0601 0097 name        .    name            : value
0602 0097 operator    . == relation_op     : ==
0603 0097 string      .    undef           : ,
0604 0097 block       .  ) paren_close     : )
0605 0097 block       .  { brace_open      : {
0606 0098 name        .    name            : expect
0607 0098 block       .  ( paren_open      : (
0608 0098 name        .    name            : TokenType
0609 0098 operator    . :: scope_op        : ::
0610 0098 name        .    name            : OPERATOR
0611 0098 sp_char     .  , schar           : ,
0612 0098 string      .    undef           : ,
0613 0098 block       .  ) paren_close     : )
0614 0098 sp_char     .  ; schar           : ;
0615 0099 name        .    name            : params
0616 0099 sp_char     .  . schar           : .
0617 0099 name        .    name            : push_back
0618 0099 block       .  ( paren_open      : (
0619 0099 name        .    name            : expect
0620 0099 block       .  ( paren_open      : (
0621 0099 name        .    name            : TokenSubtype
0622 0099 operator    . :: scope_op        : ::
0623 0099 name        .    name            : IDENTIFIER
0624 0099 block       .  ) paren_close     : )
0625 0099 sp_char     .  . schar           : .
0626 0099 name        .    name            : value
0627 0099 block       .  ) paren_close     : )
0628 0099 sp_char     .  ; schar           : ;
0629 0100 block       .  } brace_close     : }
0630 0101 block       .  } brace_close     : }
0631 0102 name        .    name            : expect
0632 0102 block       .  ( paren_open      : (
0633 0102 name        .    name            : TokenSubtype
0634 0102 operator    . :: scope_op        : ::
0635 0102 name        .    name            : PAREN_CLOSE
0636 0102 block       .  ) paren_close     : )
0637 0102 sp_char     .  ; schar           : ;
0638 0104 comment     .    comment         : // --- 변경: body에 직접 할당 가능 ---
0639 0105 name        .    keyword         : auto
0640 0105 name        .    name            : body
0641 0105 operator    .  = assign_op       : =
0642 0105 name        .    name            : parseBlock
0643 0105 block       .  ( paren_open      : (
0644 0105 block       .  ) paren_close     : )
0645 0105 sp_char     .  ; schar           : ;
0646 0107 name        .    keyword         : auto
0647 0107 name        .    name            : func_node
0648 0107 operator    .  = assign_op       : =
0649 0107 name        .    name            : std
0650 0107 operator    . :: scope_op        : ::
0651 0107 name        .    name            : make_unique
0652 0107 block       .  < angle_bracket_open : <
0653 0107 name        .    name            : FunctionDeclarationNode
0654 0107 block       .  > angle_bracket_close : >
0655 0107 block       .  ( paren_open      : (
0656 0107 block       .  ) paren_close     : )
0657 0107 sp_char     .  ; schar           : ;
0658 0108 name        .    name            : func_node
0659 0108 operator    . -> struct_op       : ->
0660 0108 name        .    name            : name
0661 0108 operator    .  = assign_op       : =
0662 0108 name        .    name            : name_token
0663 0108 sp_char     .  . schar           : .
0664 0108 name        .    name            : value
0665 0108 sp_char     .  ; schar           : ;
0666 0109 name        .    name            : func_node
0667 0109 operator    . -> struct_op       : ->
0668 0109 name        .    name            : params
0669 0109 operator    .  = assign_op       : =
0670 0109 name        .    name            : std
0671 0109 operator    . :: scope_op        : ::
0672 0109 name        .    name            : move
0673 0109 block       .  ( paren_open      : (
0674 0109 name        .    name            : params
0675 0109 block       .  ) paren_close     : )
0676 0109 sp_char     .  ; schar           : ;
0677 0110 name        .    name            : func_node
0678 0110 operator    . -> struct_op       : ->
0679 0110 name        .    name            : body
0680 0110 operator    .  = assign_op       : =
0681 0110 name        .    name            : std
0682 0110 operator    . :: scope_op        : ::
0683 0110 name        .    name            : move
0684 0110 block       .  ( paren_open      : (
0685 0110 name        .    name            : body
0686 0110 block       .  ) paren_close     : )
0687 0110 sp_char     .  ; schar           : ;
0688 0111 name        .    keyword         : return
0689 0111 name        .    name            : func_node
0690 0111 sp_char     .  ; schar           : ;
0691 0112 block       .  } brace_close     : }
0692 0114 comment     .    comment         : // ASTNode::getNodeType()은 virtual이므로, dynamic_cast를 대체하는 데 유용합니다.
0693 0115 comment     .    comment         : // (main.cpp의 printAST 함수에서 활용)
0694 0117 name        .    name            : Parser
0695 0117 operator    . :: scope_op        : ::
0696 0117 name        .    name            : Parser
0697 0117 block       .  ( paren_open      : (
0698 0117 name        .    name            : std
0699 0117 operator    . :: scope_op        : ::
0700 0117 name        .    name            : vector
0701 0117 block       .  < angle_bracket_open : <
0702 0117 name        .    name            : Token
0703 0117 block       .  > angle_bracket_close : >
0704 0117 name        .    name            : tokens
0705 0117 block       .  ) paren_close     : )
0706 0118 sp_char     .  : schar           : :
0707 0118 name        .    name            : tokens
0708 0118 block       .  ( paren_open      : (
0709 0118 name        .    name            : std
0710 0118 operator    . :: scope_op        : ::
0711 0118 name        .    name            : move
0712 0118 block       .  ( paren_open      : (
0713 0118 name        .    name            : tokens
0714 0118 block       .  ) paren_close     : )
0715 0118 block       .  ) paren_close     : )
0716 0118 sp_char     .  , schar           : ,
0717 0118 name        .    name            : current_token_index
0718 0118 block       .  ( paren_open      : (
0719 0118 number      .    number          : 0
0720 0118 block       .  ) paren_close     : )
0721 0118 block       .  { brace_open      : {
0722 0119 name        .    keyword         : if
0723 0119 block       .  ( paren_open      : (
0724 0119 name        .    name            : this
0725 0119 operator    . -> struct_op       : ->
0726 0119 name        .    name            : tokens
0727 0119 sp_char     .  . schar           : .
0728 0119 name        .    name            : empty
0729 0119 block       .  ( paren_open      : (
0730 0119 block       .  ) paren_close     : )
0731 0119 block       .  ) paren_close     : )
0732 0119 block       .  { brace_open      : {
0733 0120 name        .    name            : this
0734 0120 operator    . -> struct_op       : ->
0735 0120 name        .    name            : tokens
0736 0120 sp_char     .  . schar           : .
0737 0120 name        .    name            : push_back
0738 0120 block       .  ( paren_open      : (
0739 0120 name        .    name            : Token
0740 0120 block       .  ( paren_open      : (
0741 0120 name        .    name            : TokenType
0742 0120 operator    . :: scope_op        : ::
0743 0120 name        .    name            : END_OF_FILE
0744 0120 sp_char     .  , schar           : ,
0745 0120 string      .    undef           : 
0746 0120 sp_char     .  , schar           : ,
0747 0120 number      .    number          : 0
0748 0120 sp_char     .  , schar           : ,
0749 0120 number      .    number          : 0
0750 0120 block       .  ) paren_close     : )
0751 0120 block       .  ) paren_close     : )
0752 0120 sp_char     .  ; schar           : ;
0753 0121 block       .  } brace_close     : }
0754 0122 block       .  } brace_close     : }
0755 0124 name        .    dattype         : const
0756 0124 name        .    name            : Token
0757 0124 operator    .  & bitwise_op      : &
0758 0124 name        .    name            : Parser
0759 0124 operator    . :: scope_op        : ::
0760 0124 name        .    name            : currentToken
0761 0124 block       .  ( paren_open      : (
0762 0124 block       .  ) paren_close     : )
0763 0124 name        .    dattype         : const
0764 0124 block       .  { brace_open      : {
0765 0125 name        .    keyword         : if
0766 0125 block       .  ( paren_open      : (
0767 0125 name        .    name            : current_token_index
0768 0125 block       .  > angle_bracket_close : >
0769 0125 operator    .  = assign_op       : =
0770 0125 name        .    name            : tokens
0771 0125 sp_char     .  . schar           : .
0772 0125 name        .    name            : size
0773 0125 block       .  ( paren_open      : (
0774 0125 block       .  ) paren_close     : )
0775 0125 block       .  ) paren_close     : )
0776 0125 block       .  { brace_open      : {
0777 0126 name        .    keyword         : return
0778 0126 name        .    name            : tokens
0779 0126 sp_char     .  . schar           : .
0780 0126 name        .    name            : back
0781 0126 block       .  ( paren_open      : (
0782 0126 block       .  ) paren_close     : )
0783 0126 sp_char     .  ; schar           : ;
0784 0127 block       .  } brace_close     : }
0785 0128 name        .    keyword         : return
0786 0128 name        .    name            : tokens
0787 0128 block       .  [ square_bracket_open : [
0788 0128 name        .    name            : current_token_index
0789 0128 block       .  ] square_bracket_close : ]
0790 0128 sp_char     .  ; schar           : ;
0791 0129 block       .  } brace_close     : }
0792 0131 name        .    dattype         : void
0793 0131 name        .    name            : Parser
0794 0131 operator    . :: scope_op        : ::
0795 0131 name        .    name            : advance
0796 0131 block       .  ( paren_open      : (
0797 0131 block       .  ) paren_close     : )
0798 0131 block       .  { brace_open      : {
0799 0132 name        .    keyword         : if
0800 0132 block       .  ( paren_open      : (
0801 0132 name        .    name            : current_token_index
0802 0132 block       .  < angle_bracket_open : <
0803 0132 name        .    name            : tokens
0804 0132 sp_char     .  . schar           : .
0805 0132 name        .    name            : size
0806 0132 block       .  ( paren_open      : (
0807 0132 block       .  ) paren_close     : )
0808 0132 block       .  ) paren_close     : )
0809 0132 block       .  { brace_open      : {
0810 0133 name        .    name            : current_token_index
0811 0133 operator    . ++ arthmetic_op    : ++
0812 0133 sp_char     .  ; schar           : ;
0813 0134 block       .  } brace_close     : }
0814 0135 block       .  } brace_close     : }
0815 0137 name        .    name            : Token
0816 0137 name        .    name            : Parser
0817 0137 operator    . :: scope_op        : ::
0818 0137 name        .    name            : expect
0819 0137 block       .  ( paren_open      : (
0820 0137 name        .    name            : TokenType
0821 0137 name        .    name            : type
0822 0137 block       .  ) paren_close     : )
0823 0137 block       .  { brace_open      : {
0824 0138 name        .    dattype         : const
0825 0138 name        .    name            : Token
0826 0138 operator    .  & bitwise_op      : &
0827 0138 name        .    name            : current
0828 0138 operator    .  = assign_op       : =
0829 0138 name        .    name            : currentToken
0830 0138 block       .  ( paren_open      : (
0831 0138 block       .  ) paren_close     : )
0832 0138 sp_char     .  ; schar           : ;
0833 0139 name        .    keyword         : if
0834 0139 block       .  ( paren_open      : (
0835 0139 name        .    name            : current
0836 0139 sp_char     .  . schar           : .
0837 0139 name        .    name            : type
0838 0139 operator    . == relation_op     : ==
0839 0139 name        .    name            : type
0840 0139 block       .  ) paren_close     : )
0841 0139 block       .  { brace_open      : {
0842 0140 name        .    name            : Token
0843 0140 name        .    name            : consumed_token
0844 0140 operator    .  = assign_op       : =
0845 0140 name        .    name            : current
0846 0140 sp_char     .  ; schar           : ;
0847 0141 name        .    name            : advance
0848 0141 block       .  ( paren_open      : (
0849 0141 block       .  ) paren_close     : )
0850 0141 sp_char     .  ; schar           : ;
0851 0142 name        .    keyword         : return
0852 0142 name        .    name            : consumed_token
0853 0142 sp_char     .  ; schar           : ;
0854 0143 block       .  } brace_close     : }
0855 0143 name        .    keyword         : else
0856 0143 block       .  { brace_open      : {
0857 0144 name        .    name            : throw
0858 0144 name        .    name            : std
0859 0144 operator    . :: scope_op        : ::
0860 0144 name        .    name            : runtime_error
0861 0144 block       .  ( paren_open      : (
0862 0144 string      .    undef           : Syntax Error: Expected 
0863 0144 operator    .  + arthmetic_op    : +
0864 0144 name        .    name            : tokenTypeToString
0865 0144 block       .  ( paren_open      : (
0866 0144 name        .    name            : type
0867 0144 block       .  ) paren_close     : )
0868 0144 operator    .  + arthmetic_op    : +
0869 0145 string      .    undef           : , got 
0870 0145 operator    .  + arthmetic_op    : +
0871 0145 name        .    name            : current
0872 0145 sp_char     .  . schar           : .
0873 0145 name        .    name            : toString
0874 0145 block       .  ( paren_open      : (
0875 0145 block       .  ) paren_close     : )
0876 0145 operator    .  + arthmetic_op    : +
0877 0146 string      .    undef           :  at line 
0878 0146 operator    .  + arthmetic_op    : +
0879 0146 name        .    name            : std
0880 0146 operator    . :: scope_op        : ::
0881 0146 name        .    name            : to_string
0882 0146 block       .  ( paren_open      : (
0883 0146 name        .    name            : current
0884 0146 sp_char     .  . schar           : .
0885 0146 name        .    name            : line
0886 0146 block       .  ) paren_close     : )
0887 0146 operator    .  + arthmetic_op    : +
0888 0147 string      .    undef           : , column 
0889 0147 operator    .  + arthmetic_op    : +
0890 0147 name        .    name            : std
0891 0147 operator    . :: scope_op        : ::
0892 0147 name        .    name            : to_string
0893 0147 block       .  ( paren_open      : (
0894 0147 name        .    name            : current
0895 0147 sp_char     .  . schar           : .
0896 0147 name        .    name            : column
0897 0147 block       .  ) paren_close     : )
0898 0147 block       .  ) paren_close     : )
0899 0147 sp_char     .  ; schar           : ;
0900 0148 block       .  } brace_close     : }
0901 0149 block       .  } brace_close     : }
0902 0151 name        .    name            : Token
0903 0151 name        .    name            : Parser
0904 0151 operator    . :: scope_op        : ::
0905 0151 name        .    name            : expect
0906 0151 block       .  ( paren_open      : (
0907 0151 name        .    name            : TokenType
0908 0151 name        .    name            : type
0909 0151 sp_char     .  , schar           : ,
0910 0151 name        .    dattype         : const
0911 0151 name        .    name            : std
0912 0151 operator    . :: scope_op        : ::
0913 0151 name        .    name            : string
0914 0151 operator    .  & bitwise_op      : &
0915 0151 name        .    name            : value
0916 0151 block       .  ) paren_close     : )
0917 0151 block       .  { brace_open      : {
0918 0152 name        .    dattype         : const
0919 0152 name        .    name            : Token
0920 0152 operator    .  & bitwise_op      : &
0921 0152 name        .    name            : current
0922 0152 operator    .  = assign_op       : =
0923 0152 name        .    name            : currentToken
0924 0152 block       .  ( paren_open      : (
0925 0152 block       .  ) paren_close     : )
0926 0152 sp_char     .  ; schar           : ;
0927 0153 name        .    keyword         : if
0928 0153 block       .  ( paren_open      : (
0929 0153 name        .    name            : current
0930 0153 sp_char     .  . schar           : .
0931 0153 name        .    name            : type
0932 0153 operator    . == relation_op     : ==
0933 0153 name        .    name            : type
0934 0153 operator    . && logic_op        : &&
0935 0153 name        .    name            : current
0936 0153 sp_char     .  . schar           : .
0937 0153 name        .    name            : value
0938 0153 operator    . == relation_op     : ==
0939 0153 name        .    name            : value
0940 0153 block       .  ) paren_close     : )
0941 0153 block       .  { brace_open      : {
0942 0154 name        .    name            : Token
0943 0154 name        .    name            : consumed_token
0944 0154 operator    .  = assign_op       : =
0945 0154 name        .    name            : current
0946 0154 sp_char     .  ; schar           : ;
0947 0155 name        .    name            : advance
0948 0155 block       .  ( paren_open      : (
0949 0155 block       .  ) paren_close     : )
0950 0155 sp_char     .  ; schar           : ;
0951 0156 name        .    keyword         : return
0952 0156 name        .    name            : consumed_token
0953 0156 sp_char     .  ; schar           : ;
0954 0157 block       .  } brace_close     : }
0955 0157 name        .    keyword         : else
0956 0157 block       .  { brace_open      : {
0957 0158 name        .    name            : throw
0958 0158 name        .    name            : std
0959 0158 operator    . :: scope_op        : ::
0960 0158 name        .    name            : runtime_error
0961 0158 block       .  ( paren_open      : (
0962 0158 string      .    undef           : Syntax Error: Expected '
0963 0158 operator    .  + arthmetic_op    : +
0964 0158 name        .    name            : value
0965 0158 operator    .  + arthmetic_op    : +
0966 0158 string      .    undef           : ' (type 
0967 0158 operator    .  + arthmetic_op    : +
0968 0158 name        .    name            : tokenTypeToString
0969 0158 block       .  ( paren_open      : (
0970 0158 name        .    name            : type
0971 0158 block       .  ) paren_close     : )
0972 0158 operator    .  + arthmetic_op    : +
0973 0159 string      .    undef           : ), got 
0974 0159 operator    .  + arthmetic_op    : +
0975 0159 name        .    name            : current
0976 0159 sp_char     .  . schar           : .
0977 0159 name        .    name            : toString
0978 0159 block       .  ( paren_open      : (
0979 0159 block       .  ) paren_close     : )
0980 0159 operator    .  + arthmetic_op    : +
0981 0160 string      .    undef           :  at line 
0982 0160 operator    .  + arthmetic_op    : +
0983 0160 name        .    name            : std
0984 0160 operator    . :: scope_op        : ::
0985 0160 name        .    name            : to_string
0986 0160 block       .  ( paren_open      : (
0987 0160 name        .    name            : current
0988 0160 sp_char     .  . schar           : .
0989 0160 name        .    name            : line
0990 0160 block       .  ) paren_close     : )
0991 0160 operator    .  + arthmetic_op    : +
0992 0161 string      .    undef           : , column 
0993 0161 operator    .  + arthmetic_op    : +
0994 0161 name        .    name            : std
0995 0161 operator    . :: scope_op        : ::
0996 0161 name        .    name            : to_string
0997 0161 block       .  ( paren_open      : (
0998 0161 name        .    name            : current
0999 0161 sp_char     .  . schar           : .
1000 0161 name        .    name            : column
1001 0161 block       .  ) paren_close     : )
1002 0161 block       .  ) paren_close     : )
1003 0161 sp_char     .  ; schar           : ;
1004 0162 block       .  } brace_close     : }
1005 0163 block       .  } brace_close     : }
1006 0165 name        .    name            : Token
1007 0165 name        .    name            : Parser
1008 0165 operator    . :: scope_op        : ::
1009 0165 name        .    name            : expect
1010 0165 block       .  ( paren_open      : (
1011 0165 name        .    name            : TokenSubtype
1012 0165 name        .    name            : type
1013 0165 sp_char     .  , schar           : ,
1014 0165 name        .    dattype         : const
1015 0165 name        .    name            : std
1016 0165 operator    . :: scope_op        : ::
1017 0165 name        .    name            : string
1018 0165 operator    .  & bitwise_op      : &
1019 0165 name        .    name            : value
1020 0165 block       .  ) paren_close     : )
1021 0165 block       .  { brace_open      : {
1022 0166 name        .    dattype         : const
1023 0166 name        .    name            : Token
1024 0166 operator    .  & bitwise_op      : &
1025 0166 name        .    name            : current
1026 0166 operator    .  = assign_op       : =
1027 0166 name        .    name            : currentToken
1028 0166 block       .  ( paren_open      : (
1029 0166 block       .  ) paren_close     : )
1030 0166 sp_char     .  ; schar           : ;
1031 0167 name        .    keyword         : if
1032 0167 block       .  ( paren_open      : (
1033 0167 name        .    name            : current
1034 0167 sp_char     .  . schar           : .
1035 0167 name        .    name            : subtype
1036 0167 operator    . == relation_op     : ==
1037 0167 name        .    name            : type
1038 0167 operator    . && logic_op        : &&
1039 0167 block       .  ( paren_open      : (
1040 0167 name        .    name            : value
1041 0167 operator    . == relation_op     : ==
1042 0167 string      .    undef           : 
1043 0167 operator    . || logic_op        : ||
1044 0167 name        .    name            : current
1045 0167 sp_char     .  . schar           : .
1046 0167 name        .    name            : value
1047 0167 operator    . == relation_op     : ==
1048 0167 name        .    name            : value
1049 0167 block       .  ) paren_close     : )
1050 0167 block       .  ) paren_close     : )
1051 0167 block       .  { brace_open      : {
1052 0168 name        .    name            : Token
1053 0168 name        .    name            : consumed_token
1054 0168 operator    .  = assign_op       : =
1055 0168 name        .    name            : current
1056 0168 sp_char     .  ; schar           : ;
1057 0169 name        .    name            : advance
1058 0169 block       .  ( paren_open      : (
1059 0169 block       .  ) paren_close     : )
1060 0169 sp_char     .  ; schar           : ;
1061 0170 name        .    keyword         : return
1062 0170 name        .    name            : consumed_token
1063 0170 sp_char     .  ; schar           : ;
1064 0171 block       .  } brace_close     : }
1065 0171 name        .    keyword         : else
1066 0171 block       .  { brace_open      : {
1067 0172 name        .    name            : throw
1068 0172 name        .    name            : std
1069 0172 operator    . :: scope_op        : ::
1070 0172 name        .    name            : runtime_error
1071 0172 block       .  ( paren_open      : (
1072 0172 string      .    undef           : Syntax Error: Expected '
1073 0172 operator    .  + arthmetic_op    : +
1074 0172 name        .    name            : value
1075 0172 operator    .  + arthmetic_op    : +
1076 0172 string      .    undef           : ' (type 
1077 0172 operator    .  + arthmetic_op    : +
1078 0172 name        .    name            : tokenTypeToString
1079 0172 block       .  ( paren_open      : (
1080 0172 name        .    name            : current
1081 0172 sp_char     .  . schar           : .
1082 0172 name        .    name            : type
1083 0172 block       .  ) paren_close     : )
1084 0172 operator    .  + arthmetic_op    : +
1085 0173 string      .    undef           : ), got 
1086 0173 operator    .  + arthmetic_op    : +
1087 0173 name        .    name            : current
1088 0173 sp_char     .  . schar           : .
1089 0173 name        .    name            : toString
1090 0173 block       .  ( paren_open      : (
1091 0173 block       .  ) paren_close     : )
1092 0173 operator    .  + arthmetic_op    : +
1093 0174 string      .    undef           :  at line 
1094 0174 operator    .  + arthmetic_op    : +
1095 0174 name        .    name            : std
1096 0174 operator    . :: scope_op        : ::
1097 0174 name        .    name            : to_string
1098 0174 block       .  ( paren_open      : (
1099 0174 name        .    name            : current
1100 0174 sp_char     .  . schar           : .
1101 0174 name        .    name            : line
1102 0174 block       .  ) paren_close     : )
1103 0174 operator    .  + arthmetic_op    : +
1104 0175 string      .    undef           : , column 
1105 0175 operator    .  + arthmetic_op    : +
1106 0175 name        .    name            : std
1107 0175 operator    . :: scope_op        : ::
1108 0175 name        .    name            : to_string
1109 0175 block       .  ( paren_open      : (
1110 0175 name        .    name            : current
1111 0175 sp_char     .  . schar           : .
1112 0175 name        .    name            : column
1113 0175 block       .  ) paren_close     : )
1114 0175 block       .  ) paren_close     : )
1115 0175 sp_char     .  ; schar           : ;
1116 0176 block       .  } brace_close     : }
1117 0177 block       .  } brace_close     : }
1118 0180 name        .    name            : std
1119 0180 operator    . :: scope_op        : ::
1120 0180 name        .    name            : unique_ptr
1121 0180 block       .  < angle_bracket_open : <
1122 0180 name        .    name            : ProgramNode
1123 0180 block       .  > angle_bracket_close : >
1124 0180 name        .    name            : Parser
1125 0180 operator    . :: scope_op        : ::
1126 0180 name        .    name            : parseProgram
1127 0180 block       .  ( paren_open      : (
1128 0180 block       .  ) paren_close     : )
1129 0180 block       .  { brace_open      : {
1130 0181 name        .    keyword         : auto
1131 0181 name        .    name            : program
1132 0181 operator    .  = assign_op       : =
1133 0181 name        .    name            : std
1134 0181 operator    . :: scope_op        : ::
1135 0181 name        .    name            : make_unique
1136 0181 block       .  < angle_bracket_open : <
1137 0181 name        .    name            : ProgramNode
1138 0181 block       .  > angle_bracket_close : >
1139 0181 block       .  ( paren_open      : (
1140 0181 block       .  ) paren_close     : )
1141 0181 sp_char     .  ; schar           : ;
1142 0182 name        .    keyword         : while
1143 0182 block       .  ( paren_open      : (
1144 0182 name        .    name            : currentToken
1145 0182 block       .  ( paren_open      : (
1146 0182 block       .  ) paren_close     : )
1147 0182 sp_char     .  . schar           : .
1148 0182 name        .    name            : type
1149 0182 operator    . != relation_op     : !=
1150 0182 name        .    name            : TokenType
1151 0182 operator    . :: scope_op        : ::
1152 0182 name        .    name            : END_OF_FILE
1153 0182 block       .  ) paren_close     : )
1154 0182 block       .  { brace_open      : {
1155 0183 name        .    name            : program
1156 0183 operator    . -> struct_op       : ->
1157 0183 name        .    name            : statements
1158 0183 sp_char     .  . schar           : .
1159 0183 name        .    name            : push_back
1160 0183 block       .  ( paren_open      : (
1161 0183 name        .    name            : parseStatement
1162 0183 block       .  ( paren_open      : (
1163 0183 block       .  ) paren_close     : )
1164 0183 block       .  ) paren_close     : )
1165 0183 sp_char     .  ; schar           : ;
1166 0184 block       .  } brace_close     : }
1167 0185 name        .    keyword         : return
1168 0185 name        .    name            : program
1169 0185 sp_char     .  ; schar           : ;
1170 0186 block       .  } brace_close     : }
1171 0188 name        .    dattype         : int
1172 0188 name        .    name            : getOperatorPrecedence
1173 0188 block       .  ( paren_open      : (
1174 0188 name        .    dattype         : const
1175 0188 name        .    name            : std
1176 0188 operator    . :: scope_op        : ::
1177 0188 name        .    name            : string
1178 0188 operator    .  & bitwise_op      : &
1179 0188 name        .    name            : op
1180 0188 block       .  ) paren_close     : )
1181 0188 block       .  { brace_open      : {
1182 0189 name        .    keyword         : if
1183 0189 block       .  ( paren_open      : (
1184 0189 name        .    name            : op
1185 0189 operator    . == relation_op     : ==
1186 0189 string      .    undef           : +
1187 0189 operator    . || logic_op        : ||
1188 0189 name        .    name            : op
1189 0189 operator    . == relation_op     : ==
1190 0189 string      .    undef           : -
1191 0189 block       .  ) paren_close     : )
1192 0189 name        .    keyword         : return
1193 0189 number      .    number          : 1
1194 0189 sp_char     .  ; schar           : ;
1195 0190 name        .    keyword         : if
1196 0190 block       .  ( paren_open      : (
1197 0190 name        .    name            : op
1198 0190 operator    . == relation_op     : ==
1199 0190 string      .    undef           : *
1200 0190 operator    . || logic_op        : ||
1201 0190 name        .    name            : op
1202 0190 operator    . == relation_op     : ==
1203 0190 string      .    undef           : /
1204 0190 block       .  ) paren_close     : )
1205 0190 name        .    keyword         : return
1206 0190 number      .    number          : 2
1207 0190 sp_char     .  ; schar           : ;
1208 0191 name        .    keyword         : if
1209 0191 block       .  ( paren_open      : (
1210 0191 name        .    name            : op
1211 0191 operator    . == relation_op     : ==
1212 0191 string      .    undef           : ==
1213 0191 operator    . || logic_op        : ||
1214 0191 name        .    name            : op
1215 0191 operator    . == relation_op     : ==
1216 0191 string      .    undef           : >
1217 0191 operator    . || logic_op        : ||
1218 0191 name        .    name            : op
1219 0191 operator    . == relation_op     : ==
1220 0191 string      .    undef           : <
1221 0191 operator    . || logic_op        : ||
1222 0191 name        .    name            : op
1223 0191 operator    . == relation_op     : ==
1224 0191 string      .    undef           : =
1225 0191 block       .  ) paren_close     : )
1226 0191 name        .    keyword         : return
1227 0191 number      .    number          : 0
1228 0191 sp_char     .  ; schar           : ;
1229 0191 comment     .    comment         : // 할당 연산자 우선순위 추가
1230 0192 name        .    keyword         : return
1231 0192 operator    .  - arthmetic_op    : -
1232 0192 number      .    number          : 1
1233 0192 sp_char     .  ; schar           : ;
1234 0193 block       .  } brace_close     : }
1235 0195 name        .    name            : std
1236 0195 operator    . :: scope_op        : ::
1237 0195 name        .    name            : unique_ptr
1238 0195 block       .  < angle_bracket_open : <
1239 0195 name        .    name            : ASTNode
1240 0195 block       .  > angle_bracket_close : >
1241 0195 name        .    name            : Parser
1242 0195 operator    . :: scope_op        : ::
1243 0195 name        .    name            : parseExpression
1244 0195 block       .  ( paren_open      : (
1245 0195 block       .  ) paren_close     : )
1246 0195 block       .  { brace_open      : {
1247 0196 name        .    keyword         : return
1248 0196 name        .    name            : parseBinaryExpression
1249 0196 block       .  ( paren_open      : (
1250 0196 number      .    number          : 0
1251 0196 block       .  ) paren_close     : )
1252 0196 sp_char     .  ; schar           : ;
1253 0197 block       .  } brace_close     : }
1254 0199 name        .    name            : std
1255 0199 operator    . :: scope_op        : ::
1256 0199 name        .    name            : unique_ptr
1257 0199 block       .  < angle_bracket_open : <
1258 0199 name        .    name            : ASTNode
1259 0199 block       .  > angle_bracket_close : >
1260 0199 name        .    name            : Parser
1261 0199 operator    . :: scope_op        : ::
1262 0199 name        .    name            : parseBinaryExpression
1263 0199 block       .  ( paren_open      : (
1264 0199 name        .    dattype         : int
1265 0199 name        .    name            : precedence
1266 0199 block       .  ) paren_close     : )
1267 0199 block       .  { brace_open      : {
1268 0200 name        .    keyword         : auto
1269 0200 name        .    name            : left
1270 0200 operator    .  = assign_op       : =
1271 0200 name        .    name            : parsePrimaryExpression
1272 0200 block       .  ( paren_open      : (
1273 0200 block       .  ) paren_close     : )
1274 0200 sp_char     .  ; schar           : ;
1275 0202 name        .    keyword         : while
1276 0202 block       .  ( paren_open      : (
1277 0202 name        .    name            : currentToken
1278 0202 block       .  ( paren_open      : (
1279 0202 block       .  ) paren_close     : )
1280 0202 sp_char     .  . schar           : .
1281 0202 name        .    name            : type
1282 0202 operator    . == relation_op     : ==
1283 0202 name        .    name            : TokenType
1284 0202 operator    . :: scope_op        : ::
1285 0202 name        .    name            : OPERATOR
1286 0202 operator    . && logic_op        : &&
1287 0203 name        .    name            : getOperatorPrecedence
1288 0203 block       .  ( paren_open      : (
1289 0203 name        .    name            : currentToken
1290 0203 block       .  ( paren_open      : (
1291 0203 block       .  ) paren_close     : )
1292 0203 sp_char     .  . schar           : .
1293 0203 name        .    name            : value
1294 0203 block       .  ) paren_close     : )
1295 0203 block       .  > angle_bracket_close : >
1296 0203 operator    .  = assign_op       : =
1297 0203 name        .    name            : precedence
1298 0203 block       .  ) paren_close     : )
1299 0203 block       .  { brace_open      : {
1300 0204 name        .    name            : std
1301 0204 operator    . :: scope_op        : ::
1302 0204 name        .    name            : string
1303 0204 name        .    name            : op
1304 0204 operator    .  = assign_op       : =
1305 0204 name        .    name            : expect
1306 0204 block       .  ( paren_open      : (
1307 0204 name        .    name            : TokenType
1308 0204 operator    . :: scope_op        : ::
1309 0204 name        .    name            : OPERATOR
1310 0204 block       .  ) paren_close     : )
1311 0204 sp_char     .  . schar           : .
1312 0204 name        .    name            : value
1313 0204 sp_char     .  ; schar           : ;
1314 0205 name        .    dattype         : int
1315 0205 name        .    name            : next_precedence
1316 0205 operator    .  = assign_op       : =
1317 0205 name        .    name            : getOperatorPrecedence
1318 0205 block       .  ( paren_open      : (
1319 0205 name        .    name            : op
1320 0205 block       .  ) paren_close     : )
1321 0205 sp_char     .  ; schar           : ;
1322 0206 comment     .    comment         : // 왼쪽 결합성 연산자 (대부분의 이진 연산자: +, -, *, /)
1323 0207 comment     .    comment         : // 같은 우선순위의 다음 연산자는 현재 연산자와 같거나 낮은 우선순위로 파싱
1324 0208 name        .    keyword         : auto
1325 0208 name        .    name            : right
1326 0208 operator    .  = assign_op       : =
1327 0208 name        .    name            : parseBinaryExpression
1328 0208 block       .  ( paren_open      : (
1329 0208 name        .    name            : next_precedence
1330 0208 operator    .  + arthmetic_op    : +
1331 0208 number      .    number          : 1
1332 0208 block       .  ) paren_close     : )
1333 0208 sp_char     .  ; schar           : ;
1334 0210 name        .    keyword         : auto
1335 0210 name        .    name            : binary_node
1336 0210 operator    .  = assign_op       : =
1337 0210 name        .    name            : std
1338 0210 operator    . :: scope_op        : ::
1339 0210 name        .    name            : make_unique
1340 0210 block       .  < angle_bracket_open : <
1341 0210 name        .    name            : BinaryExpressionNode
1342 0210 block       .  > angle_bracket_close : >
1343 0210 block       .  ( paren_open      : (
1344 0210 block       .  ) paren_close     : )
1345 0210 sp_char     .  ; schar           : ;
1346 0211 name        .    name            : binary_node
1347 0211 operator    . -> struct_op       : ->
1348 0211 name        .    name            : left
1349 0211 operator    .  = assign_op       : =
1350 0211 name        .    name            : std
1351 0211 operator    . :: scope_op        : ::
1352 0211 name        .    name            : move
1353 0211 block       .  ( paren_open      : (
1354 0211 name        .    name            : left
1355 0211 block       .  ) paren_close     : )
1356 0211 sp_char     .  ; schar           : ;
1357 0212 name        .    name            : binary_node
1358 0212 operator    . -> struct_op       : ->
1359 0212 name        .    name            : op
1360 0212 operator    .  = assign_op       : =
1361 0212 name        .    name            : op
1362 0212 sp_char     .  ; schar           : ;
1363 0213 name        .    name            : binary_node
1364 0213 operator    . -> struct_op       : ->
1365 0213 name        .    name            : right
1366 0213 operator    .  = assign_op       : =
1367 0213 name        .    name            : std
1368 0213 operator    . :: scope_op        : ::
1369 0213 name        .    name            : move
1370 0213 block       .  ( paren_open      : (
1371 0213 name        .    name            : right
1372 0213 block       .  ) paren_close     : )
1373 0213 sp_char     .  ; schar           : ;
1374 0214 name        .    name            : left
1375 0214 operator    .  = assign_op       : =
1376 0214 name        .    name            : std
1377 0214 operator    . :: scope_op        : ::
1378 0214 name        .    name            : move
1379 0214 block       .  ( paren_open      : (
1380 0214 name        .    name            : binary_node
1381 0214 block       .  ) paren_close     : )
1382 0214 sp_char     .  ; schar           : ;
1383 0215 block       .  } brace_close     : }
1384 0216 name        .    keyword         : return
1385 0216 name        .    name            : left
1386 0216 sp_char     .  ; schar           : ;
1387 0217 block       .  } brace_close     : }
1388 0219 name        .    name            : std
1389 0219 operator    . :: scope_op        : ::
1390 0219 name        .    name            : unique_ptr
1391 0219 block       .  < angle_bracket_open : <
1392 0219 name        .    name            : ASTNode
1393 0219 block       .  > angle_bracket_close : >
1394 0219 name        .    name            : Parser
1395 0219 operator    . :: scope_op        : ::
1396 0219 name        .    name            : parsePrimaryExpression
1397 0219 block       .  ( paren_open      : (
1398 0219 block       .  ) paren_close     : )
1399 0219 block       .  { brace_open      : {
1400 0220 name        .    dattype         : const
1401 0220 name        .    name            : Token
1402 0220 operator    .  & bitwise_op      : &
1403 0220 name        .    name            : current
1404 0220 operator    .  = assign_op       : =
1405 0220 name        .    name            : currentToken
1406 0220 block       .  ( paren_open      : (
1407 0220 block       .  ) paren_close     : )
1408 0220 sp_char     .  ; schar           : ;
1409 0221 name        .    keyword         : if
1410 0221 block       .  ( paren_open      : (
1411 0221 name        .    name            : current
1412 0221 sp_char     .  . schar           : .
1413 0221 name        .    name            : type
1414 0221 operator    . == relation_op     : ==
1415 0221 name        .    name            : TokenType
1416 0221 operator    . :: scope_op        : ::
1417 0221 name        .    name            : NUMBER
1418 0221 block       .  ) paren_close     : )
1419 0221 block       .  { brace_open      : {
1420 0222 comment     .    comment         : // NumberLiteralNode의 생성자에 int 인자를 전달
1421 0223 name        .    keyword         : return
1422 0223 name        .    name            : std
1423 0223 operator    . :: scope_op        : ::
1424 0223 name        .    name            : make_unique
1425 0223 block       .  < angle_bracket_open : <
1426 0223 name        .    name            : NumberLiteralNode
1427 0223 block       .  > angle_bracket_close : >
1428 0223 block       .  ( paren_open      : (
1429 0223 name        .    name            : std
1430 0223 operator    . :: scope_op        : ::
1431 0223 name        .    name            : stoi
1432 0223 block       .  ( paren_open      : (
1433 0223 name        .    name            : expect
1434 0223 block       .  ( paren_open      : (
1435 0223 name        .    name            : TokenType
1436 0223 operator    . :: scope_op        : ::
1437 0223 name        .    name            : NUMBER
1438 0223 block       .  ) paren_close     : )
1439 0223 sp_char     .  . schar           : .
1440 0223 name        .    name            : value
1441 0223 block       .  ) paren_close     : )
1442 0223 block       .  ) paren_close     : )
1443 0223 sp_char     .  ; schar           : ;
1444 0224 block       .  } brace_close     : }
1445 0224 name        .    keyword         : else
1446 0224 name        .    keyword         : if
1447 0224 block       .  ( paren_open      : (
1448 0224 name        .    name            : current
1449 0224 sp_char     .  . schar           : .
1450 0224 name        .    name            : subtype
1451 0224 operator    . == relation_op     : ==
1452 0224 name        .    name            : TokenSubtype
1453 0224 operator    . :: scope_op        : ::
1454 0224 name        .    name            : IDENTIFIER
1455 0224 block       .  ) paren_close     : )
1456 0224 block       .  { brace_open      : {
1457 0225 comment     .    comment         : // IdentifierNode의 생성자에 std::string 인자를 전달
1458 0226 name        .    keyword         : return
1459 0226 name        .    name            : std
1460 0226 operator    . :: scope_op        : ::
1461 0226 name        .    name            : make_unique
1462 0226 block       .  < angle_bracket_open : <
1463 0226 name        .    name            : IdentifierNode
1464 0226 block       .  > angle_bracket_close : >
1465 0226 block       .  ( paren_open      : (
1466 0226 name        .    name            : expect
1467 0226 block       .  ( paren_open      : (
1468 0226 name        .    name            : TokenSubtype
1469 0226 operator    . :: scope_op        : ::
1470 0226 name        .    name            : IDENTIFIER
1471 0226 block       .  ) paren_close     : )
1472 0226 sp_char     .  . schar           : .
1473 0226 name        .    name            : value
1474 0226 block       .  ) paren_close     : )
1475 0226 sp_char     .  ; schar           : ;
1476 0227 block       .  } brace_close     : }
1477 0227 name        .    keyword         : else
1478 0227 name        .    keyword         : if
1479 0227 block       .  ( paren_open      : (
1480 0227 name        .    name            : current
1481 0227 sp_char     .  . schar           : .
1482 0227 name        .    name            : subtype
1483 0227 operator    . == relation_op     : ==
1484 0227 name        .    name            : TokenSubtype
1485 0227 operator    . :: scope_op        : ::
1486 0227 name        .    name            : PAREN_OPEN
1487 0227 block       .  ) paren_close     : )
1488 0227 block       .  { brace_open      : {
1489 0228 name        .    name            : expect
1490 0228 block       .  ( paren_open      : (
1491 0228 name        .    name            : TokenSubtype
1492 0228 operator    . :: scope_op        : ::
1493 0228 name        .    name            : PAREN_OPEN
1494 0228 block       .  ) paren_close     : )
1495 0228 sp_char     .  ; schar           : ;
1496 0229 name        .    keyword         : auto
1497 0229 name        .    name            : expr
1498 0229 operator    .  = assign_op       : =
1499 0229 name        .    name            : parseExpression
1500 0229 block       .  ( paren_open      : (
1501 0229 block       .  ) paren_close     : )
1502 0229 sp_char     .  ; schar           : ;
1503 0230 name        .    name            : expect
1504 0230 block       .  ( paren_open      : (
1505 0230 name        .    name            : TokenSubtype
1506 0230 operator    . :: scope_op        : ::
1507 0230 name        .    name            : PAREN_CLOSE
1508 0230 block       .  ) paren_close     : )
1509 0230 sp_char     .  ; schar           : ;
1510 0231 name        .    keyword         : return
1511 0231 name        .    name            : expr
1512 0231 sp_char     .  ; schar           : ;
1513 0232 block       .  } brace_close     : }
1514 0232 name        .    keyword         : else
1515 0232 name        .    keyword         : if
1516 0232 block       .  ( paren_open      : (
1517 0232 name        .    name            : current
1518 0232 sp_char     .  . schar           : .
1519 0232 name        .    name            : subtype
1520 0232 operator    . == relation_op     : ==
1521 0232 name        .    name            : TokenSubtype
1522 0232 operator    . :: scope_op        : ::
1523 0232 name        .    name            : STRING_LITERAL
1524 0232 block       .  ) paren_close     : )
1525 0232 block       .  { brace_open      : {
1526 0232 comment     .    comment         : // 문자열 리터럴 추가
1527 0233 comment     .    comment         : // StringLiteralNode 정의 필요. 여기서는 임시로 IdentifierNode 사용
1528 0234 name        .    keyword         : return
1529 0234 name        .    name            : std
1530 0234 operator    . :: scope_op        : ::
1531 0234 name        .    name            : make_unique
1532 0234 block       .  < angle_bracket_open : <
1533 0234 name        .    name            : IdentifierNode
1534 0234 block       .  > angle_bracket_close : >
1535 0234 block       .  ( paren_open      : (
1536 0234 name        .    name            : expect
1537 0234 block       .  ( paren_open      : (
1538 0234 name        .    name            : TokenSubtype
1539 0234 operator    . :: scope_op        : ::
1540 0234 name        .    name            : STRING_LITERAL
1541 0234 block       .  ) paren_close     : )
1542 0234 sp_char     .  . schar           : .
1543 0234 name        .    name            : value
1544 0234 block       .  ) paren_close     : )
1545 0234 sp_char     .  ; schar           : ;
1546 0234 comment     .    comment         : // TODO: StringLiteralNode로 변경
1547 0235 block       .  } brace_close     : }
1548 0236 comment     .    comment         : // TODO: 함수 호출 등 추가
1549 0238 name        .    name            : throw
1550 0238 name        .    name            : std
1551 0238 operator    . :: scope_op        : ::
1552 0238 name        .    name            : runtime_error
1553 0238 block       .  ( paren_open      : (
1554 0238 string      .    undef           : Syntax Error: Unexpected token in primary expression: 
1555 0238 operator    .  + arthmetic_op    : +
1556 0238 name        .    name            : current
1557 0238 sp_char     .  . schar           : .
1558 0238 name        .    name            : toString
1559 0238 block       .  ( paren_open      : (
1560 0238 block       .  ) paren_close     : )
1561 0238 block       .  ) paren_close     : )
1562 0238 sp_char     .  ; schar           : ;
1563 0239 block       .  } brace_close     : }
1564 0241 comment     .    comment         : // ... (getOperatorPrecedence, parseExpression, parseBinaryExpression, parsePrimaryExpression 함수는 동일) ...
1565 0243 block       .  } brace_close     : }
1566 0243 comment     .    comment         : // namespace MyLang
1567 0244 endoffile   .    undef           : 
=======================================================
file size=9209, lines=244, tokens=1568
=======================================================
