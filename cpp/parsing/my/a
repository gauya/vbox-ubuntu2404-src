0000 0001 comment     .  # line_comment    : #include <iostream>  // std::cerr, std::cout 등
0001 0002 comment     .  # line_comment    : #include <fstream>   // std::ifstream
0002 0003 comment     .  # line_comment    : #include <string>    // std::string
0003 0004 comment     .  # line_comment    : #include <sstream>   // std::stringstream
0004 0005 comment     .  # line_comment    : #include <format>
0005 0006 comment     .  # line_comment    : #include <string.h>
0006 0007 comment     .  # line_comment    : #include "lexer.h"
set_subtype [namespace] 4:dattype
0007 0009 name        .    dattype         : namespace
set_subtype [MyLang] 1:name
0008 0009 name        .    name            : MyLang
set_subtype [{] 35:brace_open
0009 0009 block       .  { brace_open      : {
0010 0011 comment     .  # line_comment    : #define __C__      1
0011 0012 comment     .  # line_comment    : #define __PYTHON__ 2
0012 0013 comment     .  # line_comment    : #define __BASH__   3
0013 0014 comment     .  # line_comment    : #define __SQL__    4
0014 0015 comment     .  # line_comment    : #define __CPP__    5
0015 0017 comment     .  # line_comment    : #define LANGMODE  __CPP__
0016 0019 comment     .  # line_comment    : #ifndef LANGMODE
set_subtype [const] 4:dattype
0017 0020 name        .    dattype         : const
set_subtype [std] 1:name
0018 0020 name        .    name            : std
0019 0020 operator    . :: scope_op        : ::
set_subtype [map] 1:name
0020 0020 name        .    name            : map
set_subtype [<] 39:angle_bracket_open
0021 0020 block       .  < angle_bracket_open : <
set_subtype [TokenType] 1:name
0022 0020 name        .    name            : TokenType
set_subtype [,] 27:schar
0023 0020 sp_char     .  , schar           : ,
set_subtype [std] 1:name
0024 0020 name        .    name            : std
0025 0020 operator    . :: scope_op        : ::
set_subtype [string] 1:name
0026 0020 name        .    name            : string
set_subtype [>] 40:angle_bracket_close
0027 0020 block       .  > angle_bracket_close : >
set_subtype [Lexer] 1:name
0028 0020 name        .    name            : Lexer
0029 0020 operator    . :: scope_op        : ::
set_subtype [tokentype_names] 1:name
0030 0020 name        .    name            : tokentype_names
0031 0020 operator    .  = assign_op       : =
set_subtype [{] 35:brace_open
0032 0020 block       .  { brace_open      : {
set_subtype [{] 35:brace_open
0033 0021 block       .  { brace_open      : {
set_subtype [TokenType] 1:name
0034 0021 name        .    name            : TokenType
0035 0021 operator    . :: scope_op        : ::
set_subtype [UNDEF] 1:name
0036 0021 name        .    name            : UNDEF
set_subtype [,] 27:schar
0037 0021 sp_char     .  , schar           : ,
set_subtype [undef] 0:undef
0038 0021 string      .    undef           : undef
set_subtype [}] 36:brace_close
0039 0021 block       .  } brace_close     : }
set_subtype [,] 27:schar
0040 0021 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0041 0022 block       .  { brace_open      : {
set_subtype [TokenType] 1:name
0042 0022 name        .    name            : TokenType
0043 0022 operator    . :: scope_op        : ::
set_subtype [NAME] 1:name
0044 0022 name        .    name            : NAME
set_subtype [,] 27:schar
0045 0022 sp_char     .  , schar           : ,
set_subtype [name] 0:undef
0046 0022 string      .    undef           : name
set_subtype [}] 36:brace_close
0047 0022 block       .  } brace_close     : }
set_subtype [,] 27:schar
0048 0022 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0049 0023 block       .  { brace_open      : {
set_subtype [TokenType] 1:name
0050 0023 name        .    name            : TokenType
0051 0023 operator    . :: scope_op        : ::
set_subtype [CONST] 1:name
0052 0023 name        .    name            : CONST
set_subtype [,] 27:schar
0053 0023 sp_char     .  , schar           : ,
set_subtype [string] 0:undef
0054 0023 string      .    undef           : string
set_subtype [}] 36:brace_close
0055 0023 block       .  } brace_close     : }
set_subtype [,] 27:schar
0056 0023 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0057 0024 block       .  { brace_open      : {
set_subtype [TokenType] 1:name
0058 0024 name        .    name            : TokenType
0059 0024 operator    . :: scope_op        : ::
set_subtype [NUMBER] 1:name
0060 0024 name        .    name            : NUMBER
set_subtype [,] 27:schar
0061 0024 sp_char     .  , schar           : ,
set_subtype [number] 0:undef
0062 0024 string      .    undef           : number
set_subtype [}] 36:brace_close
0063 0024 block       .  } brace_close     : }
set_subtype [,] 27:schar
0064 0024 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0065 0025 block       .  { brace_open      : {
set_subtype [TokenType] 1:name
0066 0025 name        .    name            : TokenType
0067 0025 operator    . :: scope_op        : ::
set_subtype [OPERATOR] 1:name
0068 0025 name        .    name            : OPERATOR
set_subtype [,] 27:schar
0069 0025 sp_char     .  , schar           : ,
set_subtype [operator] 0:undef
0070 0025 string      .    undef           : operator
set_subtype [}] 36:brace_close
0071 0025 block       .  } brace_close     : }
set_subtype [,] 27:schar
0072 0025 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0073 0026 block       .  { brace_open      : {
set_subtype [TokenType] 1:name
0074 0026 name        .    name            : TokenType
0075 0026 operator    . :: scope_op        : ::
set_subtype [SCHAR] 1:name
0076 0026 name        .    name            : SCHAR
set_subtype [,] 27:schar
0077 0026 sp_char     .  , schar           : ,
set_subtype [sp_char] 0:undef
0078 0026 string      .    undef           : sp_char
set_subtype [}] 36:brace_close
0079 0026 block       .  } brace_close     : }
set_subtype [,] 27:schar
0080 0026 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0081 0027 block       .  { brace_open      : {
set_subtype [TokenType] 1:name
0082 0027 name        .    name            : TokenType
0083 0027 operator    . :: scope_op        : ::
set_subtype [COMMENT] 1:name
0084 0027 name        .    name            : COMMENT
set_subtype [,] 27:schar
0085 0027 sp_char     .  , schar           : ,
set_subtype [comment] 0:undef
0086 0027 string      .    undef           : comment
set_subtype [}] 36:brace_close
0087 0027 block       .  } brace_close     : }
set_subtype [,] 27:schar
0088 0027 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0089 0028 block       .  { brace_open      : {
set_subtype [TokenType] 1:name
0090 0028 name        .    name            : TokenType
0091 0028 operator    . :: scope_op        : ::
set_subtype [SPACE] 1:name
0092 0028 name        .    name            : SPACE
set_subtype [,] 27:schar
0093 0028 sp_char     .  , schar           : ,
set_subtype [space] 0:undef
0094 0028 string      .    undef           : space
set_subtype [}] 36:brace_close
0095 0028 block       .  } brace_close     : }
set_subtype [,] 27:schar
0096 0028 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0097 0029 block       .  { brace_open      : {
set_subtype [TokenType] 1:name
0098 0029 name        .    name            : TokenType
0099 0029 operator    . :: scope_op        : ::
set_subtype [BLOCK] 1:name
0100 0029 name        .    name            : BLOCK
set_subtype [,] 27:schar
0101 0029 sp_char     .  , schar           : ,
set_subtype [block] 0:undef
0102 0029 string      .    undef           : block
set_subtype [}] 36:brace_close
0103 0029 block       .  } brace_close     : }
set_subtype [,] 27:schar
0104 0029 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0105 0030 block       .  { brace_open      : {
set_subtype [TokenType] 1:name
0106 0030 name        .    name            : TokenType
0107 0030 operator    . :: scope_op        : ::
set_subtype [END_OF_FILE] 1:name
0108 0030 name        .    name            : END_OF_FILE
set_subtype [,] 27:schar
0109 0030 sp_char     .  , schar           : ,
set_subtype [endoffile] 0:undef
0110 0030 string      .    undef           : endoffile
set_subtype [}] 36:brace_close
0111 0030 block       .  } brace_close     : }
set_subtype [}] 36:brace_close
0112 0031 block       .  } brace_close     : }
set_subtype [;] 27:schar
0113 0031 sp_char     .  ; schar           : ;
0114 0033 comment     . // line_comment    : // Lexer 클래스 멤버 변수 초기화
set_subtype [const] 4:dattype
0115 0034 name        .    dattype         : const
set_subtype [std] 1:name
0116 0034 name        .    name            : std
0117 0034 operator    . :: scope_op        : ::
set_subtype [unordered_map] 1:name
0118 0034 name        .    name            : unordered_map
set_subtype [<] 39:angle_bracket_open
0119 0034 block       .  < angle_bracket_open : <
set_subtype [std] 1:name
0120 0034 name        .    name            : std
0121 0034 operator    . :: scope_op        : ::
set_subtype [string] 1:name
0122 0034 name        .    name            : string
set_subtype [,] 27:schar
0123 0034 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0124 0034 name        .    name            : TokenSubtype
set_subtype [>] 40:angle_bracket_close
0125 0034 block       .  > angle_bracket_close : >
set_subtype [Lexer] 1:name
0126 0034 name        .    name            : Lexer
0127 0034 operator    . :: scope_op        : ::
set_subtype [keywords] 1:name
0128 0034 name        .    name            : keywords
0129 0034 operator    .  = assign_op       : =
set_subtype [{] 35:brace_open
0130 0034 block       .  { brace_open      : {
set_subtype [{] 35:brace_open
0131 0035 block       .  { brace_open      : {
set_subtype [if] 0:undef
0132 0035 string      .    undef           : if
set_subtype [,] 27:schar
0133 0035 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0134 0035 name        .    name            : TokenSubtype
0135 0035 operator    . :: scope_op        : ::
set_subtype [KEYWORD] 1:name
0136 0035 name        .    name            : KEYWORD
set_subtype [}] 36:brace_close
0137 0035 block       .  } brace_close     : }
set_subtype [,] 27:schar
0138 0035 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0139 0036 block       .  { brace_open      : {
set_subtype [else] 0:undef
0140 0036 string      .    undef           : else
set_subtype [,] 27:schar
0141 0036 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0142 0036 name        .    name            : TokenSubtype
0143 0036 operator    . :: scope_op        : ::
set_subtype [KEYWORD] 1:name
0144 0036 name        .    name            : KEYWORD
set_subtype [}] 36:brace_close
0145 0036 block       .  } brace_close     : }
set_subtype [,] 27:schar
0146 0036 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0147 0037 block       .  { brace_open      : {
set_subtype [do] 0:undef
0148 0037 string      .    undef           : do
set_subtype [,] 27:schar
0149 0037 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0150 0037 name        .    name            : TokenSubtype
0151 0037 operator    . :: scope_op        : ::
set_subtype [KEYWORD] 1:name
0152 0037 name        .    name            : KEYWORD
set_subtype [}] 36:brace_close
0153 0037 block       .  } brace_close     : }
set_subtype [,] 27:schar
0154 0037 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0155 0038 block       .  { brace_open      : {
set_subtype [while] 0:undef
0156 0038 string      .    undef           : while
set_subtype [,] 27:schar
0157 0038 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0158 0038 name        .    name            : TokenSubtype
0159 0038 operator    . :: scope_op        : ::
set_subtype [KEYWORD] 1:name
0160 0038 name        .    name            : KEYWORD
set_subtype [}] 36:brace_close
0161 0038 block       .  } brace_close     : }
set_subtype [,] 27:schar
0162 0038 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0163 0039 block       .  { brace_open      : {
set_subtype [for] 0:undef
0164 0039 string      .    undef           : for
set_subtype [,] 27:schar
0165 0039 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0166 0039 name        .    name            : TokenSubtype
0167 0039 operator    . :: scope_op        : ::
set_subtype [KEYWORD] 1:name
0168 0039 name        .    name            : KEYWORD
set_subtype [}] 36:brace_close
0169 0039 block       .  } brace_close     : }
set_subtype [,] 27:schar
0170 0039 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0171 0040 block       .  { brace_open      : {
set_subtype [switch] 0:undef
0172 0040 string      .    undef           : switch
set_subtype [,] 27:schar
0173 0040 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0174 0040 name        .    name            : TokenSubtype
0175 0040 operator    . :: scope_op        : ::
set_subtype [KEYWORD] 1:name
0176 0040 name        .    name            : KEYWORD
set_subtype [}] 36:brace_close
0177 0040 block       .  } brace_close     : }
set_subtype [,] 27:schar
0178 0040 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0179 0041 block       .  { brace_open      : {
set_subtype [case] 0:undef
0180 0041 string      .    undef           : case
set_subtype [,] 27:schar
0181 0041 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0182 0041 name        .    name            : TokenSubtype
0183 0041 operator    . :: scope_op        : ::
set_subtype [KEYWORD] 1:name
0184 0041 name        .    name            : KEYWORD
set_subtype [}] 36:brace_close
0185 0041 block       .  } brace_close     : }
set_subtype [,] 27:schar
0186 0041 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0187 0042 block       .  { brace_open      : {
set_subtype [break] 0:undef
0188 0042 string      .    undef           : break
set_subtype [,] 27:schar
0189 0042 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0190 0042 name        .    name            : TokenSubtype
0191 0042 operator    . :: scope_op        : ::
set_subtype [KEYWORD] 1:name
0192 0042 name        .    name            : KEYWORD
set_subtype [}] 36:brace_close
0193 0042 block       .  } brace_close     : }
set_subtype [,] 27:schar
0194 0042 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0195 0043 block       .  { brace_open      : {
set_subtype [default] 0:undef
0196 0043 string      .    undef           : default
set_subtype [,] 27:schar
0197 0043 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0198 0043 name        .    name            : TokenSubtype
0199 0043 operator    . :: scope_op        : ::
set_subtype [KEYWORD] 1:name
0200 0043 name        .    name            : KEYWORD
set_subtype [}] 36:brace_close
0201 0043 block       .  } brace_close     : }
set_subtype [,] 27:schar
0202 0043 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0203 0044 block       .  { brace_open      : {
set_subtype [auto] 0:undef
0204 0044 string      .    undef           : auto
set_subtype [,] 27:schar
0205 0044 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0206 0044 name        .    name            : TokenSubtype
0207 0044 operator    . :: scope_op        : ::
set_subtype [KEYWORD] 1:name
0208 0044 name        .    name            : KEYWORD
set_subtype [}] 36:brace_close
0209 0044 block       .  } brace_close     : }
set_subtype [,] 27:schar
0210 0044 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0211 0045 block       .  { brace_open      : {
set_subtype [def] 0:undef
0212 0045 string      .    undef           : def
set_subtype [,] 27:schar
0213 0045 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0214 0045 name        .    name            : TokenSubtype
0215 0045 operator    . :: scope_op        : ::
set_subtype [KEYWORD] 1:name
0216 0045 name        .    name            : KEYWORD
set_subtype [}] 36:brace_close
0217 0045 block       .  } brace_close     : }
set_subtype [,] 27:schar
0218 0045 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0219 0046 block       .  { brace_open      : {
set_subtype [try] 0:undef
0220 0046 string      .    undef           : try
set_subtype [,] 27:schar
0221 0046 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0222 0046 name        .    name            : TokenSubtype
0223 0046 operator    . :: scope_op        : ::
set_subtype [KEYWORD] 1:name
0224 0046 name        .    name            : KEYWORD
set_subtype [}] 36:brace_close
0225 0046 block       .  } brace_close     : }
set_subtype [,] 27:schar
0226 0046 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0227 0047 block       .  { brace_open      : {
set_subtype [catch] 0:undef
0228 0047 string      .    undef           : catch
set_subtype [,] 27:schar
0229 0047 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0230 0047 name        .    name            : TokenSubtype
0231 0047 operator    . :: scope_op        : ::
set_subtype [KEYWORD] 1:name
0232 0047 name        .    name            : KEYWORD
set_subtype [}] 36:brace_close
0233 0047 block       .  } brace_close     : }
set_subtype [,] 27:schar
0234 0047 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0235 0048 block       .  { brace_open      : {
set_subtype [throw] 0:undef
0236 0048 string      .    undef           : throw
set_subtype [,] 27:schar
0237 0048 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0238 0048 name        .    name            : TokenSubtype
0239 0048 operator    . :: scope_op        : ::
set_subtype [KEYWORD] 1:name
0240 0048 name        .    name            : KEYWORD
set_subtype [}] 36:brace_close
0241 0048 block       .  } brace_close     : }
set_subtype [,] 27:schar
0242 0048 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0243 0049 block       .  { brace_open      : {
set_subtype [function] 0:undef
0244 0049 string      .    undef           : function
set_subtype [,] 27:schar
0245 0049 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0246 0049 name        .    name            : TokenSubtype
0247 0049 operator    . :: scope_op        : ::
set_subtype [KEYWORD] 1:name
0248 0049 name        .    name            : KEYWORD
set_subtype [}] 36:brace_close
0249 0049 block       .  } brace_close     : }
set_subtype [,] 27:schar
0250 0049 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0251 0051 block       .  { brace_open      : {
set_subtype [include] 0:undef
0252 0051 string      .    undef           : include
set_subtype [,] 27:schar
0253 0051 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0254 0051 name        .    name            : TokenSubtype
0255 0051 operator    . :: scope_op        : ::
set_subtype [PREKEY] 1:name
0256 0051 name        .    name            : PREKEY
set_subtype [}] 36:brace_close
0257 0051 block       .  } brace_close     : }
set_subtype [,] 27:schar
0258 0051 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0259 0052 block       .  { brace_open      : {
set_subtype [define] 0:undef
0260 0052 string      .    undef           : define
set_subtype [,] 27:schar
0261 0052 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0262 0052 name        .    name            : TokenSubtype
0263 0052 operator    . :: scope_op        : ::
set_subtype [PREKEY] 1:name
0264 0052 name        .    name            : PREKEY
set_subtype [}] 36:brace_close
0265 0052 block       .  } brace_close     : }
set_subtype [,] 27:schar
0266 0052 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0267 0053 block       .  { brace_open      : {
set_subtype [undef] 0:undef
0268 0053 string      .    undef           : undef
set_subtype [,] 27:schar
0269 0053 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0270 0053 name        .    name            : TokenSubtype
0271 0053 operator    . :: scope_op        : ::
set_subtype [PREKEY] 1:name
0272 0053 name        .    name            : PREKEY
set_subtype [}] 36:brace_close
0273 0053 block       .  } brace_close     : }
set_subtype [,] 27:schar
0274 0053 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0275 0054 block       .  { brace_open      : {
set_subtype [ifdef] 0:undef
0276 0054 string      .    undef           : ifdef
set_subtype [,] 27:schar
0277 0054 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0278 0054 name        .    name            : TokenSubtype
0279 0054 operator    . :: scope_op        : ::
set_subtype [PREKEY] 1:name
0280 0054 name        .    name            : PREKEY
set_subtype [}] 36:brace_close
0281 0054 block       .  } brace_close     : }
set_subtype [,] 27:schar
0282 0054 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0283 0055 block       .  { brace_open      : {
set_subtype [endif] 0:undef
0284 0055 string      .    undef           : endif
set_subtype [,] 27:schar
0285 0055 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0286 0055 name        .    name            : TokenSubtype
0287 0055 operator    . :: scope_op        : ::
set_subtype [PREKEY] 1:name
0288 0055 name        .    name            : PREKEY
set_subtype [}] 36:brace_close
0289 0055 block       .  } brace_close     : }
set_subtype [,] 27:schar
0290 0055 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0291 0057 block       .  { brace_open      : {
set_subtype [void] 0:undef
0292 0057 string      .    undef           : void
set_subtype [,] 27:schar
0293 0057 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0294 0057 name        .    name            : TokenSubtype
0295 0057 operator    . :: scope_op        : ::
set_subtype [DATTYPE] 1:name
0296 0057 name        .    name            : DATTYPE
set_subtype [}] 36:brace_close
0297 0057 block       .  } brace_close     : }
set_subtype [,] 27:schar
0298 0057 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0299 0058 block       .  { brace_open      : {
set_subtype [char] 0:undef
0300 0058 string      .    undef           : char
set_subtype [,] 27:schar
0301 0058 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0302 0058 name        .    name            : TokenSubtype
0303 0058 operator    . :: scope_op        : ::
set_subtype [DATTYPE] 1:name
0304 0058 name        .    name            : DATTYPE
set_subtype [}] 36:brace_close
0305 0058 block       .  } brace_close     : }
set_subtype [,] 27:schar
0306 0058 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0307 0059 block       .  { brace_open      : {
set_subtype [unsigned] 0:undef
0308 0059 string      .    undef           : unsigned
set_subtype [,] 27:schar
0309 0059 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0310 0059 name        .    name            : TokenSubtype
0311 0059 operator    . :: scope_op        : ::
set_subtype [DATTYPE] 1:name
0312 0059 name        .    name            : DATTYPE
set_subtype [}] 36:brace_close
0313 0059 block       .  } brace_close     : }
set_subtype [,] 27:schar
0314 0059 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0315 0060 block       .  { brace_open      : {
set_subtype [int] 0:undef
0316 0060 string      .    undef           : int
set_subtype [,] 27:schar
0317 0060 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0318 0060 name        .    name            : TokenSubtype
0319 0060 operator    . :: scope_op        : ::
set_subtype [DATTYPE] 1:name
0320 0060 name        .    name            : DATTYPE
set_subtype [}] 36:brace_close
0321 0060 block       .  } brace_close     : }
set_subtype [,] 27:schar
0322 0060 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0323 0061 block       .  { brace_open      : {
set_subtype [long] 0:undef
0324 0061 string      .    undef           : long
set_subtype [,] 27:schar
0325 0061 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0326 0061 name        .    name            : TokenSubtype
0327 0061 operator    . :: scope_op        : ::
set_subtype [DATTYPE] 1:name
0328 0061 name        .    name            : DATTYPE
set_subtype [}] 36:brace_close
0329 0061 block       .  } brace_close     : }
set_subtype [,] 27:schar
0330 0061 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0331 0062 block       .  { brace_open      : {
set_subtype [float] 0:undef
0332 0062 string      .    undef           : float
set_subtype [,] 27:schar
0333 0062 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0334 0062 name        .    name            : TokenSubtype
0335 0062 operator    . :: scope_op        : ::
set_subtype [DATTYPE] 1:name
0336 0062 name        .    name            : DATTYPE
set_subtype [}] 36:brace_close
0337 0062 block       .  } brace_close     : }
set_subtype [,] 27:schar
0338 0062 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0339 0063 block       .  { brace_open      : {
set_subtype [double] 0:undef
0340 0063 string      .    undef           : double
set_subtype [,] 27:schar
0341 0063 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0342 0063 name        .    name            : TokenSubtype
0343 0063 operator    . :: scope_op        : ::
set_subtype [DATTYPE] 1:name
0344 0063 name        .    name            : DATTYPE
set_subtype [}] 36:brace_close
0345 0063 block       .  } brace_close     : }
set_subtype [,] 27:schar
0346 0063 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0347 0064 block       .  { brace_open      : {
set_subtype [bool] 0:undef
0348 0064 string      .    undef           : bool
set_subtype [,] 27:schar
0349 0064 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0350 0064 name        .    name            : TokenSubtype
0351 0064 operator    . :: scope_op        : ::
set_subtype [DATTYPE] 1:name
0352 0064 name        .    name            : DATTYPE
set_subtype [}] 36:brace_close
0353 0064 block       .  } brace_close     : }
set_subtype [,] 27:schar
0354 0064 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0355 0066 block       .  { brace_open      : {
set_subtype [true] 0:undef
0356 0066 string      .    undef           : true
set_subtype [,] 27:schar
0357 0066 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0358 0066 name        .    name            : TokenSubtype
0359 0066 operator    . :: scope_op        : ::
set_subtype [DATTYPE] 1:name
0360 0066 name        .    name            : DATTYPE
set_subtype [}] 36:brace_close
0361 0066 block       .  } brace_close     : }
set_subtype [,] 27:schar
0362 0066 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0363 0067 block       .  { brace_open      : {
set_subtype [false] 0:undef
0364 0067 string      .    undef           : false
set_subtype [,] 27:schar
0365 0067 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0366 0067 name        .    name            : TokenSubtype
0367 0067 operator    . :: scope_op        : ::
set_subtype [DATTYPE] 1:name
0368 0067 name        .    name            : DATTYPE
set_subtype [}] 36:brace_close
0369 0067 block       .  } brace_close     : }
set_subtype [,] 27:schar
0370 0067 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0371 0069 block       .  { brace_open      : {
set_subtype [struct] 0:undef
0372 0069 string      .    undef           : struct
set_subtype [,] 27:schar
0373 0069 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0374 0069 name        .    name            : TokenSubtype
0375 0069 operator    . :: scope_op        : ::
set_subtype [DATTYPE] 1:name
0376 0069 name        .    name            : DATTYPE
set_subtype [}] 36:brace_close
0377 0069 block       .  } brace_close     : }
set_subtype [,] 27:schar
0378 0069 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0379 0070 block       .  { brace_open      : {
set_subtype [class] 0:undef
0380 0070 string      .    undef           : class
set_subtype [,] 27:schar
0381 0070 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0382 0070 name        .    name            : TokenSubtype
0383 0070 operator    . :: scope_op        : ::
set_subtype [DATTYPE] 1:name
0384 0070 name        .    name            : DATTYPE
set_subtype [}] 36:brace_close
0385 0070 block       .  } brace_close     : }
set_subtype [,] 27:schar
0386 0070 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0387 0071 block       .  { brace_open      : {
set_subtype [enum] 0:undef
0388 0071 string      .    undef           : enum
set_subtype [,] 27:schar
0389 0071 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0390 0071 name        .    name            : TokenSubtype
0391 0071 operator    . :: scope_op        : ::
set_subtype [DATTYPE] 1:name
0392 0071 name        .    name            : DATTYPE
set_subtype [}] 36:brace_close
0393 0071 block       .  } brace_close     : }
set_subtype [,] 27:schar
0394 0071 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0395 0072 block       .  { brace_open      : {
set_subtype [typedef] 0:undef
0396 0072 string      .    undef           : typedef
set_subtype [,] 27:schar
0397 0072 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0398 0072 name        .    name            : TokenSubtype
0399 0072 operator    . :: scope_op        : ::
set_subtype [DATTYPE] 1:name
0400 0072 name        .    name            : DATTYPE
set_subtype [}] 36:brace_close
0401 0072 block       .  } brace_close     : }
set_subtype [,] 27:schar
0402 0072 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0403 0074 block       .  { brace_open      : {
set_subtype [const] 0:undef
0404 0074 string      .    undef           : const
set_subtype [,] 27:schar
0405 0074 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0406 0074 name        .    name            : TokenSubtype
0407 0074 operator    . :: scope_op        : ::
set_subtype [DATTYPE] 1:name
0408 0074 name        .    name            : DATTYPE
set_subtype [}] 36:brace_close
0409 0074 block       .  } brace_close     : }
set_subtype [,] 27:schar
0410 0074 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0411 0075 block       .  { brace_open      : {
set_subtype [static] 0:undef
0412 0075 string      .    undef           : static
set_subtype [,] 27:schar
0413 0075 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0414 0075 name        .    name            : TokenSubtype
0415 0075 operator    . :: scope_op        : ::
set_subtype [DATTYPE] 1:name
0416 0075 name        .    name            : DATTYPE
set_subtype [}] 36:brace_close
0417 0075 block       .  } brace_close     : }
set_subtype [,] 27:schar
0418 0075 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0419 0076 block       .  { brace_open      : {
set_subtype [namespace] 0:undef
0420 0076 string      .    undef           : namespace
set_subtype [,] 27:schar
0421 0076 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0422 0076 name        .    name            : TokenSubtype
0423 0076 operator    . :: scope_op        : ::
set_subtype [DATTYPE] 1:name
0424 0076 name        .    name            : DATTYPE
set_subtype [}] 36:brace_close
0425 0076 block       .  } brace_close     : }
set_subtype [,] 27:schar
0426 0076 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0427 0077 block       .  { brace_open      : {
set_subtype [extern] 0:undef
0428 0077 string      .    undef           : extern
set_subtype [,] 27:schar
0429 0077 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0430 0077 name        .    name            : TokenSubtype
0431 0077 operator    . :: scope_op        : ::
set_subtype [DATTYPE] 1:name
0432 0077 name        .    name            : DATTYPE
set_subtype [}] 36:brace_close
0433 0077 block       .  } brace_close     : }
set_subtype [,] 27:schar
0434 0077 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0435 0078 block       .  { brace_open      : {
set_subtype [inline] 0:undef
0436 0078 string      .    undef           : inline
set_subtype [,] 27:schar
0437 0078 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0438 0078 name        .    name            : TokenSubtype
0439 0078 operator    . :: scope_op        : ::
set_subtype [DATTYPE] 1:name
0440 0078 name        .    name            : DATTYPE
set_subtype [}] 36:brace_close
0441 0078 block       .  } brace_close     : }
set_subtype [,] 27:schar
0442 0078 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0443 0080 block       .  { brace_open      : {
set_subtype [private] 0:undef
0444 0080 string      .    undef           : private
set_subtype [,] 27:schar
0445 0080 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0446 0080 name        .    name            : TokenSubtype
0447 0080 operator    . :: scope_op        : ::
set_subtype [DATTYPE] 1:name
0448 0080 name        .    name            : DATTYPE
set_subtype [}] 36:brace_close
0449 0080 block       .  } brace_close     : }
set_subtype [,] 27:schar
0450 0080 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0451 0081 block       .  { brace_open      : {
set_subtype [protected] 0:undef
0452 0081 string      .    undef           : protected
set_subtype [,] 27:schar
0453 0081 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0454 0081 name        .    name            : TokenSubtype
0455 0081 operator    . :: scope_op        : ::
set_subtype [DATTYPE] 1:name
0456 0081 name        .    name            : DATTYPE
set_subtype [}] 36:brace_close
0457 0081 block       .  } brace_close     : }
set_subtype [,] 27:schar
0458 0081 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0459 0082 block       .  { brace_open      : {
set_subtype [public] 0:undef
0460 0082 string      .    undef           : public
set_subtype [,] 27:schar
0461 0082 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0462 0082 name        .    name            : TokenSubtype
0463 0082 operator    . :: scope_op        : ::
set_subtype [DATTYPE] 1:name
0464 0082 name        .    name            : DATTYPE
set_subtype [}] 36:brace_close
0465 0082 block       .  } brace_close     : }
set_subtype [,] 27:schar
0466 0082 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0467 0084 block       .  { brace_open      : {
set_subtype [return] 0:undef
0468 0084 string      .    undef           : return
set_subtype [,] 27:schar
0469 0084 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0470 0084 name        .    name            : TokenSubtype
0471 0084 operator    . :: scope_op        : ::
set_subtype [KEYWORD] 1:name
0472 0084 name        .    name            : KEYWORD
set_subtype [}] 36:brace_close
0473 0084 block       .  } brace_close     : }
0474 0084 comment     . // line_comment    : // 예시에 return 추가
set_subtype [}] 36:brace_close
0475 0085 block       .  } brace_close     : }
set_subtype [;] 27:schar
0476 0085 sp_char     .  ; schar           : ;
0477 0087 comment     . // line_comment    : /*
set_subtype [python] 1:name
0478 0088 name        .    name            : python
set_subtype [b] 1:name
0479 0090 name        .    name            : b
0480 0090 operator    .  = assign_op       : =
0481 0090 operator    . -- incre_op        : --
set_subtype [copy] 1:name
0482 0090 name        .    name            : copy
0483 0090 operator    .  / arthmetic_op    : /
set_subtype [paste] 1:name
0484 0090 name        .    name            : paste
0485 0090 operator    . -- incre_op        : --
set_subtype [TokenSubtype] 1:name
0486 0090 name        .    name            : TokenSubtype
set_subtype [split] 1:name
0487 0090 name        .    name            : split
set_subtype [(] 33:paren_open
0488 0090 block       .  ( paren_open      : (
set_subtype [\n] 0:undef
0489 0090 string      .    undef           : \n
set_subtype [)] 34:paren_close
0490 0090 block       .  ) paren_close     : )
set_subtype [for] 2:keyword
0491 0092 name        .    keyword         : for
set_subtype [l] 1:name
0492 0092 name        .    name            : l
set_subtype [in] 1:name
0493 0092 name        .    name            : in
set_subtype [b] 1:name
0494 0092 name        .    name            : b
set_subtype [] 0:undef
set_subtype [:] 27:schar
0495 0092 sp_char     .  : schar           : :
set_subtype [r] 1:name
0496 0093 name        .    name            : r
0497 0093 operator    .  = assign_op       : =
set_subtype [l] 1:name
0498 0093 name        .    name            : l
set_subtype [.] 27:schar
0499 0093 sp_char     .  . schar           : .
set_subtype [split] 1:name
0500 0093 name        .    name            : split
set_subtype [(] 33:paren_open
0501 0093 block       .  ( paren_open      : (
set_subtype [,] 0:undef
0502 0093 string      .    undef           : ,
set_subtype [)] 34:paren_close
0503 0093 block       .  ) paren_close     : )
set_subtype [[] 37:square_bracket_open
0504 0093 block       .  [ square_bracket_open : [
0505 0093 number      .  d integer         : 0
set_subtype []] 38:square_bracket_close
0506 0093 block       .  ] square_bracket_close : ]
set_subtype [.] 27:schar
0507 0093 sp_char     .  . schar           : .
set_subtype [strip] 1:name
0508 0093 name        .    name            : strip
set_subtype [(] 33:paren_open
0509 0093 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
0510 0093 block       .  ) paren_close     : )
set_subtype [if] 2:keyword
0511 0094 name        .    keyword         : if
set_subtype [len] 1:name
0512 0094 name        .    name            : len
set_subtype [(] 33:paren_open
0513 0094 block       .  ( paren_open      : (
set_subtype [r] 1:name
0514 0094 name        .    name            : r
set_subtype [)] 34:paren_close
0515 0094 block       .  ) paren_close     : )
0516 0094 operator    . == relation_op     : ==
0517 0094 number      .  d integer         : 0
set_subtype [] 0:undef
set_subtype [:] 27:schar
0518 0094 sp_char     .  : schar           : :
set_subtype [continue] 1:name
0519 0094 name        .    name            : continue
set_subtype [u] 1:name
0520 0095 name        .    name            : u
0521 0095 operator    .  = assign_op       : =
set_subtype [r] 1:name
0522 0095 name        .    name            : r
set_subtype [.] 27:schar
0523 0095 sp_char     .  . schar           : .
set_subtype [lower] 1:name
0524 0095 name        .    name            : lower
set_subtype [(] 33:paren_open
0525 0095 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
0526 0095 block       .  ) paren_close     : )
set_subtype [print] 1:name
0527 0096 name        .    name            : print
set_subtype [(] 33:paren_open
0528 0096 block       .  ( paren_open      : (
set_subtype [\t{ TokenSubtype::] 0:undef
0529 0096 string      .    undef           : \t{ TokenSubtype::
0530 0096 operator    .  + arthmetic_op    : +
set_subtype [r] 1:name
0531 0096 name        .    name            : r
0532 0096 operator    .  + arthmetic_op    : +
set_subtype [f] 1:name
0533 0096 name        .    name            : f
set_subtype [, \"{u}\"] 0:undef
0534 0096 string      .    undef           : , \"{u}\"
0535 0096 operator    .  + arthmetic_op    : +
set_subtype [ },] 0:undef
0536 0096 string      .    undef           :  },
set_subtype [)] 34:paren_close
0537 0096 block       .  ) paren_close     : )
0538 0097 operator    .  * arthmetic_op    : *
0539 0097 operator    .  / arthmetic_op    : /
set_subtype [const] 4:dattype
0540 0099 name        .    dattype         : const
set_subtype [std] 1:name
0541 0099 name        .    name            : std
0542 0099 operator    . :: scope_op        : ::
set_subtype [map] 1:name
0543 0099 name        .    name            : map
set_subtype [<] 39:angle_bracket_open
0544 0099 block       .  < angle_bracket_open : <
set_subtype [TokenSubtype] 1:name
0545 0099 name        .    name            : TokenSubtype
set_subtype [,] 27:schar
0546 0099 sp_char     .  , schar           : ,
set_subtype [std] 1:name
0547 0099 name        .    name            : std
0548 0099 operator    . :: scope_op        : ::
set_subtype [string] 1:name
0549 0099 name        .    name            : string
set_subtype [>] 40:angle_bracket_close
0550 0099 block       .  > angle_bracket_close : >
set_subtype [Lexer] 1:name
0551 0099 name        .    name            : Lexer
0552 0099 operator    . :: scope_op        : ::
set_subtype [tokenSubtype_names] 1:name
0553 0099 name        .    name            : tokenSubtype_names
0554 0099 operator    .  = assign_op       : =
set_subtype [{] 35:brace_open
0555 0099 block       .  { brace_open      : {
set_subtype [{] 35:brace_open
0556 0100 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0557 0100 name        .    name            : TokenSubtype
0558 0100 operator    . :: scope_op        : ::
set_subtype [UNDEF] 1:name
0559 0100 name        .    name            : UNDEF
set_subtype [,] 27:schar
0560 0100 sp_char     .  , schar           : ,
set_subtype [undef] 0:undef
0561 0100 string      .    undef           : undef
set_subtype [}] 36:brace_close
0562 0100 block       .  } brace_close     : }
set_subtype [,] 27:schar
0563 0100 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0564 0101 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0565 0101 name        .    name            : TokenSubtype
0566 0101 operator    . :: scope_op        : ::
set_subtype [NAME] 1:name
0567 0101 name        .    name            : NAME
set_subtype [,] 27:schar
0568 0101 sp_char     .  , schar           : ,
set_subtype [name] 0:undef
0569 0101 string      .    undef           : name
set_subtype [}] 36:brace_close
0570 0101 block       .  } brace_close     : }
set_subtype [,] 27:schar
0571 0101 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0572 0102 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0573 0102 name        .    name            : TokenSubtype
0574 0102 operator    . :: scope_op        : ::
set_subtype [KEYWORD] 1:name
0575 0102 name        .    name            : KEYWORD
set_subtype [,] 27:schar
0576 0102 sp_char     .  , schar           : ,
set_subtype [keyword] 0:undef
0577 0102 string      .    undef           : keyword
set_subtype [}] 36:brace_close
0578 0102 block       .  } brace_close     : }
set_subtype [,] 27:schar
0579 0102 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0580 0103 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0581 0103 name        .    name            : TokenSubtype
0582 0103 operator    . :: scope_op        : ::
set_subtype [IDENTIFIER] 1:name
0583 0103 name        .    name            : IDENTIFIER
set_subtype [,] 27:schar
0584 0103 sp_char     .  , schar           : ,
set_subtype [identifier] 0:undef
0585 0103 string      .    undef           : identifier
set_subtype [}] 36:brace_close
0586 0103 block       .  } brace_close     : }
set_subtype [,] 27:schar
0587 0103 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0588 0104 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0589 0104 name        .    name            : TokenSubtype
0590 0104 operator    . :: scope_op        : ::
set_subtype [DATTYPE] 1:name
0591 0104 name        .    name            : DATTYPE
set_subtype [,] 27:schar
0592 0104 sp_char     .  , schar           : ,
set_subtype [dattype] 0:undef
0593 0104 string      .    undef           : dattype
set_subtype [}] 36:brace_close
0594 0104 block       .  } brace_close     : }
set_subtype [,] 27:schar
0595 0104 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0596 0105 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0597 0105 name        .    name            : TokenSubtype
0598 0105 operator    . :: scope_op        : ::
set_subtype [PREKEY] 1:name
0599 0105 name        .    name            : PREKEY
set_subtype [,] 27:schar
0600 0105 sp_char     .  , schar           : ,
set_subtype [prekey] 0:undef
0601 0105 string      .    undef           : prekey
set_subtype [}] 36:brace_close
0602 0105 block       .  } brace_close     : }
set_subtype [,] 27:schar
0603 0105 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0604 0106 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0605 0106 name        .    name            : TokenSubtype
0606 0106 operator    . :: scope_op        : ::
set_subtype [CONST] 1:name
0607 0106 name        .    name            : CONST
set_subtype [,] 27:schar
0608 0106 sp_char     .  , schar           : ,
set_subtype [const] 0:undef
0609 0106 string      .    undef           : const
set_subtype [}] 36:brace_close
0610 0106 block       .  } brace_close     : }
set_subtype [,] 27:schar
0611 0106 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0612 0107 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0613 0107 name        .    name            : TokenSubtype
0614 0107 operator    . :: scope_op        : ::
set_subtype [STRING_LITERAL] 1:name
0615 0107 name        .    name            : STRING_LITERAL
set_subtype [,] 27:schar
0616 0107 sp_char     .  , schar           : ,
set_subtype [string_literal] 0:undef
0617 0107 string      .    undef           : string_literal
set_subtype [}] 36:brace_close
0618 0107 block       .  } brace_close     : }
set_subtype [,] 27:schar
0619 0107 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0620 0108 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0621 0108 name        .    name            : TokenSubtype
0622 0108 operator    . :: scope_op        : ::
set_subtype [NUMBER] 1:name
0623 0108 name        .    name            : NUMBER
set_subtype [,] 27:schar
0624 0108 sp_char     .  , schar           : ,
set_subtype [number] 0:undef
0625 0108 string      .    undef           : number
set_subtype [}] 36:brace_close
0626 0108 block       .  } brace_close     : }
set_subtype [,] 27:schar
0627 0108 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0628 0109 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0629 0109 name        .    name            : TokenSubtype
0630 0109 operator    . :: scope_op        : ::
set_subtype [INTEGER] 1:name
0631 0109 name        .    name            : INTEGER
set_subtype [,] 27:schar
0632 0109 sp_char     .  , schar           : ,
set_subtype [integer] 0:undef
0633 0109 string      .    undef           : integer
set_subtype [}] 36:brace_close
0634 0109 block       .  } brace_close     : }
set_subtype [,] 27:schar
0635 0109 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0636 0110 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0637 0110 name        .    name            : TokenSubtype
0638 0110 operator    . :: scope_op        : ::
set_subtype [FLOAT] 1:name
0639 0110 name        .    name            : FLOAT
set_subtype [,] 27:schar
0640 0110 sp_char     .  , schar           : ,
set_subtype [float] 0:undef
0641 0110 string      .    undef           : float
set_subtype [}] 36:brace_close
0642 0110 block       .  } brace_close     : }
set_subtype [,] 27:schar
0643 0110 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0644 0111 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0645 0111 name        .    name            : TokenSubtype
0646 0111 operator    . :: scope_op        : ::
set_subtype [BIN_NUM] 1:name
0647 0111 name        .    name            : BIN_NUM
set_subtype [,] 27:schar
0648 0111 sp_char     .  , schar           : ,
set_subtype [bin_num] 0:undef
0649 0111 string      .    undef           : bin_num
set_subtype [}] 36:brace_close
0650 0111 block       .  } brace_close     : }
set_subtype [,] 27:schar
0651 0111 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0652 0112 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0653 0112 name        .    name            : TokenSubtype
0654 0112 operator    . :: scope_op        : ::
set_subtype [OCT_NUM] 1:name
0655 0112 name        .    name            : OCT_NUM
set_subtype [,] 27:schar
0656 0112 sp_char     .  , schar           : ,
set_subtype [oct_num] 0:undef
0657 0112 string      .    undef           : oct_num
set_subtype [}] 36:brace_close
0658 0112 block       .  } brace_close     : }
set_subtype [,] 27:schar
0659 0112 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0660 0113 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0661 0113 name        .    name            : TokenSubtype
0662 0113 operator    . :: scope_op        : ::
set_subtype [HEX_NUM] 1:name
0663 0113 name        .    name            : HEX_NUM
set_subtype [,] 27:schar
0664 0113 sp_char     .  , schar           : ,
set_subtype [hex_num] 0:undef
0665 0113 string      .    undef           : hex_num
set_subtype [}] 36:brace_close
0666 0113 block       .  } brace_close     : }
set_subtype [,] 27:schar
0667 0113 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0668 0114 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0669 0114 name        .    name            : TokenSubtype
0670 0114 operator    . :: scope_op        : ::
set_subtype [OPERATOR] 1:name
0671 0114 name        .    name            : OPERATOR
set_subtype [,] 27:schar
0672 0114 sp_char     .  , schar           : ,
set_subtype [operator] 0:undef
0673 0114 string      .    undef           : operator
set_subtype [}] 36:brace_close
0674 0114 block       .  } brace_close     : }
set_subtype [,] 27:schar
0675 0114 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0676 0115 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0677 0115 name        .    name            : TokenSubtype
0678 0115 operator    . :: scope_op        : ::
set_subtype [ARTHMETIC_OP] 1:name
0679 0115 name        .    name            : ARTHMETIC_OP
set_subtype [,] 27:schar
0680 0115 sp_char     .  , schar           : ,
set_subtype [arthmetic_op] 0:undef
0681 0115 string      .    undef           : arthmetic_op
set_subtype [}] 36:brace_close
0682 0115 block       .  } brace_close     : }
set_subtype [,] 27:schar
0683 0115 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0684 0116 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0685 0116 name        .    name            : TokenSubtype
0686 0116 operator    . :: scope_op        : ::
set_subtype [ASSIGN_OP] 1:name
0687 0116 name        .    name            : ASSIGN_OP
set_subtype [,] 27:schar
0688 0116 sp_char     .  , schar           : ,
set_subtype [assign_op] 0:undef
0689 0116 string      .    undef           : assign_op
set_subtype [}] 36:brace_close
0690 0116 block       .  } brace_close     : }
set_subtype [,] 27:schar
0691 0116 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0692 0117 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0693 0117 name        .    name            : TokenSubtype
0694 0117 operator    . :: scope_op        : ::
set_subtype [SIGN_OP] 1:name
0695 0117 name        .    name            : SIGN_OP
set_subtype [,] 27:schar
0696 0117 sp_char     .  , schar           : ,
set_subtype [sign_op] 0:undef
0697 0117 string      .    undef           : sign_op
set_subtype [}] 36:brace_close
0698 0117 block       .  } brace_close     : }
set_subtype [,] 27:schar
0699 0117 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0700 0118 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0701 0118 name        .    name            : TokenSubtype
0702 0118 operator    . :: scope_op        : ::
set_subtype [INCRE_OP] 1:name
0703 0118 name        .    name            : INCRE_OP
set_subtype [,] 27:schar
0704 0118 sp_char     .  , schar           : ,
set_subtype [incre_op] 0:undef
0705 0118 string      .    undef           : incre_op
set_subtype [}] 36:brace_close
0706 0118 block       .  } brace_close     : }
set_subtype [,] 27:schar
0707 0118 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0708 0119 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0709 0119 name        .    name            : TokenSubtype
0710 0119 operator    . :: scope_op        : ::
set_subtype [RELATIVE_OP] 1:name
0711 0119 name        .    name            : RELATIVE_OP
set_subtype [,] 27:schar
0712 0119 sp_char     .  , schar           : ,
set_subtype [relation_op] 0:undef
0713 0119 string      .    undef           : relation_op
set_subtype [}] 36:brace_close
0714 0119 block       .  } brace_close     : }
set_subtype [,] 27:schar
0715 0119 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0716 0120 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0717 0120 name        .    name            : TokenSubtype
0718 0120 operator    . :: scope_op        : ::
set_subtype [LOGIC_OP] 1:name
0719 0120 name        .    name            : LOGIC_OP
set_subtype [,] 27:schar
0720 0120 sp_char     .  , schar           : ,
set_subtype [logic_op] 0:undef
0721 0120 string      .    undef           : logic_op
set_subtype [}] 36:brace_close
0722 0120 block       .  } brace_close     : }
set_subtype [,] 27:schar
0723 0120 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0724 0121 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0725 0121 name        .    name            : TokenSubtype
0726 0121 operator    . :: scope_op        : ::
set_subtype [BITWISE_OP] 1:name
0727 0121 name        .    name            : BITWISE_OP
set_subtype [,] 27:schar
0728 0121 sp_char     .  , schar           : ,
set_subtype [bitwise_op] 0:undef
0729 0121 string      .    undef           : bitwise_op
set_subtype [}] 36:brace_close
0730 0121 block       .  } brace_close     : }
set_subtype [,] 27:schar
0731 0121 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0732 0122 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0733 0122 name        .    name            : TokenSubtype
0734 0122 operator    . :: scope_op        : ::
set_subtype [STRUCT_OP] 1:name
0735 0122 name        .    name            : STRUCT_OP
set_subtype [,] 27:schar
0736 0122 sp_char     .  , schar           : ,
set_subtype [struct_op] 0:undef
0737 0122 string      .    undef           : struct_op
set_subtype [}] 36:brace_close
0738 0122 block       .  } brace_close     : }
set_subtype [,] 27:schar
0739 0122 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0740 0123 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0741 0123 name        .    name            : TokenSubtype
0742 0123 operator    . :: scope_op        : ::
set_subtype [SCOPE_OP] 1:name
0743 0123 name        .    name            : SCOPE_OP
set_subtype [,] 27:schar
0744 0123 sp_char     .  , schar           : ,
set_subtype [scope_op] 0:undef
0745 0123 string      .    undef           : scope_op
set_subtype [}] 36:brace_close
0746 0123 block       .  } brace_close     : }
set_subtype [,] 27:schar
0747 0123 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0748 0124 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0749 0124 name        .    name            : TokenSubtype
0750 0124 operator    . :: scope_op        : ::
set_subtype [UNARY_OP] 1:name
0751 0124 name        .    name            : UNARY_OP
set_subtype [,] 27:schar
0752 0124 sp_char     .  , schar           : ,
set_subtype [unary_op] 0:undef
0753 0124 string      .    undef           : unary_op
set_subtype [}] 36:brace_close
0754 0124 block       .  } brace_close     : }
set_subtype [,] 27:schar
0755 0124 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0756 0125 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0757 0125 name        .    name            : TokenSubtype
0758 0125 operator    . :: scope_op        : ::
set_subtype [ETC_OP] 1:name
0759 0125 name        .    name            : ETC_OP
set_subtype [,] 27:schar
0760 0125 sp_char     .  , schar           : ,
set_subtype [etc_op] 0:undef
0761 0125 string      .    undef           : etc_op
set_subtype [}] 36:brace_close
0762 0125 block       .  } brace_close     : }
set_subtype [,] 27:schar
0763 0125 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0764 0126 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0765 0126 name        .    name            : TokenSubtype
0766 0126 operator    . :: scope_op        : ::
set_subtype [SCHAR] 1:name
0767 0126 name        .    name            : SCHAR
set_subtype [,] 27:schar
0768 0126 sp_char     .  , schar           : ,
set_subtype [schar] 0:undef
0769 0126 string      .    undef           : schar
set_subtype [}] 36:brace_close
0770 0126 block       .  } brace_close     : }
set_subtype [,] 27:schar
0771 0126 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0772 0127 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0773 0127 name        .    name            : TokenSubtype
0774 0127 operator    . :: scope_op        : ::
set_subtype [SPACE] 1:name
0775 0127 name        .    name            : SPACE
set_subtype [,] 27:schar
0776 0127 sp_char     .  , schar           : ,
set_subtype [space] 0:undef
0777 0127 string      .    undef           : space
set_subtype [}] 36:brace_close
0778 0127 block       .  } brace_close     : }
set_subtype [,] 27:schar
0779 0127 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0780 0128 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0781 0128 name        .    name            : TokenSubtype
0782 0128 operator    . :: scope_op        : ::
set_subtype [COMMENT] 1:name
0783 0128 name        .    name            : COMMENT
set_subtype [,] 27:schar
0784 0128 sp_char     .  , schar           : ,
set_subtype [comment] 0:undef
0785 0128 string      .    undef           : comment
set_subtype [}] 36:brace_close
0786 0128 block       .  } brace_close     : }
set_subtype [,] 27:schar
0787 0128 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0788 0129 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0789 0129 name        .    name            : TokenSubtype
0790 0129 operator    . :: scope_op        : ::
set_subtype [LINE_COMMENT] 1:name
0791 0129 name        .    name            : LINE_COMMENT
set_subtype [,] 27:schar
0792 0129 sp_char     .  , schar           : ,
set_subtype [line_comment] 0:undef
0793 0129 string      .    undef           : line_comment
set_subtype [}] 36:brace_close
0794 0129 block       .  } brace_close     : }
set_subtype [,] 27:schar
0795 0129 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0796 0130 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0797 0130 name        .    name            : TokenSubtype
0798 0130 operator    . :: scope_op        : ::
set_subtype [BLOCK_COMMENT] 1:name
0799 0130 name        .    name            : BLOCK_COMMENT
set_subtype [,] 27:schar
0800 0130 sp_char     .  , schar           : ,
set_subtype [block_comment] 0:undef
0801 0130 string      .    undef           : block_comment
set_subtype [}] 36:brace_close
0802 0130 block       .  } brace_close     : }
set_subtype [,] 27:schar
0803 0130 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0804 0131 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0805 0131 name        .    name            : TokenSubtype
0806 0131 operator    . :: scope_op        : ::
set_subtype [BLOCK] 1:name
0807 0131 name        .    name            : BLOCK
set_subtype [,] 27:schar
0808 0131 sp_char     .  , schar           : ,
set_subtype [block] 0:undef
0809 0131 string      .    undef           : block
set_subtype [}] 36:brace_close
0810 0131 block       .  } brace_close     : }
set_subtype [,] 27:schar
0811 0131 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0812 0132 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0813 0132 name        .    name            : TokenSubtype
0814 0132 operator    . :: scope_op        : ::
set_subtype [PAREN_OPEN] 1:name
0815 0132 name        .    name            : PAREN_OPEN
set_subtype [,] 27:schar
0816 0132 sp_char     .  , schar           : ,
set_subtype [paren_open] 0:undef
0817 0132 string      .    undef           : paren_open
set_subtype [}] 36:brace_close
0818 0132 block       .  } brace_close     : }
set_subtype [,] 27:schar
0819 0132 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0820 0133 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0821 0133 name        .    name            : TokenSubtype
0822 0133 operator    . :: scope_op        : ::
set_subtype [PAREN_CLOSE] 1:name
0823 0133 name        .    name            : PAREN_CLOSE
set_subtype [,] 27:schar
0824 0133 sp_char     .  , schar           : ,
set_subtype [paren_close] 0:undef
0825 0133 string      .    undef           : paren_close
set_subtype [}] 36:brace_close
0826 0133 block       .  } brace_close     : }
set_subtype [,] 27:schar
0827 0133 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0828 0134 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0829 0134 name        .    name            : TokenSubtype
0830 0134 operator    . :: scope_op        : ::
set_subtype [BRACE_OPEN] 1:name
0831 0134 name        .    name            : BRACE_OPEN
set_subtype [,] 27:schar
0832 0134 sp_char     .  , schar           : ,
set_subtype [brace_open] 0:undef
0833 0134 string      .    undef           : brace_open
set_subtype [}] 36:brace_close
0834 0134 block       .  } brace_close     : }
set_subtype [,] 27:schar
0835 0134 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0836 0135 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0837 0135 name        .    name            : TokenSubtype
0838 0135 operator    . :: scope_op        : ::
set_subtype [BRACE_CLOSE] 1:name
0839 0135 name        .    name            : BRACE_CLOSE
set_subtype [,] 27:schar
0840 0135 sp_char     .  , schar           : ,
set_subtype [brace_close] 0:undef
0841 0135 string      .    undef           : brace_close
set_subtype [}] 36:brace_close
0842 0135 block       .  } brace_close     : }
set_subtype [,] 27:schar
0843 0135 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0844 0136 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0845 0136 name        .    name            : TokenSubtype
0846 0136 operator    . :: scope_op        : ::
set_subtype [SQUARE_BRACKET_OPEN] 1:name
0847 0136 name        .    name            : SQUARE_BRACKET_OPEN
set_subtype [,] 27:schar
0848 0136 sp_char     .  , schar           : ,
set_subtype [square_bracket_open] 0:undef
0849 0136 string      .    undef           : square_bracket_open
set_subtype [}] 36:brace_close
0850 0136 block       .  } brace_close     : }
set_subtype [,] 27:schar
0851 0136 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0852 0137 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0853 0137 name        .    name            : TokenSubtype
0854 0137 operator    . :: scope_op        : ::
set_subtype [SQUARE_BRACKET_CLOSE] 1:name
0855 0137 name        .    name            : SQUARE_BRACKET_CLOSE
set_subtype [,] 27:schar
0856 0137 sp_char     .  , schar           : ,
set_subtype [square_bracket_close] 0:undef
0857 0137 string      .    undef           : square_bracket_close
set_subtype [}] 36:brace_close
0858 0137 block       .  } brace_close     : }
set_subtype [,] 27:schar
0859 0137 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0860 0138 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0861 0138 name        .    name            : TokenSubtype
0862 0138 operator    . :: scope_op        : ::
set_subtype [ANGLE_BRACKET_OPEN] 1:name
0863 0138 name        .    name            : ANGLE_BRACKET_OPEN
set_subtype [,] 27:schar
0864 0138 sp_char     .  , schar           : ,
set_subtype [angle_bracket_open] 0:undef
0865 0138 string      .    undef           : angle_bracket_open
set_subtype [}] 36:brace_close
0866 0138 block       .  } brace_close     : }
set_subtype [,] 27:schar
0867 0138 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0868 0139 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0869 0139 name        .    name            : TokenSubtype
0870 0139 operator    . :: scope_op        : ::
set_subtype [ANGLE_BRACKET_CLOSE] 1:name
0871 0139 name        .    name            : ANGLE_BRACKET_CLOSE
set_subtype [,] 27:schar
0872 0139 sp_char     .  , schar           : ,
set_subtype [angle_bracket_close] 0:undef
0873 0139 string      .    undef           : angle_bracket_close
set_subtype [}] 36:brace_close
0874 0139 block       .  } brace_close     : }
set_subtype [,] 27:schar
0875 0139 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0876 0140 block       .  { brace_open      : {
set_subtype [TokenSubtype] 1:name
0877 0140 name        .    name            : TokenSubtype
0878 0140 operator    . :: scope_op        : ::
set_subtype [END_OF_FILE] 1:name
0879 0140 name        .    name            : END_OF_FILE
set_subtype [,] 27:schar
0880 0140 sp_char     .  , schar           : ,
set_subtype [end_of_file] 0:undef
0881 0140 string      .    undef           : end_of_file
set_subtype [}] 36:brace_close
0882 0140 block       .  } brace_close     : }
0883 0140 comment     . // line_comment    : // EOF, "end_of_file = -1  // eof" },
set_subtype [}] 36:brace_close
0884 0141 block       .  } brace_close     : }
set_subtype [;] 27:schar
0885 0141 sp_char     .  ; schar           : ;
set_subtype [const] 4:dattype
0886 0143 name        .    dattype         : const
set_subtype [std] 1:name
0887 0143 name        .    name            : std
0888 0143 operator    . :: scope_op        : ::
set_subtype [map] 1:name
0889 0143 name        .    name            : map
set_subtype [<] 39:angle_bracket_open
0890 0143 block       .  < angle_bracket_open : <
set_subtype [std] 1:name
0891 0143 name        .    name            : std
0892 0143 operator    . :: scope_op        : ::
set_subtype [string] 1:name
0893 0143 name        .    name            : string
set_subtype [,] 27:schar
0894 0143 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0895 0143 name        .    name            : TokenSubtype
set_subtype [,] 27:schar
0896 0143 sp_char     .  , schar           : ,
set_subtype [std] 1:name
0897 0143 name        .    name            : std
0898 0143 operator    . :: scope_op        : ::
set_subtype [greater] 1:name
0899 0143 name        .    name            : greater
set_subtype [<] 39:angle_bracket_open
0900 0143 block       .  < angle_bracket_open : <
set_subtype [>] 40:angle_bracket_close
0901 0143 block       .  > angle_bracket_close : >
set_subtype [>] 40:angle_bracket_close
0902 0143 block       .  > angle_bracket_close : >
set_subtype [Lexer] 1:name
0903 0143 name        .    name            : Lexer
0904 0143 operator    . :: scope_op        : ::
set_subtype [operators_subtype] 1:name
0905 0143 name        .    name            : operators_subtype
0906 0143 operator    .  = assign_op       : =
set_subtype [{] 35:brace_open
0907 0143 block       .  { brace_open      : {
set_subtype [{] 35:brace_open
0908 0144 block       .  { brace_open      : {
set_subtype [<<=] 0:undef
0909 0144 string      .    undef           : <<=
set_subtype [,] 27:schar
0910 0144 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0911 0144 name        .    name            : TokenSubtype
0912 0144 operator    . :: scope_op        : ::
set_subtype [BITWISE_OP] 1:name
0913 0144 name        .    name            : BITWISE_OP
set_subtype [}] 36:brace_close
0914 0144 block       .  } brace_close     : }
set_subtype [,] 27:schar
0915 0144 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0916 0145 block       .  { brace_open      : {
set_subtype [>>=] 0:undef
0917 0145 string      .    undef           : >>=
set_subtype [,] 27:schar
0918 0145 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0919 0145 name        .    name            : TokenSubtype
0920 0145 operator    . :: scope_op        : ::
set_subtype [BITWISE_OP] 1:name
0921 0145 name        .    name            : BITWISE_OP
set_subtype [}] 36:brace_close
0922 0145 block       .  } brace_close     : }
set_subtype [,] 27:schar
0923 0145 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0924 0146 block       .  { brace_open      : {
set_subtype [==] 0:undef
0925 0146 string      .    undef           : ==
set_subtype [,] 27:schar
0926 0146 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0927 0146 name        .    name            : TokenSubtype
0928 0146 operator    . :: scope_op        : ::
set_subtype [RELATIVE_OP] 1:name
0929 0146 name        .    name            : RELATIVE_OP
set_subtype [}] 36:brace_close
0930 0146 block       .  } brace_close     : }
set_subtype [,] 27:schar
0931 0146 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0932 0147 block       .  { brace_open      : {
set_subtype [>=] 0:undef
0933 0147 string      .    undef           : >=
set_subtype [,] 27:schar
0934 0147 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0935 0147 name        .    name            : TokenSubtype
0936 0147 operator    . :: scope_op        : ::
set_subtype [RELATIVE_OP] 1:name
0937 0147 name        .    name            : RELATIVE_OP
set_subtype [}] 36:brace_close
0938 0147 block       .  } brace_close     : }
set_subtype [,] 27:schar
0939 0147 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0940 0148 block       .  { brace_open      : {
set_subtype [<=] 0:undef
0941 0148 string      .    undef           : <=
set_subtype [,] 27:schar
0942 0148 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0943 0148 name        .    name            : TokenSubtype
0944 0148 operator    . :: scope_op        : ::
set_subtype [RELATIVE_OP] 1:name
0945 0148 name        .    name            : RELATIVE_OP
set_subtype [}] 36:brace_close
0946 0148 block       .  } brace_close     : }
set_subtype [,] 27:schar
0947 0148 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0948 0149 block       .  { brace_open      : {
set_subtype [!=] 0:undef
0949 0149 string      .    undef           : !=
set_subtype [,] 27:schar
0950 0149 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0951 0149 name        .    name            : TokenSubtype
0952 0149 operator    . :: scope_op        : ::
set_subtype [RELATIVE_OP] 1:name
0953 0149 name        .    name            : RELATIVE_OP
set_subtype [}] 36:brace_close
0954 0149 block       .  } brace_close     : }
set_subtype [,] 27:schar
0955 0149 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0956 0150 block       .  { brace_open      : {
set_subtype [||] 0:undef
0957 0150 string      .    undef           : ||
set_subtype [,] 27:schar
0958 0150 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0959 0150 name        .    name            : TokenSubtype
0960 0150 operator    . :: scope_op        : ::
set_subtype [LOGIC_OP] 1:name
0961 0150 name        .    name            : LOGIC_OP
set_subtype [}] 36:brace_close
0962 0150 block       .  } brace_close     : }
set_subtype [,] 27:schar
0963 0150 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0964 0151 block       .  { brace_open      : {
set_subtype [&&] 0:undef
0965 0151 string      .    undef           : &&
set_subtype [,] 27:schar
0966 0151 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0967 0151 name        .    name            : TokenSubtype
0968 0151 operator    . :: scope_op        : ::
set_subtype [LOGIC_OP] 1:name
0969 0151 name        .    name            : LOGIC_OP
set_subtype [}] 36:brace_close
0970 0151 block       .  } brace_close     : }
set_subtype [,] 27:schar
0971 0151 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0972 0152 block       .  { brace_open      : {
set_subtype [++] 0:undef
0973 0152 string      .    undef           : ++
set_subtype [,] 27:schar
0974 0152 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0975 0152 name        .    name            : TokenSubtype
0976 0152 operator    . :: scope_op        : ::
set_subtype [INCRE_OP] 1:name
0977 0152 name        .    name            : INCRE_OP
set_subtype [}] 36:brace_close
0978 0152 block       .  } brace_close     : }
set_subtype [,] 27:schar
0979 0152 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0980 0153 block       .  { brace_open      : {
set_subtype [--] 0:undef
0981 0153 string      .    undef           : --
set_subtype [,] 27:schar
0982 0153 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0983 0153 name        .    name            : TokenSubtype
0984 0153 operator    . :: scope_op        : ::
set_subtype [INCRE_OP] 1:name
0985 0153 name        .    name            : INCRE_OP
set_subtype [}] 36:brace_close
0986 0153 block       .  } brace_close     : }
set_subtype [,] 27:schar
0987 0153 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0988 0154 block       .  { brace_open      : {
set_subtype [::] 0:undef
0989 0154 string      .    undef           : ::
set_subtype [,] 27:schar
0990 0154 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0991 0154 name        .    name            : TokenSubtype
0992 0154 operator    . :: scope_op        : ::
set_subtype [SCOPE_OP] 1:name
0993 0154 name        .    name            : SCOPE_OP
set_subtype [}] 36:brace_close
0994 0154 block       .  } brace_close     : }
set_subtype [,] 27:schar
0995 0154 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
0996 0155 block       .  { brace_open      : {
set_subtype [+=] 0:undef
0997 0155 string      .    undef           : +=
set_subtype [,] 27:schar
0998 0155 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
0999 0155 name        .    name            : TokenSubtype
1000 0155 operator    . :: scope_op        : ::
set_subtype [ASSIGN_OP] 1:name
1001 0155 name        .    name            : ASSIGN_OP
set_subtype [}] 36:brace_close
1002 0155 block       .  } brace_close     : }
set_subtype [,] 27:schar
1003 0155 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
1004 0156 block       .  { brace_open      : {
set_subtype [-=] 0:undef
1005 0156 string      .    undef           : -=
set_subtype [,] 27:schar
1006 0156 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1007 0156 name        .    name            : TokenSubtype
1008 0156 operator    . :: scope_op        : ::
set_subtype [ASSIGN_OP] 1:name
1009 0156 name        .    name            : ASSIGN_OP
set_subtype [}] 36:brace_close
1010 0156 block       .  } brace_close     : }
set_subtype [,] 27:schar
1011 0156 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
1012 0157 block       .  { brace_open      : {
set_subtype [*=] 0:undef
1013 0157 string      .    undef           : *=
set_subtype [,] 27:schar
1014 0157 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1015 0157 name        .    name            : TokenSubtype
1016 0157 operator    . :: scope_op        : ::
set_subtype [ASSIGN_OP] 1:name
1017 0157 name        .    name            : ASSIGN_OP
set_subtype [}] 36:brace_close
1018 0157 block       .  } brace_close     : }
set_subtype [,] 27:schar
1019 0157 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
1020 0158 block       .  { brace_open      : {
set_subtype [/=] 0:undef
1021 0158 string      .    undef           : /=
set_subtype [,] 27:schar
1022 0158 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1023 0158 name        .    name            : TokenSubtype
1024 0158 operator    . :: scope_op        : ::
set_subtype [ASSIGN_OP] 1:name
1025 0158 name        .    name            : ASSIGN_OP
set_subtype [}] 36:brace_close
1026 0158 block       .  } brace_close     : }
set_subtype [,] 27:schar
1027 0158 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
1028 0159 block       .  { brace_open      : {
set_subtype [%=] 0:undef
1029 0159 string      .    undef           : %=
set_subtype [,] 27:schar
1030 0159 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1031 0159 name        .    name            : TokenSubtype
1032 0159 operator    . :: scope_op        : ::
set_subtype [ARTHMETIC_OP] 1:name
1033 0159 name        .    name            : ARTHMETIC_OP
set_subtype [}] 36:brace_close
1034 0159 block       .  } brace_close     : }
set_subtype [,] 27:schar
1035 0159 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
1036 0160 block       .  { brace_open      : {
set_subtype [|=] 0:undef
1037 0160 string      .    undef           : |=
set_subtype [,] 27:schar
1038 0160 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1039 0160 name        .    name            : TokenSubtype
1040 0160 operator    . :: scope_op        : ::
set_subtype [BITWISE_OP] 1:name
1041 0160 name        .    name            : BITWISE_OP
set_subtype [}] 36:brace_close
1042 0160 block       .  } brace_close     : }
set_subtype [,] 27:schar
1043 0160 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
1044 0161 block       .  { brace_open      : {
set_subtype [&=] 0:undef
1045 0161 string      .    undef           : &=
set_subtype [,] 27:schar
1046 0161 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1047 0161 name        .    name            : TokenSubtype
1048 0161 operator    . :: scope_op        : ::
set_subtype [BITWISE_OP] 1:name
1049 0161 name        .    name            : BITWISE_OP
set_subtype [}] 36:brace_close
1050 0161 block       .  } brace_close     : }
set_subtype [,] 27:schar
1051 0161 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
1052 0162 block       .  { brace_open      : {
set_subtype [^=] 0:undef
1053 0162 string      .    undef           : ^=
set_subtype [,] 27:schar
1054 0162 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1055 0162 name        .    name            : TokenSubtype
1056 0162 operator    . :: scope_op        : ::
set_subtype [BITWISE_OP] 1:name
1057 0162 name        .    name            : BITWISE_OP
set_subtype [}] 36:brace_close
1058 0162 block       .  } brace_close     : }
set_subtype [,] 27:schar
1059 0162 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
1060 0163 block       .  { brace_open      : {
set_subtype [->] 0:undef
1061 0163 string      .    undef           : ->
set_subtype [,] 27:schar
1062 0163 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1063 0163 name        .    name            : TokenSubtype
1064 0163 operator    . :: scope_op        : ::
set_subtype [STRUCT_OP] 1:name
1065 0163 name        .    name            : STRUCT_OP
set_subtype [}] 36:brace_close
1066 0163 block       .  } brace_close     : }
set_subtype [,] 27:schar
1067 0163 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
1068 0164 block       .  { brace_open      : {
set_subtype [>>] 0:undef
1069 0164 string      .    undef           : >>
set_subtype [,] 27:schar
1070 0164 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1071 0164 name        .    name            : TokenSubtype
1072 0164 operator    . :: scope_op        : ::
set_subtype [SHIFT_OP] 1:name
1073 0164 name        .    name            : SHIFT_OP
set_subtype [}] 36:brace_close
1074 0164 block       .  } brace_close     : }
set_subtype [,] 27:schar
1075 0164 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
1076 0165 block       .  { brace_open      : {
set_subtype [<<] 0:undef
1077 0165 string      .    undef           : <<
set_subtype [,] 27:schar
1078 0165 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1079 0165 name        .    name            : TokenSubtype
1080 0165 operator    . :: scope_op        : ::
set_subtype [SHIFT_OP] 1:name
1081 0165 name        .    name            : SHIFT_OP
set_subtype [}] 36:brace_close
1082 0165 block       .  } brace_close     : }
set_subtype [,] 27:schar
1083 0165 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
1084 0166 block       .  { brace_open      : {
set_subtype [+] 0:undef
1085 0166 string      .    undef           : +
set_subtype [,] 27:schar
1086 0166 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1087 0166 name        .    name            : TokenSubtype
1088 0166 operator    . :: scope_op        : ::
set_subtype [ARTHMETIC_OP] 1:name
1089 0166 name        .    name            : ARTHMETIC_OP
set_subtype [}] 36:brace_close
1090 0166 block       .  } brace_close     : }
set_subtype [,] 27:schar
1091 0166 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
1092 0167 block       .  { brace_open      : {
set_subtype [-] 0:undef
1093 0167 string      .    undef           : -
set_subtype [,] 27:schar
1094 0167 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1095 0167 name        .    name            : TokenSubtype
1096 0167 operator    . :: scope_op        : ::
set_subtype [ARTHMETIC_OP] 1:name
1097 0167 name        .    name            : ARTHMETIC_OP
set_subtype [}] 36:brace_close
1098 0167 block       .  } brace_close     : }
set_subtype [,] 27:schar
1099 0167 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
1100 0168 block       .  { brace_open      : {
set_subtype [*] 0:undef
1101 0168 string      .    undef           : *
set_subtype [,] 27:schar
1102 0168 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1103 0168 name        .    name            : TokenSubtype
1104 0168 operator    . :: scope_op        : ::
set_subtype [ARTHMETIC_OP] 1:name
1105 0168 name        .    name            : ARTHMETIC_OP
set_subtype [}] 36:brace_close
1106 0168 block       .  } brace_close     : }
set_subtype [,] 27:schar
1107 0168 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
1108 0169 block       .  { brace_open      : {
set_subtype [/] 0:undef
1109 0169 string      .    undef           : /
set_subtype [,] 27:schar
1110 0169 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1111 0169 name        .    name            : TokenSubtype
1112 0169 operator    . :: scope_op        : ::
set_subtype [ARTHMETIC_OP] 1:name
1113 0169 name        .    name            : ARTHMETIC_OP
set_subtype [}] 36:brace_close
1114 0169 block       .  } brace_close     : }
set_subtype [,] 27:schar
1115 0169 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
1116 0170 block       .  { brace_open      : {
set_subtype [%] 0:undef
1117 0170 string      .    undef           : %
set_subtype [,] 27:schar
1118 0170 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1119 0170 name        .    name            : TokenSubtype
1120 0170 operator    . :: scope_op        : ::
set_subtype [ARTHMETIC_OP] 1:name
1121 0170 name        .    name            : ARTHMETIC_OP
set_subtype [}] 36:brace_close
1122 0170 block       .  } brace_close     : }
set_subtype [,] 27:schar
1123 0170 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
1124 0171 block       .  { brace_open      : {
set_subtype [!] 0:undef
1125 0171 string      .    undef           : !
set_subtype [,] 27:schar
1126 0171 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1127 0171 name        .    name            : TokenSubtype
1128 0171 operator    . :: scope_op        : ::
set_subtype [LOGIC_OP] 1:name
1129 0171 name        .    name            : LOGIC_OP
set_subtype [}] 36:brace_close
1130 0171 block       .  } brace_close     : }
set_subtype [,] 27:schar
1131 0171 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
1132 0172 block       .  { brace_open      : {
set_subtype [.] 0:undef
1133 0172 string      .    undef           : .
set_subtype [,] 27:schar
1134 0172 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1135 0172 name        .    name            : TokenSubtype
1136 0172 operator    . :: scope_op        : ::
set_subtype [STRUCT_OP] 1:name
1137 0172 name        .    name            : STRUCT_OP
set_subtype [}] 36:brace_close
1138 0172 block       .  } brace_close     : }
set_subtype [,] 27:schar
1139 0172 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
1140 0173 block       .  { brace_open      : {
set_subtype [=] 0:undef
1141 0173 string      .    undef           : =
set_subtype [,] 27:schar
1142 0173 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1143 0173 name        .    name            : TokenSubtype
1144 0173 operator    . :: scope_op        : ::
set_subtype [ASSIGN_OP] 1:name
1145 0173 name        .    name            : ASSIGN_OP
set_subtype [}] 36:brace_close
1146 0173 block       .  } brace_close     : }
set_subtype [,] 27:schar
1147 0173 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
1148 0174 block       .  { brace_open      : {
set_subtype [>] 0:undef
1149 0174 string      .    undef           : >
set_subtype [,] 27:schar
1150 0174 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1151 0174 name        .    name            : TokenSubtype
1152 0174 operator    . :: scope_op        : ::
set_subtype [RELATIVE_OP] 1:name
1153 0174 name        .    name            : RELATIVE_OP
set_subtype [}] 36:brace_close
1154 0174 block       .  } brace_close     : }
set_subtype [,] 27:schar
1155 0174 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
1156 0175 block       .  { brace_open      : {
set_subtype [<] 0:undef
1157 0175 string      .    undef           : <
set_subtype [,] 27:schar
1158 0175 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1159 0175 name        .    name            : TokenSubtype
1160 0175 operator    . :: scope_op        : ::
set_subtype [RELATIVE_OP] 1:name
1161 0175 name        .    name            : RELATIVE_OP
set_subtype [}] 36:brace_close
1162 0175 block       .  } brace_close     : }
set_subtype [,] 27:schar
1163 0175 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
1164 0176 block       .  { brace_open      : {
set_subtype [|] 0:undef
1165 0176 string      .    undef           : |
set_subtype [,] 27:schar
1166 0176 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1167 0176 name        .    name            : TokenSubtype
1168 0176 operator    . :: scope_op        : ::
set_subtype [BITWISE_OP] 1:name
1169 0176 name        .    name            : BITWISE_OP
set_subtype [}] 36:brace_close
1170 0176 block       .  } brace_close     : }
set_subtype [,] 27:schar
1171 0176 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
1172 0177 block       .  { brace_open      : {
set_subtype [&] 0:undef
1173 0177 string      .    undef           : &
set_subtype [,] 27:schar
1174 0177 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1175 0177 name        .    name            : TokenSubtype
1176 0177 operator    . :: scope_op        : ::
set_subtype [BITWISE_OP] 1:name
1177 0177 name        .    name            : BITWISE_OP
set_subtype [}] 36:brace_close
1178 0177 block       .  } brace_close     : }
set_subtype [,] 27:schar
1179 0177 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
1180 0178 block       .  { brace_open      : {
set_subtype [^] 0:undef
1181 0178 string      .    undef           : ^
set_subtype [,] 27:schar
1182 0178 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1183 0178 name        .    name            : TokenSubtype
1184 0178 operator    . :: scope_op        : ::
set_subtype [BITWISE_OP] 1:name
1185 0178 name        .    name            : BITWISE_OP
set_subtype [}] 36:brace_close
1186 0178 block       .  } brace_close     : }
set_subtype [,] 27:schar
1187 0178 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
1188 0179 block       .  { brace_open      : {
set_subtype [~] 0:undef
1189 0179 string      .    undef           : ~
set_subtype [,] 27:schar
1190 0179 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1191 0179 name        .    name            : TokenSubtype
1192 0179 operator    . :: scope_op        : ::
set_subtype [BITWISE_OP] 1:name
1193 0179 name        .    name            : BITWISE_OP
set_subtype [}] 36:brace_close
1194 0179 block       .  } brace_close     : }
set_subtype [,] 27:schar
1195 0179 sp_char     .  , schar           : ,
set_subtype [{] 35:brace_open
1196 0180 block       .  { brace_open      : {
set_subtype [?] 0:undef
1197 0180 string      .    undef           : ?
set_subtype [,] 27:schar
1198 0180 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1199 0180 name        .    name            : TokenSubtype
1200 0180 operator    . :: scope_op        : ::
set_subtype [LOGIC_OP] 1:name
1201 0180 name        .    name            : LOGIC_OP
set_subtype [}] 36:brace_close
1202 0180 block       .  } brace_close     : }
set_subtype [,] 27:schar
1203 0180 sp_char     .  , schar           : ,
1204 0181 comment     . // line_comment    : //  { "+",   TokenSubtype::UNARY_OP },
1205 0182 comment     . // line_comment    : //  { "-",   TokenSubtype::UNARY_OP },
set_subtype [{] 35:brace_open
1206 0183 block       .  { brace_open      : {
set_subtype [] 0:undef
1207 0183 string      .    undef           : 
set_subtype [,] 27:schar
1208 0183 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
1209 0183 name        .    name            : TokenSubtype
1210 0183 operator    . :: scope_op        : ::
set_subtype [END_OF_FILE] 1:name
1211 0183 name        .    name            : END_OF_FILE
set_subtype [}] 36:brace_close
1212 0183 block       .  } brace_close     : }
set_subtype [}] 36:brace_close
1213 0184 block       .  } brace_close     : }
set_subtype [;] 27:schar
1214 0184 sp_char     .  ; schar           : ;
set_subtype [const] 4:dattype
1215 0186 name        .    dattype         : const
set_subtype [char] 4:dattype
1216 0186 name        .    dattype         : char
1217 0186 operator    .  * arthmetic_op    : *
set_subtype [_comment_line_strs] 1:name
1218 0186 name        .    name            : _comment_line_strs
set_subtype [[] 37:square_bracket_open
1219 0186 block       .  [ square_bracket_open : [
set_subtype []] 38:square_bracket_close
1220 0186 block       .  ] square_bracket_close : ]
1221 0186 operator    .  = assign_op       : =
set_subtype [{] 35:brace_open
1222 0186 block       .  { brace_open      : {
set_subtype [//] 0:undef
1223 0186 string      .    undef           : //
set_subtype [,] 27:schar
1224 0186 sp_char     .  , schar           : ,
set_subtype [#] 0:undef
1225 0186 string      .    undef           : #
set_subtype [,] 27:schar
1226 0186 sp_char     .  , schar           : ,
set_subtype [--] 0:undef
1227 0186 string      .    undef           : --
set_subtype [,] 27:schar
1228 0186 sp_char     .  , schar           : ,
set_subtype [;] 0:undef
1229 0186 string      .    undef           : ;
set_subtype [,] 27:schar
1230 0186 sp_char     .  , schar           : ,
set_subtype [NULL] 1:name
1231 0186 name        .    name            : NULL
set_subtype [}] 36:brace_close
1232 0186 block       .  } brace_close     : }
set_subtype [;] 27:schar
1233 0186 sp_char     .  ; schar           : ;
set_subtype [const] 4:dattype
1234 0187 name        .    dattype         : const
set_subtype [char] 4:dattype
1235 0187 name        .    dattype         : char
1236 0187 operator    .  * arthmetic_op    : *
set_subtype [_comment_block_strs] 1:name
1237 0187 name        .    name            : _comment_block_strs
set_subtype [[] 37:square_bracket_open
1238 0187 block       .  [ square_bracket_open : [
set_subtype []] 38:square_bracket_close
1239 0187 block       .  ] square_bracket_close : ]
1240 0187 operator    .  = assign_op       : =
set_subtype [{] 35:brace_open
1241 0187 block       .  { brace_open      : {
set_subtype [/*] 0:undef
1242 0187 string      .    undef           : /*
set_subtype [,] 27:schar
1243 0187 sp_char     .  , schar           : ,
set_subtype [*/] 0:undef
1244 0187 string      .    undef           : */
set_subtype [,] 27:schar
1245 0187 sp_char     .  , schar           : ,
set_subtype [NULL] 1:name
1246 0187 name        .    name            : NULL
set_subtype [}] 36:brace_close
1247 0187 block       .  } brace_close     : }
set_subtype [;] 27:schar
1248 0187 sp_char     .  ; schar           : ;
set_subtype [const] 4:dattype
1249 0188 name        .    dattype         : const
set_subtype [char] 4:dattype
1250 0188 name        .    dattype         : char
set_subtype [__operator_chars] 1:name
1251 0188 name        .    name            : __operator_chars
set_subtype [[] 37:square_bracket_open
1252 0188 block       .  [ square_bracket_open : [
set_subtype []] 38:square_bracket_close
1253 0188 block       .  ] square_bracket_close : ]
1254 0188 operator    .  = assign_op       : =
set_subtype [+-*/%!~^|&=<>:?~.] 0:undef
1255 0188 string      .    undef           : +-*/%!~^|&=<>:?~.
set_subtype [;] 27:schar
1256 0188 sp_char     .  ; schar           : ;
set_subtype [const] 4:dattype
1257 0191 name        .    dattype         : const
set_subtype [char] 4:dattype
1258 0191 name        .    dattype         : char
set_subtype [__block_chars] 1:name
1259 0191 name        .    name            : __block_chars
set_subtype [[] 37:square_bracket_open
1260 0191 block       .  [ square_bracket_open : [
set_subtype []] 38:square_bracket_close
1261 0191 block       .  ] square_bracket_close : ]
1262 0191 operator    .  = assign_op       : =
set_subtype [(){}[]<>] 0:undef
1263 0191 string      .    undef           : (){}[]<>
set_subtype [;] 27:schar
1264 0191 sp_char     .  ; schar           : ;
1265 0191 comment     . // line_comment    : // /**/, <%%>
set_subtype [const] 4:dattype
1266 0192 name        .    dattype         : const
set_subtype [char] 4:dattype
1267 0192 name        .    dattype         : char
set_subtype [__oper_chars] 1:name
1268 0192 name        .    name            : __oper_chars
set_subtype [[] 37:square_bracket_open
1269 0192 block       .  [ square_bracket_open : [
set_subtype []] 38:square_bracket_close
1270 0192 block       .  ] square_bracket_close : ]
1271 0192 operator    .  = assign_op       : =
set_subtype [+-*/%!~|&^=<>?:] 0:undef
1272 0192 string      .    undef           : +-*/%!~|&^=<>?:
set_subtype [;] 27:schar
1273 0192 sp_char     .  ; schar           : ;
set_subtype [const] 4:dattype
1274 0193 name        .    dattype         : const
set_subtype [char] 4:dattype
1275 0193 name        .    dattype         : char
set_subtype [__special_chars] 1:name
1276 0193 name        .    name            : __special_chars
set_subtype [[] 37:square_bracket_open
1277 0193 block       .  [ square_bracket_open : [
set_subtype []] 38:square_bracket_close
1278 0193 block       .  ] square_bracket_close : ]
1279 0193 operator    .  = assign_op       : =
set_subtype [,.:;@$`] 0:undef
1280 0193 string      .    undef           : ,.:;@$`
set_subtype [;] 27:schar
1281 0193 sp_char     .  ; schar           : ;
set_subtype [const] 4:dattype
1282 0194 name        .    dattype         : const
set_subtype [char] 4:dattype
1283 0194 name        .    dattype         : char
set_subtype [__comment_chars] 1:name
1284 0194 name        .    name            : __comment_chars
set_subtype [[] 37:square_bracket_open
1285 0194 block       .  [ square_bracket_open : [
set_subtype []] 38:square_bracket_close
1286 0194 block       .  ] square_bracket_close : ]
1287 0194 operator    .  = assign_op       : =
set_subtype [/*#] 0:undef
1288 0194 string      .    undef           : /*#
set_subtype [;] 27:schar
1289 0194 sp_char     .  ; schar           : ;
1290 0194 comment     . // line_comment    : // c에서는 "/*"
1291 0196 comment     .  # line_comment    : #else
1292 0198 comment     .  # line_comment    : #if ( LANGMODE == __CPP__ )
1293 0199 comment     .  # line_comment    : #include "cpp.def"
1294 0200 comment     .  # line_comment    : #elif ( LANGMODE == __PYTHON__ )
1295 0201 comment     .  # line_comment    : #include "python.def"
1296 0202 comment     .  # line_comment    : #elif ( LANGMODE == __SQL__ )
1297 0203 comment     .  # line_comment    : #include "sql.def"
1298 0204 comment     .  # line_comment    : #elif ( LANGMODE == __BASH__ )
1299 0205 comment     .  # line_comment    : #include "bash.def"
1300 0206 comment     .  # line_comment    : #endif
1301 0208 comment     .  # line_comment    : #endif // #ifndef LANGMODE
1302 0210 comment     . // line_comment    : //=====================================================================================
set_subtype [int] 4:dattype
1303 0211 name        .    dattype         : int
set_subtype [find_index] 1:name
1304 0211 name        .    name            : find_index
set_subtype [(] 33:paren_open
1305 0211 block       .  ( paren_open      : (
set_subtype [const] 4:dattype
1306 0211 name        .    dattype         : const
set_subtype [char] 4:dattype
1307 0211 name        .    dattype         : char
1308 0211 operator    .  * arthmetic_op    : *
set_subtype [pp] 1:name
1309 0211 name        .    name            : pp
set_subtype [[] 37:square_bracket_open
1310 0211 block       .  [ square_bracket_open : [
set_subtype []] 38:square_bracket_close
1311 0211 block       .  ] square_bracket_close : ]
set_subtype [,] 27:schar
1312 0211 sp_char     .  , schar           : ,
set_subtype [const] 4:dattype
1313 0211 name        .    dattype         : const
set_subtype [std] 1:name
1314 0211 name        .    name            : std
1315 0211 operator    . :: scope_op        : ::
set_subtype [string] 1:name
1316 0211 name        .    name            : string
1317 0211 operator    .  & bitwise_op      : &
set_subtype [str] 1:name
1318 0211 name        .    name            : str
set_subtype [,] 27:schar
1319 0211 sp_char     .  , schar           : ,
set_subtype [size_t] 1:name
1320 0211 name        .    name            : size_t
set_subtype [pos] 1:name
1321 0211 name        .    name            : pos
1322 0211 operator    .  = assign_op       : =
1323 0211 number      .  d integer         : 0
set_subtype [)] 34:paren_close
1324 0211 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
1325 0211 block       .  { brace_open      : {
set_subtype [for] 2:keyword
1326 0212 name        .    keyword         : for
set_subtype [(] 33:paren_open
1327 0212 block       .  ( paren_open      : (
set_subtype [int] 4:dattype
1328 0212 name        .    dattype         : int
set_subtype [i] 1:name
1329 0212 name        .    name            : i
1330 0212 operator    .  = assign_op       : =
1331 0212 number      .  d integer         : 0
set_subtype [;] 27:schar
1332 0212 sp_char     .  ; schar           : ;
set_subtype [pp] 1:name
1333 0212 name        .    name            : pp
set_subtype [[] 37:square_bracket_open
1334 0212 block       .  [ square_bracket_open : [
set_subtype [i] 1:name
1335 0212 name        .    name            : i
set_subtype []] 38:square_bracket_close
1336 0212 block       .  ] square_bracket_close : ]
set_subtype [;] 27:schar
1337 0212 sp_char     .  ; schar           : ;
1338 0212 operator    . ++ incre_op        : ++
set_subtype [i] 1:name
1339 0212 name        .    name            : i
set_subtype [)] 34:paren_close
1340 0212 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
1341 0212 block       .  { brace_open      : {
set_subtype [if] 2:keyword
1342 0213 name        .    keyword         : if
set_subtype [(] 33:paren_open
1343 0213 block       .  ( paren_open      : (
set_subtype [str] 1:name
1344 0213 name        .    name            : str
set_subtype [.] 27:schar
1345 0213 sp_char     .  . schar           : .
set_subtype [find] 1:name
1346 0213 name        .    name            : find
set_subtype [(] 33:paren_open
1347 0213 block       .  ( paren_open      : (
set_subtype [pp] 1:name
1348 0213 name        .    name            : pp
set_subtype [[] 37:square_bracket_open
1349 0213 block       .  [ square_bracket_open : [
set_subtype [i] 1:name
1350 0213 name        .    name            : i
set_subtype []] 38:square_bracket_close
1351 0213 block       .  ] square_bracket_close : ]
set_subtype [,] 27:schar
1352 0213 sp_char     .  , schar           : ,
set_subtype [pos] 1:name
1353 0213 name        .    name            : pos
set_subtype [)] 34:paren_close
1354 0213 block       .  ) paren_close     : )
1355 0213 operator    . != relation_op     : !=
set_subtype [] 0:undef
set_subtype [] 0:undef
1356 0213 undef       .    undef           : 
1357 0213 number      .  d integer         : 1
set_subtype [)] 34:paren_close
1358 0213 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
1359 0213 block       .  { brace_open      : {
set_subtype [return] 2:keyword
1360 0214 name        .    keyword         : return
set_subtype [i] 1:name
1361 0214 name        .    name            : i
set_subtype [;] 27:schar
1362 0214 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
1363 0215 block       .  } brace_close     : }
set_subtype [}] 36:brace_close
1364 0216 block       .  } brace_close     : }
set_subtype [return] 2:keyword
1365 0217 name        .    keyword         : return
set_subtype [] 0:undef
set_subtype [] 0:undef
1366 0217 undef       .    undef           : 
1367 0217 number      .  d integer         : 1
set_subtype [;] 27:schar
1368 0217 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
1369 0218 block       .  } brace_close     : }
set_subtype [int] 4:dattype
1370 0220 name        .    dattype         : int
set_subtype [find_index] 1:name
1371 0220 name        .    name            : find_index
set_subtype [(] 33:paren_open
1372 0220 block       .  ( paren_open      : (
set_subtype [const] 4:dattype
1373 0220 name        .    dattype         : const
set_subtype [char] 4:dattype
1374 0220 name        .    dattype         : char
1375 0220 operator    .  * arthmetic_op    : *
set_subtype [p] 1:name
1376 0220 name        .    name            : p
set_subtype [,] 27:schar
1377 0220 sp_char     .  , schar           : ,
set_subtype [int] 4:dattype
1378 0220 name        .    dattype         : int
set_subtype [ch] 1:name
1379 0220 name        .    name            : ch
set_subtype [)] 34:paren_close
1380 0220 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
1381 0220 block       .  { brace_open      : {
set_subtype [for] 2:keyword
1382 0221 name        .    keyword         : for
set_subtype [(] 33:paren_open
1383 0221 block       .  ( paren_open      : (
set_subtype [int] 4:dattype
1384 0221 name        .    dattype         : int
set_subtype [i] 1:name
1385 0221 name        .    name            : i
1386 0221 operator    .  = assign_op       : =
1387 0221 number      .  d integer         : 0
set_subtype [;] 27:schar
1388 0221 sp_char     .  ; schar           : ;
set_subtype [p] 1:name
1389 0221 name        .    name            : p
set_subtype [[] 37:square_bracket_open
1390 0221 block       .  [ square_bracket_open : [
set_subtype [i] 1:name
1391 0221 name        .    name            : i
set_subtype []] 38:square_bracket_close
1392 0221 block       .  ] square_bracket_close : ]
set_subtype [;] 27:schar
1393 0221 sp_char     .  ; schar           : ;
set_subtype [i] 1:name
1394 0221 name        .    name            : i
1395 0221 operator    . ++ incre_op        : ++
set_subtype [)] 34:paren_close
1396 0221 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
1397 0221 block       .  { brace_open      : {
set_subtype [if] 2:keyword
1398 0222 name        .    keyword         : if
set_subtype [(] 33:paren_open
1399 0222 block       .  ( paren_open      : (
set_subtype [ch] 1:name
1400 0222 name        .    name            : ch
1401 0222 operator    . == relation_op     : ==
set_subtype [p] 1:name
1402 0222 name        .    name            : p
set_subtype [[] 37:square_bracket_open
1403 0222 block       .  [ square_bracket_open : [
set_subtype [i] 1:name
1404 0222 name        .    name            : i
set_subtype []] 38:square_bracket_close
1405 0222 block       .  ] square_bracket_close : ]
set_subtype [)] 34:paren_close
1406 0222 block       .  ) paren_close     : )
set_subtype [return] 2:keyword
1407 0222 name        .    keyword         : return
set_subtype [i] 1:name
1408 0222 name        .    name            : i
set_subtype [;] 27:schar
1409 0222 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
1410 0223 block       .  } brace_close     : }
set_subtype [return] 2:keyword
1411 0224 name        .    keyword         : return
set_subtype [] 0:undef
set_subtype [] 0:undef
1412 0224 undef       .    undef           : 
1413 0224 number      .  d integer         : 1
set_subtype [;] 27:schar
1414 0224 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
1415 0225 block       .  } brace_close     : }
set_subtype [bool] 4:dattype
1416 0227 name        .    dattype         : bool
set_subtype [Lexer] 1:name
1417 0227 name        .    name            : Lexer
1418 0227 operator    . :: scope_op        : ::
set_subtype [is_block_char] 1:name
1419 0227 name        .    name            : is_block_char
set_subtype [(] 33:paren_open
1420 0227 block       .  ( paren_open      : (
set_subtype [int] 4:dattype
1421 0227 name        .    dattype         : int
set_subtype [ch] 1:name
1422 0227 name        .    name            : ch
set_subtype [)] 34:paren_close
1423 0227 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
1424 0227 block       .  { brace_open      : {
set_subtype [return] 2:keyword
1425 0228 name        .    keyword         : return
set_subtype [(] 33:paren_open
1426 0228 block       .  ( paren_open      : (
set_subtype [strchr] 1:name
1427 0228 name        .    name            : strchr
set_subtype [(] 33:paren_open
1428 0228 block       .  ( paren_open      : (
set_subtype [__block_chars] 1:name
1429 0228 name        .    name            : __block_chars
set_subtype [,] 27:schar
1430 0228 sp_char     .  , schar           : ,
set_subtype [ch] 1:name
1431 0228 name        .    name            : ch
set_subtype [)] 34:paren_close
1432 0228 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
1433 0228 block       .  ) paren_close     : )
1434 0228 operator    .  ? logic_op        : ?
set_subtype [true] 4:dattype
1435 0228 name        .    dattype         : true
set_subtype [] 0:undef
set_subtype [:] 27:schar
1436 0228 sp_char     .  : schar           : :
set_subtype [false] 4:dattype
1437 0228 name        .    dattype         : false
set_subtype [;] 27:schar
1438 0228 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
1439 0229 block       .  } brace_close     : }
set_subtype [bool] 4:dattype
1440 0231 name        .    dattype         : bool
set_subtype [Lexer] 1:name
1441 0231 name        .    name            : Lexer
1442 0231 operator    . :: scope_op        : ::
set_subtype [is_oper_char] 1:name
1443 0231 name        .    name            : is_oper_char
set_subtype [(] 33:paren_open
1444 0231 block       .  ( paren_open      : (
set_subtype [int] 4:dattype
1445 0231 name        .    dattype         : int
set_subtype [ch] 1:name
1446 0231 name        .    name            : ch
set_subtype [)] 34:paren_close
1447 0231 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
1448 0231 block       .  { brace_open      : {
set_subtype [return] 2:keyword
1449 0232 name        .    keyword         : return
set_subtype [(] 33:paren_open
1450 0232 block       .  ( paren_open      : (
set_subtype [strchr] 1:name
1451 0232 name        .    name            : strchr
set_subtype [(] 33:paren_open
1452 0232 block       .  ( paren_open      : (
set_subtype [__oper_chars] 1:name
1453 0232 name        .    name            : __oper_chars
set_subtype [,] 27:schar
1454 0232 sp_char     .  , schar           : ,
set_subtype [ch] 1:name
1455 0232 name        .    name            : ch
set_subtype [)] 34:paren_close
1456 0232 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
1457 0232 block       .  ) paren_close     : )
1458 0232 operator    .  ? logic_op        : ?
set_subtype [true] 4:dattype
1459 0232 name        .    dattype         : true
set_subtype [] 0:undef
set_subtype [:] 27:schar
1460 0232 sp_char     .  : schar           : :
set_subtype [false] 4:dattype
1461 0232 name        .    dattype         : false
set_subtype [;] 27:schar
1462 0232 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
1463 0233 block       .  } brace_close     : }
set_subtype [bool] 4:dattype
1464 0234 name        .    dattype         : bool
set_subtype [Lexer] 1:name
1465 0234 name        .    name            : Lexer
1466 0234 operator    . :: scope_op        : ::
set_subtype [is_special_char] 1:name
1467 0234 name        .    name            : is_special_char
set_subtype [(] 33:paren_open
1468 0234 block       .  ( paren_open      : (
set_subtype [int] 4:dattype
1469 0234 name        .    dattype         : int
set_subtype [ch] 1:name
1470 0234 name        .    name            : ch
set_subtype [)] 34:paren_close
1471 0234 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
1472 0234 block       .  { brace_open      : {
set_subtype [return] 2:keyword
1473 0235 name        .    keyword         : return
set_subtype [(] 33:paren_open
1474 0235 block       .  ( paren_open      : (
set_subtype [strchr] 1:name
1475 0235 name        .    name            : strchr
set_subtype [(] 33:paren_open
1476 0235 block       .  ( paren_open      : (
set_subtype [__special_chars] 1:name
1477 0235 name        .    name            : __special_chars
set_subtype [,] 27:schar
1478 0235 sp_char     .  , schar           : ,
set_subtype [ch] 1:name
1479 0235 name        .    name            : ch
set_subtype [)] 34:paren_close
1480 0235 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
1481 0235 block       .  ) paren_close     : )
1482 0235 operator    .  ? logic_op        : ?
set_subtype [true] 4:dattype
1483 0235 name        .    dattype         : true
set_subtype [] 0:undef
set_subtype [:] 27:schar
1484 0235 sp_char     .  : schar           : :
set_subtype [false] 4:dattype
1485 0235 name        .    dattype         : false
set_subtype [;] 27:schar
1486 0235 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
1487 0236 block       .  } brace_close     : }
set_subtype [bool] 4:dattype
1488 0237 name        .    dattype         : bool
set_subtype [Lexer] 1:name
1489 0237 name        .    name            : Lexer
1490 0237 operator    . :: scope_op        : ::
set_subtype [is_comment_char] 1:name
1491 0237 name        .    name            : is_comment_char
set_subtype [(] 33:paren_open
1492 0237 block       .  ( paren_open      : (
set_subtype [int] 4:dattype
1493 0237 name        .    dattype         : int
set_subtype [ch] 1:name
1494 0237 name        .    name            : ch
set_subtype [)] 34:paren_close
1495 0237 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
1496 0237 block       .  { brace_open      : {
set_subtype [return] 2:keyword
1497 0238 name        .    keyword         : return
set_subtype [(] 33:paren_open
1498 0238 block       .  ( paren_open      : (
set_subtype [strchr] 1:name
1499 0238 name        .    name            : strchr
set_subtype [(] 33:paren_open
1500 0238 block       .  ( paren_open      : (
set_subtype [__comment_chars] 1:name
1501 0238 name        .    name            : __comment_chars
set_subtype [,] 27:schar
1502 0238 sp_char     .  , schar           : ,
set_subtype [ch] 1:name
1503 0238 name        .    name            : ch
set_subtype [)] 34:paren_close
1504 0238 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
1505 0238 block       .  ) paren_close     : )
1506 0238 operator    .  ? logic_op        : ?
set_subtype [true] 4:dattype
1507 0238 name        .    dattype         : true
set_subtype [] 0:undef
set_subtype [:] 27:schar
1508 0238 sp_char     .  : schar           : :
set_subtype [false] 4:dattype
1509 0238 name        .    dattype         : false
set_subtype [;] 27:schar
1510 0238 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
1511 0239 block       .  } brace_close     : }
set_subtype [TokenSubtype] 1:name
1512 0241 name        .    name            : TokenSubtype
set_subtype [Token] 1:name
1513 0241 name        .    name            : Token
1514 0241 operator    . :: scope_op        : ::
set_subtype [set_subtype] 1:name
1515 0241 name        .    name            : set_subtype
set_subtype [(] 33:paren_open
1516 0241 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
1517 0241 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
1518 0241 block       .  { brace_open      : {
set_subtype [int] 4:dattype
1519 0242 name        .    dattype         : int
set_subtype [idx] 1:name
1520 0242 name        .    name            : idx
set_subtype [;] 27:schar
1521 0242 sp_char     .  ; schar           : ;
set_subtype [char] 4:dattype
1522 0243 name        .    dattype         : char
set_subtype [ch] 1:name
1523 0243 name        .    name            : ch
set_subtype [;] 27:schar
1524 0243 sp_char     .  ; schar           : ;
set_subtype [switch] 2:keyword
1525 0244 name        .    keyword         : switch
set_subtype [(] 33:paren_open
1526 0244 block       .  ( paren_open      : (
set_subtype [type] 1:name
1527 0244 name        .    name            : type
set_subtype [)] 34:paren_close
1528 0244 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
1529 0244 block       .  { brace_open      : {
set_subtype [case] 2:keyword
1530 0245 name        .    keyword         : case
set_subtype [TokenType] 1:name
1531 0245 name        .    name            : TokenType
1532 0245 operator    . :: scope_op        : ::
set_subtype [NAME] 1:name
1533 0245 name        .    name            : NAME
set_subtype [] 0:undef
set_subtype [:] 27:schar
1534 0245 sp_char     .  : schar           : :
set_subtype [try] 2:keyword
1535 0246 name        .    keyword         : try
set_subtype [{] 35:brace_open
1536 0246 block       .  { brace_open      : {
set_subtype [subtype] 1:name
1537 0247 name        .    name            : subtype
1538 0247 operator    .  = assign_op       : =
set_subtype [MyLang] 1:name
1539 0247 name        .    name            : MyLang
1540 0247 operator    . :: scope_op        : ::
set_subtype [Lexer] 1:name
1541 0247 name        .    name            : Lexer
1542 0247 operator    . :: scope_op        : ::
set_subtype [keywords] 1:name
1543 0247 name        .    name            : keywords
set_subtype [.] 27:schar
1544 0247 sp_char     .  . schar           : .
set_subtype [at] 1:name
1545 0247 name        .    name            : at
set_subtype [(] 33:paren_open
1546 0247 block       .  ( paren_open      : (
set_subtype [value] 1:name
1547 0247 name        .    name            : value
set_subtype [)] 34:paren_close
1548 0247 block       .  ) paren_close     : )
set_subtype [;] 27:schar
1549 0247 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
1550 0248 block       .  } brace_close     : }
set_subtype [catch] 2:keyword
1551 0248 name        .    keyword         : catch
set_subtype [(] 33:paren_open
1552 0248 block       .  ( paren_open      : (
set_subtype [.] 27:schar
1553 0248 sp_char     .  . schar           : .
set_subtype [.] 27:schar
1554 0248 sp_char     .  . schar           : .
set_subtype [.] 27:schar
1555 0248 sp_char     .  . schar           : .
set_subtype [)] 34:paren_close
1556 0248 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
1557 0248 block       .  { brace_open      : {
set_subtype [subtype] 1:name
1558 0249 name        .    name            : subtype
1559 0249 operator    .  = assign_op       : =
set_subtype [TokenSubtype] 1:name
1560 0249 name        .    name            : TokenSubtype
1561 0249 operator    . :: scope_op        : ::
set_subtype [NAME] 1:name
1562 0249 name        .    name            : NAME
set_subtype [;] 27:schar
1563 0249 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
1564 0250 block       .  } brace_close     : }
set_subtype [typestr] 1:name
1565 0251 name        .    name            : typestr
1566 0251 operator    .  = assign_op       : =
set_subtype [] 0:undef
1567 0251 string      .    undef           : 
set_subtype [;] 27:schar
1568 0251 sp_char     .  ; schar           : ;
1569 0251 comment     . // line_comment    : // == value
set_subtype [break] 2:keyword
1570 0252 name        .    keyword         : break
set_subtype [;] 27:schar
1571 0252 sp_char     .  ; schar           : ;
set_subtype [case] 2:keyword
1572 0253 name        .    keyword         : case
set_subtype [TokenType] 1:name
1573 0253 name        .    name            : TokenType
1574 0253 operator    . :: scope_op        : ::
set_subtype [NUMBER] 1:name
1575 0253 name        .    name            : NUMBER
set_subtype [] 0:undef
set_subtype [:] 27:schar
1576 0253 sp_char     .  : schar           : :
set_subtype [typestr] 1:name
1577 0254 name        .    name            : typestr
1578 0254 operator    .  = assign_op       : =
set_subtype [] 0:undef
1579 0254 string      .    undef           : 
set_subtype [;] 27:schar
1580 0254 sp_char     .  ; schar           : ;
set_subtype [subtype] 1:name
1581 0255 name        .    name            : subtype
1582 0255 operator    .  = assign_op       : =
set_subtype [TokenSubtype] 1:name
1583 0255 name        .    name            : TokenSubtype
1584 0255 operator    . :: scope_op        : ::
set_subtype [NUMBER] 1:name
1585 0255 name        .    name            : NUMBER
set_subtype [;] 27:schar
1586 0255 sp_char     .  ; schar           : ;
set_subtype [break] 2:keyword
1587 0256 name        .    keyword         : break
set_subtype [;] 27:schar
1588 0256 sp_char     .  ; schar           : ;
set_subtype [case] 2:keyword
1589 0257 name        .    keyword         : case
set_subtype [TokenType] 1:name
1590 0257 name        .    name            : TokenType
1591 0257 operator    . :: scope_op        : ::
set_subtype [OPERATOR] 1:name
1592 0257 name        .    name            : OPERATOR
set_subtype [] 0:undef
set_subtype [:] 27:schar
1593 0257 sp_char     .  : schar           : :
1594 0258 comment     . // line_comment    : // already 
1595 0259 comment     .  # line_comment    : #ifdef DEBUG    
set_subtype [std] 1:name
1596 0260 name        .    name            : std
1597 0260 operator    . :: scope_op        : ::
set_subtype [cout] 1:name
1598 0260 name        .    name            : cout
set_subtype [<] 39:angle_bracket_open
1599 0260 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
1600 0260 block       .  < angle_bracket_open : <
set_subtype [set_subtype (] 0:undef
1601 0260 string      .    undef           : set_subtype (
set_subtype [<] 39:angle_bracket_open
1602 0260 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
1603 0260 block       .  < angle_bracket_open : <
set_subtype [typestr] 1:name
1604 0260 name        .    name            : typestr
set_subtype [<] 39:angle_bracket_open
1605 0260 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
1606 0260 block       .  < angle_bracket_open : <
set_subtype [) ] 0:undef
1607 0260 string      .    undef           : ) 
set_subtype [<] 39:angle_bracket_open
1608 0260 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
1609 0260 block       .  < angle_bracket_open : <
set_subtype [std] 1:name
1610 0260 name        .    name            : std
1611 0260 operator    . :: scope_op        : ::
set_subtype [endl] 1:name
1612 0260 name        .    name            : endl
set_subtype [;] 27:schar
1613 0260 sp_char     .  ; schar           : ;
1614 0261 comment     .  # line_comment    : #endif
set_subtype [break] 2:keyword
1615 0262 name        .    keyword         : break
set_subtype [;] 27:schar
1616 0262 sp_char     .  ; schar           : ;
set_subtype [case] 2:keyword
1617 0263 name        .    keyword         : case
set_subtype [TokenType] 1:name
1618 0263 name        .    name            : TokenType
1619 0263 operator    . :: scope_op        : ::
set_subtype [SCHAR] 1:name
1620 0263 name        .    name            : SCHAR
set_subtype [] 0:undef
set_subtype [:] 27:schar
1621 0263 sp_char     .  : schar           : :
set_subtype [typestr] 1:name
1622 0264 name        .    name            : typestr
1623 0264 operator    .  = assign_op       : =
set_subtype [value] 1:name
1624 0264 name        .    name            : value
set_subtype [;] 27:schar
1625 0264 sp_char     .  ; schar           : ;
set_subtype [subtype] 1:name
1626 0265 name        .    name            : subtype
1627 0265 operator    .  = assign_op       : =
set_subtype [TokenSubtype] 1:name
1628 0265 name        .    name            : TokenSubtype
1629 0265 operator    . :: scope_op        : ::
set_subtype [SCHAR] 1:name
1630 0265 name        .    name            : SCHAR
set_subtype [;] 27:schar
1631 0265 sp_char     .  ; schar           : ;
set_subtype [break] 2:keyword
1632 0266 name        .    keyword         : break
set_subtype [;] 27:schar
1633 0266 sp_char     .  ; schar           : ;
set_subtype [case] 2:keyword
1634 0267 name        .    keyword         : case
set_subtype [TokenType] 1:name
1635 0267 name        .    name            : TokenType
1636 0267 operator    . :: scope_op        : ::
set_subtype [COMMENT] 1:name
1637 0267 name        .    name            : COMMENT
set_subtype [] 0:undef
set_subtype [:] 27:schar
1638 0267 sp_char     .  : schar           : :
set_subtype [subtype] 1:name
1639 0268 name        .    name            : subtype
1640 0268 operator    .  = assign_op       : =
set_subtype [TokenSubtype] 1:name
1641 0268 name        .    name            : TokenSubtype
1642 0268 operator    . :: scope_op        : ::
set_subtype [COMMENT] 1:name
1643 0268 name        .    name            : COMMENT
set_subtype [;] 27:schar
1644 0268 sp_char     .  ; schar           : ;
set_subtype [if] 2:keyword
1645 0269 name        .    keyword         : if
set_subtype [(] 33:paren_open
1646 0269 block       .  ( paren_open      : (
set_subtype [(] 33:paren_open
1647 0269 block       .  ( paren_open      : (
set_subtype [idx] 1:name
1648 0269 name        .    name            : idx
1649 0269 operator    .  = assign_op       : =
set_subtype [find_index] 1:name
1650 0269 name        .    name            : find_index
set_subtype [(] 33:paren_open
1651 0269 block       .  ( paren_open      : (
set_subtype [_comment_line_strs] 1:name
1652 0269 name        .    name            : _comment_line_strs
set_subtype [,] 27:schar
1653 0269 sp_char     .  , schar           : ,
set_subtype [typestr] 1:name
1654 0269 name        .    name            : typestr
set_subtype [)] 34:paren_close
1655 0269 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
1656 0269 block       .  ) paren_close     : )
1657 0269 operator    . != relation_op     : !=
set_subtype [] 0:undef
set_subtype [] 0:undef
1658 0269 undef       .    undef           : 
1659 0269 number      .  d integer         : 1
set_subtype [)] 34:paren_close
1660 0269 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
1661 0269 block       .  { brace_open      : {
set_subtype [typestr] 1:name
1662 0270 name        .    name            : typestr
1663 0270 operator    .  = assign_op       : =
set_subtype [_comment_line_strs] 1:name
1664 0270 name        .    name            : _comment_line_strs
set_subtype [[] 37:square_bracket_open
1665 0270 block       .  [ square_bracket_open : [
set_subtype [idx] 1:name
1666 0270 name        .    name            : idx
set_subtype []] 38:square_bracket_close
1667 0270 block       .  ] square_bracket_close : ]
set_subtype [;] 27:schar
1668 0270 sp_char     .  ; schar           : ;
set_subtype [subtype] 1:name
1669 0271 name        .    name            : subtype
1670 0271 operator    .  = assign_op       : =
set_subtype [TokenSubtype] 1:name
1671 0271 name        .    name            : TokenSubtype
1672 0271 operator    . :: scope_op        : ::
set_subtype [LINE_COMMENT] 1:name
1673 0271 name        .    name            : LINE_COMMENT
set_subtype [;] 27:schar
1674 0271 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
1675 0272 block       .  } brace_close     : }
set_subtype [else] 2:keyword
1676 0272 name        .    keyword         : else
set_subtype [if] 2:keyword
1677 0273 name        .    keyword         : if
set_subtype [(] 33:paren_open
1678 0273 block       .  ( paren_open      : (
set_subtype [(] 33:paren_open
1679 0273 block       .  ( paren_open      : (
set_subtype [idx] 1:name
1680 0273 name        .    name            : idx
1681 0273 operator    .  = assign_op       : =
set_subtype [find_index] 1:name
1682 0273 name        .    name            : find_index
set_subtype [(] 33:paren_open
1683 0273 block       .  ( paren_open      : (
set_subtype [_comment_block_strs] 1:name
1684 0273 name        .    name            : _comment_block_strs
set_subtype [,] 27:schar
1685 0273 sp_char     .  , schar           : ,
set_subtype [typestr] 1:name
1686 0273 name        .    name            : typestr
set_subtype [)] 34:paren_close
1687 0273 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
1688 0273 block       .  ) paren_close     : )
1689 0273 operator    . != relation_op     : !=
set_subtype [] 0:undef
set_subtype [] 0:undef
1690 0273 undef       .    undef           : 
1691 0273 number      .  d integer         : 1
set_subtype [)] 34:paren_close
1692 0273 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
1693 0273 block       .  { brace_open      : {
set_subtype [typestr] 1:name
1694 0274 name        .    name            : typestr
1695 0274 operator    .  = assign_op       : =
set_subtype [_comment_line_strs] 1:name
1696 0274 name        .    name            : _comment_line_strs
set_subtype [[] 37:square_bracket_open
1697 0274 block       .  [ square_bracket_open : [
set_subtype [idx] 1:name
1698 0274 name        .    name            : idx
set_subtype []] 38:square_bracket_close
1699 0274 block       .  ] square_bracket_close : ]
set_subtype [;] 27:schar
1700 0274 sp_char     .  ; schar           : ;
set_subtype [subtype] 1:name
1701 0275 name        .    name            : subtype
1702 0275 operator    .  = assign_op       : =
set_subtype [TokenSubtype] 1:name
1703 0275 name        .    name            : TokenSubtype
1704 0275 operator    . :: scope_op        : ::
set_subtype [BLOCK_COMMENT] 1:name
1705 0275 name        .    name            : BLOCK_COMMENT
set_subtype [;] 27:schar
1706 0275 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
1707 0276 block       .  } brace_close     : }
set_subtype [break] 2:keyword
1708 0277 name        .    keyword         : break
set_subtype [;] 27:schar
1709 0277 sp_char     .  ; schar           : ;
set_subtype [case] 2:keyword
1710 0278 name        .    keyword         : case
set_subtype [TokenType] 1:name
1711 0278 name        .    name            : TokenType
1712 0278 operator    . :: scope_op        : ::
set_subtype [BLOCK] 1:name
1713 0278 name        .    name            : BLOCK
set_subtype [] 0:undef
set_subtype [:] 27:schar
1714 0278 sp_char     .  : schar           : :
set_subtype [typestr] 1:name
1715 0279 name        .    name            : typestr
1716 0279 operator    .  = assign_op       : =
set_subtype [value] 1:name
1717 0279 name        .    name            : value
set_subtype [.] 27:schar
1718 0279 sp_char     .  . schar           : .
set_subtype [at] 1:name
1719 0279 name        .    name            : at
set_subtype [(] 33:paren_open
1720 0279 block       .  ( paren_open      : (
1721 0279 number      .  d integer         : 0
set_subtype [)] 34:paren_close
1722 0279 block       .  ) paren_close     : )
set_subtype [;] 27:schar
1723 0279 sp_char     .  ; schar           : ;
set_subtype [ch] 1:name
1724 0280 name        .    name            : ch
1725 0280 operator    .  = assign_op       : =
set_subtype [value] 1:name
1726 0280 name        .    name            : value
set_subtype [.] 27:schar
1727 0280 sp_char     .  . schar           : .
set_subtype [at] 1:name
1728 0280 name        .    name            : at
set_subtype [(] 33:paren_open
1729 0280 block       .  ( paren_open      : (
1730 0280 number      .  d integer         : 0
set_subtype [)] 34:paren_close
1731 0280 block       .  ) paren_close     : )
set_subtype [;] 27:schar
1732 0280 sp_char     .  ; schar           : ;
set_subtype [subtype] 1:name
1733 0281 name        .    name            : subtype
1734 0281 operator    .  = assign_op       : =
set_subtype [TokenSubtype] 1:name
1735 0281 name        .    name            : TokenSubtype
1736 0281 operator    . :: scope_op        : ::
set_subtype [BLOCK] 1:name
1737 0281 name        .    name            : BLOCK
set_subtype [;] 27:schar
1738 0281 sp_char     .  ; schar           : ;
set_subtype [if] 2:keyword
1739 0282 name        .    keyword         : if
set_subtype [(] 33:paren_open
1740 0282 block       .  ( paren_open      : (
set_subtype [ch] 1:name
1741 0282 name        .    name            : ch
1742 0282 operator    . == relation_op     : ==
set_subtype [(] 0:undef
1743 0282 string      .    undef           : (
set_subtype [)] 34:paren_close
1744 0282 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
1745 0282 block       .  { brace_open      : {
set_subtype [subtype] 1:name
1746 0282 name        .    name            : subtype
1747 0282 operator    .  = assign_op       : =
set_subtype [TokenSubtype] 1:name
1748 0282 name        .    name            : TokenSubtype
1749 0282 operator    . :: scope_op        : ::
set_subtype [PAREN_OPEN] 1:name
1750 0282 name        .    name            : PAREN_OPEN
set_subtype [;] 27:schar
1751 0282 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
1752 0282 block       .  } brace_close     : }
set_subtype [else] 2:keyword
1753 0283 name        .    keyword         : else
set_subtype [if] 2:keyword
1754 0283 name        .    keyword         : if
set_subtype [(] 33:paren_open
1755 0283 block       .  ( paren_open      : (
set_subtype [ch] 1:name
1756 0283 name        .    name            : ch
1757 0283 operator    . == relation_op     : ==
set_subtype [)] 0:undef
1758 0283 string      .    undef           : )
set_subtype [)] 34:paren_close
1759 0283 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
1760 0283 block       .  { brace_open      : {
set_subtype [subtype] 1:name
1761 0283 name        .    name            : subtype
1762 0283 operator    .  = assign_op       : =
set_subtype [TokenSubtype] 1:name
1763 0283 name        .    name            : TokenSubtype
1764 0283 operator    . :: scope_op        : ::
set_subtype [PAREN_CLOSE] 1:name
1765 0283 name        .    name            : PAREN_CLOSE
set_subtype [;] 27:schar
1766 0283 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
1767 0283 block       .  } brace_close     : }
set_subtype [else] 2:keyword
1768 0284 name        .    keyword         : else
set_subtype [if] 2:keyword
1769 0284 name        .    keyword         : if
set_subtype [(] 33:paren_open
1770 0284 block       .  ( paren_open      : (
set_subtype [ch] 1:name
1771 0284 name        .    name            : ch
1772 0284 operator    . == relation_op     : ==
set_subtype [{] 0:undef
1773 0284 string      .    undef           : {
set_subtype [)] 34:paren_close
1774 0284 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
1775 0284 block       .  { brace_open      : {
set_subtype [subtype] 1:name
1776 0284 name        .    name            : subtype
1777 0284 operator    .  = assign_op       : =
set_subtype [TokenSubtype] 1:name
1778 0284 name        .    name            : TokenSubtype
1779 0284 operator    . :: scope_op        : ::
set_subtype [BRACE_OPEN] 1:name
1780 0284 name        .    name            : BRACE_OPEN
set_subtype [;] 27:schar
1781 0284 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
1782 0284 block       .  } brace_close     : }
set_subtype [else] 2:keyword
1783 0285 name        .    keyword         : else
set_subtype [if] 2:keyword
1784 0285 name        .    keyword         : if
set_subtype [(] 33:paren_open
1785 0285 block       .  ( paren_open      : (
set_subtype [ch] 1:name
1786 0285 name        .    name            : ch
1787 0285 operator    . == relation_op     : ==
set_subtype [}] 0:undef
1788 0285 string      .    undef           : }
set_subtype [)] 34:paren_close
1789 0285 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
1790 0285 block       .  { brace_open      : {
set_subtype [subtype] 1:name
1791 0285 name        .    name            : subtype
1792 0285 operator    .  = assign_op       : =
set_subtype [TokenSubtype] 1:name
1793 0285 name        .    name            : TokenSubtype
1794 0285 operator    . :: scope_op        : ::
set_subtype [BRACE_CLOSE] 1:name
1795 0285 name        .    name            : BRACE_CLOSE
set_subtype [;] 27:schar
1796 0285 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
1797 0285 block       .  } brace_close     : }
set_subtype [else] 2:keyword
1798 0286 name        .    keyword         : else
set_subtype [if] 2:keyword
1799 0286 name        .    keyword         : if
set_subtype [(] 33:paren_open
1800 0286 block       .  ( paren_open      : (
set_subtype [ch] 1:name
1801 0286 name        .    name            : ch
1802 0286 operator    . == relation_op     : ==
set_subtype [[] 0:undef
1803 0286 string      .    undef           : [
set_subtype [)] 34:paren_close
1804 0286 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
1805 0286 block       .  { brace_open      : {
set_subtype [subtype] 1:name
1806 0286 name        .    name            : subtype
1807 0286 operator    .  = assign_op       : =
set_subtype [TokenSubtype] 1:name
1808 0286 name        .    name            : TokenSubtype
1809 0286 operator    . :: scope_op        : ::
set_subtype [SQUARE_BRACKET_OPEN] 1:name
1810 0286 name        .    name            : SQUARE_BRACKET_OPEN
set_subtype [;] 27:schar
1811 0286 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
1812 0286 block       .  } brace_close     : }
set_subtype [else] 2:keyword
1813 0287 name        .    keyword         : else
set_subtype [if] 2:keyword
1814 0287 name        .    keyword         : if
set_subtype [(] 33:paren_open
1815 0287 block       .  ( paren_open      : (
set_subtype [ch] 1:name
1816 0287 name        .    name            : ch
1817 0287 operator    . == relation_op     : ==
set_subtype []] 0:undef
1818 0287 string      .    undef           : ]
set_subtype [)] 34:paren_close
1819 0287 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
1820 0287 block       .  { brace_open      : {
set_subtype [subtype] 1:name
1821 0287 name        .    name            : subtype
1822 0287 operator    .  = assign_op       : =
set_subtype [TokenSubtype] 1:name
1823 0287 name        .    name            : TokenSubtype
1824 0287 operator    . :: scope_op        : ::
set_subtype [SQUARE_BRACKET_CLOSE] 1:name
1825 0287 name        .    name            : SQUARE_BRACKET_CLOSE
set_subtype [;] 27:schar
1826 0287 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
1827 0287 block       .  } brace_close     : }
set_subtype [else] 2:keyword
1828 0288 name        .    keyword         : else
set_subtype [if] 2:keyword
1829 0288 name        .    keyword         : if
set_subtype [(] 33:paren_open
1830 0288 block       .  ( paren_open      : (
set_subtype [ch] 1:name
1831 0288 name        .    name            : ch
1832 0288 operator    . == relation_op     : ==
set_subtype [<] 0:undef
1833 0288 string      .    undef           : <
set_subtype [)] 34:paren_close
1834 0288 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
1835 0288 block       .  { brace_open      : {
set_subtype [subtype] 1:name
1836 0288 name        .    name            : subtype
1837 0288 operator    .  = assign_op       : =
set_subtype [TokenSubtype] 1:name
1838 0288 name        .    name            : TokenSubtype
1839 0288 operator    . :: scope_op        : ::
set_subtype [ANGLE_BRACKET_OPEN] 1:name
1840 0288 name        .    name            : ANGLE_BRACKET_OPEN
set_subtype [;] 27:schar
1841 0288 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
1842 0288 block       .  } brace_close     : }
set_subtype [else] 2:keyword
1843 0289 name        .    keyword         : else
set_subtype [if] 2:keyword
1844 0289 name        .    keyword         : if
set_subtype [(] 33:paren_open
1845 0289 block       .  ( paren_open      : (
set_subtype [ch] 1:name
1846 0289 name        .    name            : ch
1847 0289 operator    . == relation_op     : ==
set_subtype [>] 0:undef
1848 0289 string      .    undef           : >
set_subtype [)] 34:paren_close
1849 0289 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
1850 0289 block       .  { brace_open      : {
set_subtype [subtype] 1:name
1851 0289 name        .    name            : subtype
1852 0289 operator    .  = assign_op       : =
set_subtype [TokenSubtype] 1:name
1853 0289 name        .    name            : TokenSubtype
1854 0289 operator    . :: scope_op        : ::
set_subtype [ANGLE_BRACKET_CLOSE] 1:name
1855 0289 name        .    name            : ANGLE_BRACKET_CLOSE
set_subtype [;] 27:schar
1856 0289 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
1857 0289 block       .  } brace_close     : }
set_subtype [else] 2:keyword
1858 0290 name        .    keyword         : else
set_subtype [{] 35:brace_open
1859 0290 block       .  { brace_open      : {
1860 0291 comment     .  # line_comment    : #ifdef DEBUG
set_subtype [std] 1:name
1861 0292 name        .    name            : std
1862 0292 operator    . :: scope_op        : ::
set_subtype [cout] 1:name
1863 0292 name        .    name            : cout
set_subtype [<] 39:angle_bracket_open
1864 0292 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
1865 0292 block       .  < angle_bracket_open : <
set_subtype [set_subtype Token Block Unknown : ] 0:undef
1866 0292 string      .    undef           : set_subtype Token Block Unknown : 
set_subtype [<] 39:angle_bracket_open
1867 0292 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
1868 0292 block       .  < angle_bracket_open : <
set_subtype [value] 1:name
1869 0292 name        .    name            : value
set_subtype [<] 39:angle_bracket_open
1870 0292 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
1871 0292 block       .  < angle_bracket_open : <
set_subtype [ --] 0:undef
1872 0292 string      .    undef           :  --
set_subtype [<] 39:angle_bracket_open
1873 0292 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
1874 0292 block       .  < angle_bracket_open : <
set_subtype [std] 1:name
1875 0292 name        .    name            : std
1876 0292 operator    . :: scope_op        : ::
set_subtype [endl] 1:name
1877 0292 name        .    name            : endl
set_subtype [;] 27:schar
1878 0292 sp_char     .  ; schar           : ;
1879 0293 comment     .  # line_comment    : #endif
set_subtype [}] 36:brace_close
1880 0294 block       .  } brace_close     : }
set_subtype [break] 2:keyword
1881 0295 name        .    keyword         : break
set_subtype [;] 27:schar
1882 0295 sp_char     .  ; schar           : ;
set_subtype [case] 2:keyword
1883 0296 name        .    keyword         : case
set_subtype [TokenType] 1:name
1884 0296 name        .    name            : TokenType
1885 0296 operator    . :: scope_op        : ::
set_subtype [SPACE] 1:name
1886 0296 name        .    name            : SPACE
set_subtype [] 0:undef
set_subtype [:] 27:schar
1887 0296 sp_char     .  : schar           : :
set_subtype [typestr] 1:name
1888 0297 name        .    name            : typestr
1889 0297 operator    .  = assign_op       : =
set_subtype [std] 1:name
1890 0297 name        .    name            : std
1891 0297 operator    . :: scope_op        : ::
set_subtype [string] 1:name
1892 0297 name        .    name            : string
set_subtype [(] 33:paren_open
1893 0297 block       .  ( paren_open      : (
1894 0297 number      .  d integer         : 1
set_subtype [,] 27:schar
1895 0297 sp_char     .  , schar           : ,
set_subtype [value] 1:name
1896 0297 name        .    name            : value
set_subtype [.] 27:schar
1897 0297 sp_char     .  . schar           : .
set_subtype [at] 1:name
1898 0297 name        .    name            : at
set_subtype [(] 33:paren_open
1899 0297 block       .  ( paren_open      : (
1900 0297 number      .  d integer         : 0
set_subtype [)] 34:paren_close
1901 0297 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
1902 0297 block       .  ) paren_close     : )
set_subtype [;] 27:schar
1903 0297 sp_char     .  ; schar           : ;
1904 0297 comment     . // line_comment    : // value.at(0)
set_subtype [subtype] 1:name
1905 0298 name        .    name            : subtype
1906 0298 operator    .  = assign_op       : =
set_subtype [TokenSubtype] 1:name
1907 0298 name        .    name            : TokenSubtype
1908 0298 operator    . :: scope_op        : ::
set_subtype [SPACE] 1:name
1909 0298 name        .    name            : SPACE
set_subtype [;] 27:schar
1910 0298 sp_char     .  ; schar           : ;
set_subtype [break] 2:keyword
1911 0299 name        .    keyword         : break
set_subtype [;] 27:schar
1912 0299 sp_char     .  ; schar           : ;
set_subtype [default] 2:keyword
1913 0300 name        .    keyword         : default
set_subtype [] 0:undef
set_subtype [:] 27:schar
1914 0300 sp_char     .  : schar           : :
set_subtype [typestr] 1:name
1915 0301 name        .    name            : typestr
1916 0301 operator    .  = assign_op       : =
set_subtype [] 0:undef
1917 0301 string      .    undef           : 
set_subtype [;] 27:schar
1918 0301 sp_char     .  ; schar           : ;
set_subtype [subtype] 1:name
1919 0302 name        .    name            : subtype
1920 0302 operator    .  = assign_op       : =
set_subtype [TokenSubtype] 1:name
1921 0302 name        .    name            : TokenSubtype
1922 0302 operator    . :: scope_op        : ::
set_subtype [UNDEF] 1:name
1923 0302 name        .    name            : UNDEF
set_subtype [;] 27:schar
1924 0302 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
1925 0303 block       .  } brace_close     : }
1926 0305 comment     .  # line_comment    : #ifdef DEBUG
set_subtype [try] 2:keyword
1927 0306 name        .    keyword         : try
set_subtype [{] 35:brace_open
1928 0306 block       .  { brace_open      : {
set_subtype [std] 1:name
1929 0307 name        .    name            : std
1930 0307 operator    . :: scope_op        : ::
set_subtype [cout] 1:name
1931 0307 name        .    name            : cout
set_subtype [<] 39:angle_bracket_open
1932 0307 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
1933 0307 block       .  < angle_bracket_open : <
set_subtype [set_subtype [] 0:undef
1934 0307 string      .    undef           : set_subtype [
set_subtype [<] 39:angle_bracket_open
1935 0307 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
1936 0307 block       .  < angle_bracket_open : <
set_subtype [value] 1:name
1937 0307 name        .    name            : value
set_subtype [<] 39:angle_bracket_open
1938 0307 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
1939 0307 block       .  < angle_bracket_open : <
set_subtype [] ] 0:undef
1940 0307 string      .    undef           : ] 
set_subtype [<] 39:angle_bracket_open
1941 0307 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
1942 0307 block       .  < angle_bracket_open : <
set_subtype [(] 33:paren_open
1943 0307 block       .  ( paren_open      : (
set_subtype [int] 4:dattype
1944 0307 name        .    dattype         : int
set_subtype [)] 34:paren_close
1945 0307 block       .  ) paren_close     : )
set_subtype [subtype] 1:name
1946 0307 name        .    name            : subtype
set_subtype [<] 39:angle_bracket_open
1947 0307 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
1948 0307 block       .  < angle_bracket_open : <
set_subtype [:] 0:undef
1949 0307 string      .    undef           : :
set_subtype [;] 27:schar
1950 0307 sp_char     .  ; schar           : ;
set_subtype [std] 1:name
1951 0308 name        .    name            : std
1952 0308 operator    . :: scope_op        : ::
set_subtype [cout] 1:name
1953 0308 name        .    name            : cout
set_subtype [<] 39:angle_bracket_open
1954 0308 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
1955 0308 block       .  < angle_bracket_open : <
set_subtype [Lexer] 1:name
1956 0308 name        .    name            : Lexer
1957 0308 operator    . :: scope_op        : ::
set_subtype [tokenSubtype_names] 1:name
1958 0308 name        .    name            : tokenSubtype_names
set_subtype [.] 27:schar
1959 0308 sp_char     .  . schar           : .
set_subtype [at] 1:name
1960 0308 name        .    name            : at
set_subtype [(] 33:paren_open
1961 0308 block       .  ( paren_open      : (
set_subtype [subtype] 1:name
1962 0308 name        .    name            : subtype
set_subtype [)] 34:paren_close
1963 0308 block       .  ) paren_close     : )
set_subtype [<] 39:angle_bracket_open
1964 0308 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
1965 0308 block       .  < angle_bracket_open : <
set_subtype [std] 1:name
1966 0308 name        .    name            : std
1967 0308 operator    . :: scope_op        : ::
set_subtype [endl] 1:name
1968 0308 name        .    name            : endl
set_subtype [;] 27:schar
1969 0308 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
1970 0309 block       .  } brace_close     : }
set_subtype [catch] 2:keyword
1971 0309 name        .    keyword         : catch
set_subtype [(] 33:paren_open
1972 0309 block       .  ( paren_open      : (
set_subtype [std] 1:name
1973 0309 name        .    name            : std
1974 0309 operator    . :: scope_op        : ::
set_subtype [exception] 1:name
1975 0309 name        .    name            : exception
1976 0309 operator    .  & bitwise_op      : &
set_subtype [e] 1:name
1977 0309 name        .    name            : e
set_subtype [)] 34:paren_close
1978 0309 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
1979 0309 block       .  { brace_open      : {
set_subtype [std] 1:name
1980 0310 name        .    name            : std
1981 0310 operator    . :: scope_op        : ::
set_subtype [cerr] 1:name
1982 0310 name        .    name            : cerr
set_subtype [<] 39:angle_bracket_open
1983 0310 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
1984 0310 block       .  < angle_bracket_open : <
set_subtype [e] 1:name
1985 0310 name        .    name            : e
set_subtype [.] 27:schar
1986 0310 sp_char     .  . schar           : .
set_subtype [what] 1:name
1987 0310 name        .    name            : what
set_subtype [(] 33:paren_open
1988 0310 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
1989 0310 block       .  ) paren_close     : )
set_subtype [<] 39:angle_bracket_open
1990 0310 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
1991 0310 block       .  < angle_bracket_open : <
set_subtype [std] 1:name
1992 0310 name        .    name            : std
1993 0310 operator    . :: scope_op        : ::
set_subtype [endl] 1:name
1994 0310 name        .    name            : endl
set_subtype [;] 27:schar
1995 0310 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
1996 0311 block       .  } brace_close     : }
1997 0312 comment     .  # line_comment    : #endif
set_subtype [return] 2:keyword
1998 0314 name        .    keyword         : return
set_subtype [subtype] 1:name
1999 0314 name        .    name            : subtype
set_subtype [;] 27:schar
2000 0314 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
2001 0315 block       .  } brace_close     : }
set_subtype [Token] 1:name
2002 0317 name        .    name            : Token
2003 0317 operator    . :: scope_op        : ::
set_subtype [Token] 1:name
2004 0317 name        .    name            : Token
set_subtype [(] 33:paren_open
2005 0317 block       .  ( paren_open      : (
set_subtype [TokenType] 1:name
2006 0317 name        .    name            : TokenType
set_subtype [type] 1:name
2007 0317 name        .    name            : type
set_subtype [,] 27:schar
2008 0317 sp_char     .  , schar           : ,
set_subtype [const] 4:dattype
2009 0317 name        .    dattype         : const
set_subtype [std] 1:name
2010 0317 name        .    name            : std
2011 0317 operator    . :: scope_op        : ::
set_subtype [string] 1:name
2012 0317 name        .    name            : string
2013 0317 operator    .  & bitwise_op      : &
set_subtype [value] 1:name
2014 0317 name        .    name            : value
set_subtype [,] 27:schar
2015 0317 sp_char     .  , schar           : ,
set_subtype [size_t] 1:name
2016 0317 name        .    name            : size_t
set_subtype [line] 1:name
2017 0317 name        .    name            : line
set_subtype [,] 27:schar
2018 0317 sp_char     .  , schar           : ,
set_subtype [size_t] 1:name
2019 0317 name        .    name            : size_t
set_subtype [column] 1:name
2020 0317 name        .    name            : column
set_subtype [)] 34:paren_close
2021 0317 block       .  ) paren_close     : )
set_subtype [] 0:undef
set_subtype [:] 27:schar
2022 0318 sp_char     .  : schar           : :
set_subtype [type] 1:name
2023 0318 name        .    name            : type
set_subtype [(] 33:paren_open
2024 0318 block       .  ( paren_open      : (
set_subtype [type] 1:name
2025 0318 name        .    name            : type
set_subtype [)] 34:paren_close
2026 0318 block       .  ) paren_close     : )
set_subtype [,] 27:schar
2027 0318 sp_char     .  , schar           : ,
set_subtype [subtype] 1:name
2028 0318 name        .    name            : subtype
set_subtype [(] 33:paren_open
2029 0318 block       .  ( paren_open      : (
set_subtype [(] 33:paren_open
2030 0318 block       .  ( paren_open      : (
set_subtype [TokenSubtype] 1:name
2031 0318 name        .    name            : TokenSubtype
set_subtype [)] 34:paren_close
2032 0318 block       .  ) paren_close     : )
set_subtype [type] 1:name
2033 0318 name        .    name            : type
set_subtype [)] 34:paren_close
2034 0318 block       .  ) paren_close     : )
set_subtype [,] 27:schar
2035 0318 sp_char     .  , schar           : ,
set_subtype [value] 1:name
2036 0318 name        .    name            : value
set_subtype [(] 33:paren_open
2037 0318 block       .  ( paren_open      : (
set_subtype [value] 1:name
2038 0318 name        .    name            : value
set_subtype [)] 34:paren_close
2039 0318 block       .  ) paren_close     : )
set_subtype [,] 27:schar
2040 0318 sp_char     .  , schar           : ,
set_subtype [line] 1:name
2041 0318 name        .    name            : line
set_subtype [(] 33:paren_open
2042 0318 block       .  ( paren_open      : (
set_subtype [line] 1:name
2043 0318 name        .    name            : line
set_subtype [)] 34:paren_close
2044 0318 block       .  ) paren_close     : )
set_subtype [,] 27:schar
2045 0318 sp_char     .  , schar           : ,
set_subtype [column] 1:name
2046 0318 name        .    name            : column
set_subtype [(] 33:paren_open
2047 0318 block       .  ( paren_open      : (
set_subtype [column] 1:name
2048 0318 name        .    name            : column
set_subtype [)] 34:paren_close
2049 0318 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2050 0318 block       .  { brace_open      : {
set_subtype [set_subtype] 1:name
2051 0319 name        .    name            : set_subtype
set_subtype [(] 33:paren_open
2052 0319 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2053 0319 block       .  ) paren_close     : )
set_subtype [;] 27:schar
2054 0319 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
2055 0320 block       .  } brace_close     : }
2056 0322 comment     . // line_comment    : // peek()에서 '\' 를 처리해야할까
set_subtype [char] 4:dattype
2057 0323 name        .    dattype         : char
set_subtype [Lexer] 1:name
2058 0323 name        .    name            : Lexer
2059 0323 operator    . :: scope_op        : ::
set_subtype [peek] 1:name
2060 0323 name        .    name            : peek
set_subtype [(] 33:paren_open
2061 0323 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2062 0323 block       .  ) paren_close     : )
set_subtype [const] 4:dattype
2063 0323 name        .    dattype         : const
set_subtype [{] 35:brace_open
2064 0323 block       .  { brace_open      : {
set_subtype [if] 2:keyword
2065 0324 name        .    keyword         : if
set_subtype [(] 33:paren_open
2066 0324 block       .  ( paren_open      : (
set_subtype [m_pos] 1:name
2067 0324 name        .    name            : m_pos
set_subtype [<] 39:angle_bracket_open
2068 0324 block       .  < angle_bracket_open : <
set_subtype [m_str] 1:name
2069 0324 name        .    name            : m_str
set_subtype [.] 27:schar
2070 0324 sp_char     .  . schar           : .
set_subtype [length] 1:name
2071 0324 name        .    name            : length
set_subtype [(] 33:paren_open
2072 0324 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2073 0324 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
2074 0324 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2075 0324 block       .  { brace_open      : {
set_subtype [return] 2:keyword
2076 0325 name        .    keyword         : return
set_subtype [m_str] 1:name
2077 0325 name        .    name            : m_str
set_subtype [[] 37:square_bracket_open
2078 0325 block       .  [ square_bracket_open : [
set_subtype [m_pos] 1:name
2079 0325 name        .    name            : m_pos
set_subtype []] 38:square_bracket_close
2080 0325 block       .  ] square_bracket_close : ]
set_subtype [;] 27:schar
2081 0325 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
2082 0326 block       .  } brace_close     : }
set_subtype [return] 2:keyword
2083 0327 name        .    keyword         : return
set_subtype [\0] 0:undef
2084 0327 string      .    undef           : \0
set_subtype [;] 27:schar
2085 0327 sp_char     .  ; schar           : ;
2086 0327 comment     . // line_comment    : // EOF
set_subtype [}] 36:brace_close
2087 0328 block       .  } brace_close     : }
set_subtype [char] 4:dattype
2088 0330 name        .    dattype         : char
set_subtype [Lexer] 1:name
2089 0330 name        .    name            : Lexer
2090 0330 operator    . :: scope_op        : ::
set_subtype [npeek] 1:name
2091 0330 name        .    name            : npeek
set_subtype [(] 33:paren_open
2092 0330 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2093 0330 block       .  ) paren_close     : )
set_subtype [const] 4:dattype
2094 0330 name        .    dattype         : const
set_subtype [{] 35:brace_open
2095 0330 block       .  { brace_open      : {
set_subtype [if] 2:keyword
2096 0331 name        .    keyword         : if
set_subtype [(] 33:paren_open
2097 0331 block       .  ( paren_open      : (
set_subtype [(] 33:paren_open
2098 0331 block       .  ( paren_open      : (
set_subtype [m_pos] 1:name
2099 0331 name        .    name            : m_pos
set_subtype [] 0:undef
set_subtype [] 0:undef
2100 0331 undef       .    undef           : 
2101 0331 number      .  d integer         : 1
set_subtype [)] 34:paren_close
2102 0331 block       .  ) paren_close     : )
set_subtype [<] 39:angle_bracket_open
2103 0331 block       .  < angle_bracket_open : <
set_subtype [m_str] 1:name
2104 0331 name        .    name            : m_str
set_subtype [.] 27:schar
2105 0331 sp_char     .  . schar           : .
set_subtype [length] 1:name
2106 0331 name        .    name            : length
set_subtype [(] 33:paren_open
2107 0331 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2108 0331 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
2109 0331 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2110 0331 block       .  { brace_open      : {
set_subtype [return] 2:keyword
2111 0332 name        .    keyword         : return
set_subtype [m_str] 1:name
2112 0332 name        .    name            : m_str
set_subtype [[] 37:square_bracket_open
2113 0332 block       .  [ square_bracket_open : [
set_subtype [m_pos] 1:name
2114 0332 name        .    name            : m_pos
set_subtype [] 0:undef
set_subtype [] 0:undef
2115 0332 undef       .    undef           : 
2116 0332 number      .  d integer         : 1
set_subtype []] 38:square_bracket_close
2117 0332 block       .  ] square_bracket_close : ]
set_subtype [;] 27:schar
2118 0332 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
2119 0333 block       .  } brace_close     : }
set_subtype [return] 2:keyword
2120 0334 name        .    keyword         : return
set_subtype [\0] 0:undef
2121 0334 string      .    undef           : \0
set_subtype [;] 27:schar
2122 0334 sp_char     .  ; schar           : ;
2123 0334 comment     . // line_comment    : // EOF
set_subtype [}] 36:brace_close
2124 0335 block       .  } brace_close     : }
set_subtype [char] 4:dattype
2125 0337 name        .    dattype         : char
set_subtype [Lexer] 1:name
2126 0337 name        .    name            : Lexer
2127 0337 operator    . :: scope_op        : ::
set_subtype [advance] 1:name
2128 0337 name        .    name            : advance
set_subtype [(] 33:paren_open
2129 0337 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2130 0337 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2131 0337 block       .  { brace_open      : {
set_subtype [if] 2:keyword
2132 0338 name        .    keyword         : if
set_subtype [(] 33:paren_open
2133 0338 block       .  ( paren_open      : (
set_subtype [m_pos] 1:name
2134 0338 name        .    name            : m_pos
set_subtype [<] 39:angle_bracket_open
2135 0338 block       .  < angle_bracket_open : <
set_subtype [m_str] 1:name
2136 0338 name        .    name            : m_str
set_subtype [.] 27:schar
2137 0338 sp_char     .  . schar           : .
set_subtype [length] 1:name
2138 0338 name        .    name            : length
set_subtype [(] 33:paren_open
2139 0338 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2140 0338 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
2141 0338 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2142 0338 block       .  { brace_open      : {
set_subtype [char] 4:dattype
2143 0339 name        .    dattype         : char
set_subtype [c] 1:name
2144 0339 name        .    name            : c
2145 0339 operator    .  = assign_op       : =
set_subtype [m_str] 1:name
2146 0339 name        .    name            : m_str
set_subtype [[] 37:square_bracket_open
2147 0339 block       .  [ square_bracket_open : [
set_subtype [m_pos] 1:name
2148 0339 name        .    name            : m_pos
2149 0339 operator    . ++ incre_op        : ++
set_subtype []] 38:square_bracket_close
2150 0339 block       .  ] square_bracket_close : ]
set_subtype [;] 27:schar
2151 0339 sp_char     .  ; schar           : ;
set_subtype [if] 2:keyword
2152 0340 name        .    keyword         : if
set_subtype [(] 33:paren_open
2153 0340 block       .  ( paren_open      : (
set_subtype [c] 1:name
2154 0340 name        .    name            : c
2155 0340 operator    . == relation_op     : ==
set_subtype [\n] 0:undef
2156 0340 string      .    undef           : \n
set_subtype [)] 34:paren_close
2157 0340 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2158 0340 block       .  { brace_open      : {
set_subtype [m_line] 1:name
2159 0341 name        .    name            : m_line
2160 0341 operator    . ++ incre_op        : ++
set_subtype [;] 27:schar
2161 0341 sp_char     .  ; schar           : ;
set_subtype [m_column] 1:name
2162 0342 name        .    name            : m_column
2163 0342 operator    .  = assign_op       : =
2164 0342 number      .  d integer         : 0
set_subtype [;] 27:schar
2165 0342 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
2166 0343 block       .  } brace_close     : }
set_subtype [else] 2:keyword
2167 0343 name        .    keyword         : else
set_subtype [{] 35:brace_open
2168 0343 block       .  { brace_open      : {
set_subtype [m_column] 1:name
2169 0344 name        .    name            : m_column
2170 0344 operator    . ++ incre_op        : ++
set_subtype [;] 27:schar
2171 0344 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
2172 0345 block       .  } brace_close     : }
set_subtype [return] 2:keyword
2173 0346 name        .    keyword         : return
set_subtype [c] 1:name
2174 0346 name        .    name            : c
set_subtype [;] 27:schar
2175 0346 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
2176 0347 block       .  } brace_close     : }
set_subtype [return] 2:keyword
2177 0348 name        .    keyword         : return
set_subtype [\0] 0:undef
2178 0348 string      .    undef           : \0
set_subtype [;] 27:schar
2179 0348 sp_char     .  ; schar           : ;
2180 0348 comment     . // line_comment    : // EOF
set_subtype [}] 36:brace_close
2181 0349 block       .  } brace_close     : }
set_subtype [char] 4:dattype
2182 0351 name        .    dattype         : char
set_subtype [Lexer] 1:name
2183 0351 name        .    name            : Lexer
2184 0351 operator    . :: scope_op        : ::
set_subtype [nchar] 1:name
2185 0351 name        .    name            : nchar
set_subtype [(] 33:paren_open
2186 0351 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2187 0351 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2188 0351 block       .  { brace_open      : {
set_subtype [char] 4:dattype
2189 0352 name        .    dattype         : char
set_subtype [c] 1:name
2190 0352 name        .    name            : c
2191 0352 operator    .  = assign_op       : =
set_subtype [m_str] 1:name
2192 0352 name        .    name            : m_str
set_subtype [[] 37:square_bracket_open
2193 0352 block       .  [ square_bracket_open : [
set_subtype [m_pos] 1:name
2194 0352 name        .    name            : m_pos
set_subtype []] 38:square_bracket_close
2195 0352 block       .  ] square_bracket_close : ]
set_subtype [;] 27:schar
2196 0352 sp_char     .  ; schar           : ;
set_subtype [if] 2:keyword
2197 0354 name        .    keyword         : if
set_subtype [(] 33:paren_open
2198 0354 block       .  ( paren_open      : (
set_subtype [c] 1:name
2199 0354 name        .    name            : c
2200 0354 operator    . == relation_op     : ==
set_subtype [\\] 0:undef
2201 0354 string      .    undef           : \\
set_subtype [)] 34:paren_close
2202 0354 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2203 0354 block       .  { brace_open      : {
set_subtype [m_pos] 1:name
2204 0355 name        .    name            : m_pos
2205 0355 operator    . ++ incre_op        : ++
set_subtype [;] 27:schar
2206 0355 sp_char     .  ; schar           : ;
set_subtype [m_column] 1:name
2207 0355 name        .    name            : m_column
2208 0355 operator    . ++ incre_op        : ++
set_subtype [;] 27:schar
2209 0355 sp_char     .  ; schar           : ;
set_subtype [char] 4:dattype
2210 0356 name        .    dattype         : char
set_subtype [nc] 1:name
2211 0356 name        .    name            : nc
2212 0356 operator    .  = assign_op       : =
set_subtype [peek] 1:name
2213 0356 name        .    name            : peek
set_subtype [(] 33:paren_open
2214 0356 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2215 0356 block       .  ) paren_close     : )
set_subtype [;] 27:schar
2216 0356 sp_char     .  ; schar           : ;
set_subtype [if] 2:keyword
2217 0357 name        .    keyword         : if
set_subtype [(] 33:paren_open
2218 0357 block       .  ( paren_open      : (
set_subtype [strchr] 1:name
2219 0357 name        .    name            : strchr
set_subtype [(] 33:paren_open
2220 0357 block       .  ( paren_open      : (
set_subtype [fb\"\'nrt\\] 0:undef
2221 0357 string      .    undef           : fb\"\'nrt\\
set_subtype [,] 27:schar
2222 0357 sp_char     .  , schar           : ,
set_subtype [nc] 1:name
2223 0357 name        .    name            : nc
set_subtype [)] 34:paren_close
2224 0357 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
2225 0357 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2226 0357 block       .  { brace_open      : {
set_subtype [switch] 2:keyword
2227 0359 name        .    keyword         : switch
set_subtype [(] 33:paren_open
2228 0359 block       .  ( paren_open      : (
set_subtype [nc] 1:name
2229 0359 name        .    name            : nc
set_subtype [)] 34:paren_close
2230 0359 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2231 0359 block       .  { brace_open      : {
set_subtype [case] 2:keyword
2232 0360 name        .    keyword         : case
set_subtype [b] 0:undef
2233 0360 string      .    undef           : b
set_subtype [] 0:undef
set_subtype [:] 27:schar
2234 0360 sp_char     .  : schar           : :
set_subtype [c] 1:name
2235 0360 name        .    name            : c
2236 0360 operator    .  = assign_op       : =
set_subtype [\b] 0:undef
2237 0360 string      .    undef           : \b
set_subtype [;] 27:schar
2238 0360 sp_char     .  ; schar           : ;
set_subtype [break] 2:keyword
2239 0360 name        .    keyword         : break
set_subtype [;] 27:schar
2240 0360 sp_char     .  ; schar           : ;
set_subtype [case] 2:keyword
2241 0361 name        .    keyword         : case
set_subtype [n] 0:undef
2242 0361 string      .    undef           : n
set_subtype [] 0:undef
set_subtype [:] 27:schar
2243 0361 sp_char     .  : schar           : :
set_subtype [c] 1:name
2244 0361 name        .    name            : c
2245 0361 operator    .  = assign_op       : =
set_subtype [\n] 0:undef
2246 0361 string      .    undef           : \n
set_subtype [;] 27:schar
2247 0361 sp_char     .  ; schar           : ;
set_subtype [break] 2:keyword
2248 0361 name        .    keyword         : break
set_subtype [;] 27:schar
2249 0361 sp_char     .  ; schar           : ;
set_subtype [case] 2:keyword
2250 0362 name        .    keyword         : case
set_subtype [r] 0:undef
2251 0362 string      .    undef           : r
set_subtype [] 0:undef
set_subtype [:] 27:schar
2252 0362 sp_char     .  : schar           : :
set_subtype [c] 1:name
2253 0362 name        .    name            : c
2254 0362 operator    .  = assign_op       : =
set_subtype [\r] 0:undef
2255 0362 string      .    undef           : \r
set_subtype [;] 27:schar
2256 0362 sp_char     .  ; schar           : ;
set_subtype [break] 2:keyword
2257 0362 name        .    keyword         : break
set_subtype [;] 27:schar
2258 0362 sp_char     .  ; schar           : ;
set_subtype [case] 2:keyword
2259 0363 name        .    keyword         : case
set_subtype [t] 0:undef
2260 0363 string      .    undef           : t
set_subtype [] 0:undef
set_subtype [:] 27:schar
2261 0363 sp_char     .  : schar           : :
set_subtype [c] 1:name
2262 0363 name        .    name            : c
2263 0363 operator    .  = assign_op       : =
set_subtype [\t] 0:undef
2264 0363 string      .    undef           : \t
set_subtype [;] 27:schar
2265 0363 sp_char     .  ; schar           : ;
set_subtype [break] 2:keyword
2266 0363 name        .    keyword         : break
set_subtype [;] 27:schar
2267 0363 sp_char     .  ; schar           : ;
set_subtype [case] 2:keyword
2268 0364 name        .    keyword         : case
set_subtype [\\] 0:undef
2269 0364 string      .    undef           : \\
set_subtype [] 0:undef
set_subtype [:] 27:schar
2270 0364 sp_char     .  : schar           : :
set_subtype [c] 1:name
2271 0364 name        .    name            : c
2272 0364 operator    .  = assign_op       : =
set_subtype [\\] 0:undef
2273 0364 string      .    undef           : \\
set_subtype [;] 27:schar
2274 0364 sp_char     .  ; schar           : ;
set_subtype [break] 2:keyword
2275 0364 name        .    keyword         : break
set_subtype [;] 27:schar
2276 0364 sp_char     .  ; schar           : ;
set_subtype [case] 2:keyword
2277 0365 name        .    keyword         : case
set_subtype [\"] 0:undef
2278 0365 string      .    undef           : \"
set_subtype [] 0:undef
set_subtype [:] 27:schar
2279 0365 sp_char     .  : schar           : :
set_subtype [c] 1:name
2280 0365 name        .    name            : c
2281 0365 operator    .  = assign_op       : =
set_subtype [\"] 0:undef
2282 0365 string      .    undef           : \"
set_subtype [;] 27:schar
2283 0365 sp_char     .  ; schar           : ;
set_subtype [break] 2:keyword
2284 0365 name        .    keyword         : break
set_subtype [;] 27:schar
2285 0365 sp_char     .  ; schar           : ;
set_subtype [case] 2:keyword
2286 0366 name        .    keyword         : case
set_subtype [\'] 0:undef
2287 0366 string      .    undef           : \'
set_subtype [] 0:undef
set_subtype [:] 27:schar
2288 0366 sp_char     .  : schar           : :
set_subtype [c] 1:name
2289 0366 name        .    name            : c
2290 0366 operator    .  = assign_op       : =
set_subtype [\'] 0:undef
2291 0366 string      .    undef           : \'
set_subtype [;] 27:schar
2292 0366 sp_char     .  ; schar           : ;
set_subtype [break] 2:keyword
2293 0366 name        .    keyword         : break
set_subtype [;] 27:schar
2294 0366 sp_char     .  ; schar           : ;
set_subtype [default] 2:keyword
2295 0368 name        .    keyword         : default
set_subtype [] 0:undef
set_subtype [:] 27:schar
2296 0368 sp_char     .  : schar           : :
set_subtype [c] 1:name
2297 0369 name        .    name            : c
2298 0369 operator    .  = assign_op       : =
set_subtype [nc] 1:name
2299 0369 name        .    name            : nc
set_subtype [;] 27:schar
2300 0369 sp_char     .  ; schar           : ;
set_subtype [break] 2:keyword
2301 0370 name        .    keyword         : break
set_subtype [;] 27:schar
2302 0370 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
2303 0371 block       .  } brace_close     : }
set_subtype [}] 36:brace_close
2304 0372 block       .  } brace_close     : }
set_subtype [else] 2:keyword
2305 0372 name        .    keyword         : else
set_subtype [{] 35:brace_open
2306 0372 block       .  { brace_open      : {
2307 0373 comment     . // line_comment    : // error
set_subtype [}] 36:brace_close
2308 0374 block       .  } brace_close     : }
set_subtype [}] 36:brace_close
2309 0375 block       .  } brace_close     : }
set_subtype [return] 2:keyword
2310 0376 name        .    keyword         : return
set_subtype [c] 1:name
2311 0376 name        .    name            : c
set_subtype [;] 27:schar
2312 0376 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
2313 0377 block       .  } brace_close     : }
2314 0379 comment     . // line_comment    : //  return lines
set_subtype [void] 4:dattype
2315 0380 name        .    dattype         : void
set_subtype [Lexer] 1:name
2316 0380 name        .    name            : Lexer
2317 0380 operator    . :: scope_op        : ::
set_subtype [skipWhitespace] 1:name
2318 0380 name        .    name            : skipWhitespace
set_subtype [(] 33:paren_open
2319 0380 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2320 0380 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2321 0380 block       .  { brace_open      : {
set_subtype [while] 2:keyword
2322 0381 name        .    keyword         : while
set_subtype [(] 33:paren_open
2323 0381 block       .  ( paren_open      : (
set_subtype [m_pos] 1:name
2324 0381 name        .    name            : m_pos
set_subtype [<] 39:angle_bracket_open
2325 0381 block       .  < angle_bracket_open : <
set_subtype [m_str] 1:name
2326 0381 name        .    name            : m_str
set_subtype [.] 27:schar
2327 0381 sp_char     .  . schar           : .
set_subtype [length] 1:name
2328 0381 name        .    name            : length
set_subtype [(] 33:paren_open
2329 0381 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2330 0381 block       .  ) paren_close     : )
2331 0381 operator    . && logic_op        : &&
set_subtype [std] 1:name
2332 0381 name        .    name            : std
2333 0381 operator    . :: scope_op        : ::
set_subtype [isspace] 1:name
2334 0381 name        .    name            : isspace
set_subtype [(] 33:paren_open
2335 0381 block       .  ( paren_open      : (
set_subtype [peek] 1:name
2336 0381 name        .    name            : peek
set_subtype [(] 33:paren_open
2337 0381 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2338 0381 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
2339 0381 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
2340 0381 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2341 0381 block       .  { brace_open      : {
set_subtype [advance] 1:name
2342 0382 name        .    name            : advance
set_subtype [(] 33:paren_open
2343 0382 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2344 0382 block       .  ) paren_close     : )
set_subtype [;] 27:schar
2345 0382 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
2346 0383 block       .  } brace_close     : }
set_subtype [}] 36:brace_close
2347 0384 block       .  } brace_close     : }
2348 0386 comment     . // line_comment    : ////////////////////////////////////////////////////////////////////////////////
2349 0388 comment     . // line_comment    : // 이 함수를 부르기전에 comment 시작문자임을 확인해야한다.
set_subtype [Token] 1:name
2350 0389 name        .    name            : Token
set_subtype [Lexer] 1:name
2351 0389 name        .    name            : Lexer
2352 0389 operator    . :: scope_op        : ::
set_subtype [parseComment] 1:name
2353 0389 name        .    name            : parseComment
set_subtype [(] 33:paren_open
2354 0389 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2355 0389 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2356 0389 block       .  { brace_open      : {
2357 0390 comment     . // line_comment    : // 한줄 주석 처리
set_subtype [size_t] 1:name
2358 0391 name        .    name            : size_t
set_subtype [start_col] 1:name
2359 0391 name        .    name            : start_col
2360 0391 operator    .  = assign_op       : =
set_subtype [m_column] 1:name
2361 0391 name        .    name            : m_column
set_subtype [;] 27:schar
2362 0391 sp_char     .  ; schar           : ;
set_subtype [size_t] 1:name
2363 0392 name        .    name            : size_t
set_subtype [start_line] 1:name
2364 0392 name        .    name            : start_line
2365 0392 operator    .  = assign_op       : =
set_subtype [m_line] 1:name
2366 0392 name        .    name            : m_line
set_subtype [;] 27:schar
2367 0392 sp_char     .  ; schar           : ;
set_subtype [std] 1:name
2368 0394 name        .    name            : std
2369 0394 operator    . :: scope_op        : ::
set_subtype [string] 1:name
2370 0394 name        .    name            : string
set_subtype [str] 1:name
2371 0394 name        .    name            : str
set_subtype [;] 27:schar
2372 0394 sp_char     .  ; schar           : ;
set_subtype [char] 4:dattype
2373 0395 name        .    dattype         : char
set_subtype [c] 1:name
2374 0395 name        .    name            : c
2375 0395 operator    .  = assign_op       : =
set_subtype [peek] 1:name
2376 0395 name        .    name            : peek
set_subtype [(] 33:paren_open
2377 0395 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2378 0395 block       .  ) paren_close     : )
set_subtype [;] 27:schar
2379 0395 sp_char     .  ; schar           : ;
2380 0396 comment     . // line_comment    : //if ((c == '#') || (c == '/' && npeek() == '/')) {
set_subtype [if] 2:keyword
2381 0397 name        .    keyword         : if
set_subtype [(] 33:paren_open
2382 0397 block       .  ( paren_open      : (
set_subtype [find_index] 1:name
2383 0397 name        .    name            : find_index
set_subtype [(] 33:paren_open
2384 0397 block       .  ( paren_open      : (
set_subtype [_comment_line_strs] 1:name
2385 0397 name        .    name            : _comment_line_strs
set_subtype [,] 27:schar
2386 0397 sp_char     .  , schar           : ,
set_subtype [m_str] 1:name
2387 0397 name        .    name            : m_str
set_subtype [,] 27:schar
2388 0397 sp_char     .  , schar           : ,
set_subtype [m_pos] 1:name
2389 0397 name        .    name            : m_pos
set_subtype [)] 34:paren_close
2390 0397 block       .  ) paren_close     : )
2391 0397 operator    . != relation_op     : !=
set_subtype [] 0:undef
set_subtype [] 0:undef
2392 0397 undef       .    undef           : 
2393 0397 number      .  d integer         : 1
set_subtype [)] 34:paren_close
2394 0397 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2395 0397 block       .  { brace_open      : {
2396 0398 comment     . // line_comment    : //std::cout << m_str.substr(0,10) << std::endl;
set_subtype [while] 2:keyword
2397 0399 name        .    keyword         : while
set_subtype [(] 33:paren_open
2398 0399 block       .  ( paren_open      : (
set_subtype [m_pos] 1:name
2399 0399 name        .    name            : m_pos
set_subtype [<] 39:angle_bracket_open
2400 0399 block       .  < angle_bracket_open : <
set_subtype [m_str] 1:name
2401 0399 name        .    name            : m_str
set_subtype [.] 27:schar
2402 0399 sp_char     .  . schar           : .
set_subtype [length] 1:name
2403 0399 name        .    name            : length
set_subtype [(] 33:paren_open
2404 0399 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2405 0399 block       .  ) paren_close     : )
2406 0399 operator    . && logic_op        : &&
set_subtype [peek] 1:name
2407 0399 name        .    name            : peek
set_subtype [(] 33:paren_open
2408 0399 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2409 0399 block       .  ) paren_close     : )
2410 0399 operator    . != relation_op     : !=
set_subtype [\n] 0:undef
2411 0399 string      .    undef           : \n
set_subtype [)] 34:paren_close
2412 0399 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2413 0399 block       .  { brace_open      : {
set_subtype [str] 1:name
2414 0400 name        .    name            : str
2415 0400 operator    . += assign_op       : +=
set_subtype [advance] 1:name
2416 0400 name        .    name            : advance
set_subtype [(] 33:paren_open
2417 0400 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2418 0400 block       .  ) paren_close     : )
set_subtype [;] 27:schar
2419 0400 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
2420 0401 block       .  } brace_close     : }
set_subtype [return] 2:keyword
2421 0402 name        .    keyword         : return
set_subtype [Token] 1:name
2422 0402 name        .    name            : Token
set_subtype [(] 33:paren_open
2423 0402 block       .  ( paren_open      : (
set_subtype [TokenType] 1:name
2424 0402 name        .    name            : TokenType
2425 0402 operator    . :: scope_op        : ::
set_subtype [COMMENT] 1:name
2426 0402 name        .    name            : COMMENT
set_subtype [,] 27:schar
2427 0402 sp_char     .  , schar           : ,
set_subtype [str] 1:name
2428 0402 name        .    name            : str
set_subtype [,] 27:schar
2429 0402 sp_char     .  , schar           : ,
set_subtype [m_line] 1:name
2430 0402 name        .    name            : m_line
set_subtype [,] 27:schar
2431 0402 sp_char     .  , schar           : ,
set_subtype [start_col] 1:name
2432 0402 name        .    name            : start_col
set_subtype [,] 27:schar
2433 0402 sp_char     .  , schar           : ,
set_subtype [(] 33:paren_open
2434 0402 block       .  ( paren_open      : (
set_subtype [c] 1:name
2435 0402 name        .    name            : c
2436 0402 operator    . == relation_op     : ==
set_subtype [#] 0:undef
2437 0402 string      .    undef           : #
set_subtype [)] 34:paren_close
2438 0402 block       .  ) paren_close     : )
2439 0402 operator    .  ? logic_op        : ?
set_subtype [#] 0:undef
2440 0402 string      .    undef           : #
set_subtype [] 0:undef
set_subtype [:] 27:schar
2441 0402 sp_char     .  : schar           : :
set_subtype [//] 0:undef
2442 0402 string      .    undef           : //
set_subtype [,] 27:schar
2443 0402 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
2444 0402 name        .    name            : TokenSubtype
2445 0402 operator    . :: scope_op        : ::
set_subtype [LINE_COMMENT] 1:name
2446 0402 name        .    name            : LINE_COMMENT
set_subtype [)] 34:paren_close
2447 0402 block       .  ) paren_close     : )
set_subtype [;] 27:schar
2448 0402 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
2449 0403 block       .  } brace_close     : }
2450 0404 comment     . // line_comment    : // 여러줄 주석
set_subtype [if] 2:keyword
2451 0405 name        .    keyword         : if
set_subtype [(] 33:paren_open
2452 0405 block       .  ( paren_open      : (
set_subtype [c] 1:name
2453 0405 name        .    name            : c
2454 0405 operator    . == relation_op     : ==
set_subtype [/] 0:undef
2455 0405 string      .    undef           : /
2456 0405 operator    . && logic_op        : &&
set_subtype [npeek] 1:name
2457 0405 name        .    name            : npeek
set_subtype [(] 33:paren_open
2458 0405 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2459 0405 block       .  ) paren_close     : )
2460 0405 operator    . == relation_op     : ==
set_subtype [*] 0:undef
2461 0405 string      .    undef           : *
set_subtype [)] 34:paren_close
2462 0405 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2463 0405 block       .  { brace_open      : {
set_subtype [str] 1:name
2464 0406 name        .    name            : str
2465 0406 operator    . += assign_op       : +=
set_subtype [advance] 1:name
2466 0406 name        .    name            : advance
set_subtype [(] 33:paren_open
2467 0406 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2468 0406 block       .  ) paren_close     : )
set_subtype [;] 27:schar
2469 0406 sp_char     .  ; schar           : ;
set_subtype [str] 1:name
2470 0407 name        .    name            : str
2471 0407 operator    . += assign_op       : +=
set_subtype [advance] 1:name
2472 0407 name        .    name            : advance
set_subtype [(] 33:paren_open
2473 0407 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2474 0407 block       .  ) paren_close     : )
set_subtype [;] 27:schar
2475 0407 sp_char     .  ; schar           : ;
set_subtype [while] 2:keyword
2476 0409 name        .    keyword         : while
set_subtype [(] 33:paren_open
2477 0409 block       .  ( paren_open      : (
set_subtype [m_pos] 1:name
2478 0409 name        .    name            : m_pos
set_subtype [<] 39:angle_bracket_open
2479 0409 block       .  < angle_bracket_open : <
set_subtype [m_str] 1:name
2480 0409 name        .    name            : m_str
set_subtype [.] 27:schar
2481 0409 sp_char     .  . schar           : .
set_subtype [length] 1:name
2482 0409 name        .    name            : length
set_subtype [(] 33:paren_open
2483 0409 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2484 0409 block       .  ) paren_close     : )
2485 0409 operator    . && logic_op        : &&
2486 0409 operator    .  ! logic_op        : !
set_subtype [(] 33:paren_open
2487 0409 block       .  ( paren_open      : (
set_subtype [peek] 1:name
2488 0409 name        .    name            : peek
set_subtype [(] 33:paren_open
2489 0409 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2490 0409 block       .  ) paren_close     : )
2491 0409 operator    . == relation_op     : ==
set_subtype [*] 0:undef
2492 0409 string      .    undef           : *
2493 0409 operator    . && logic_op        : &&
set_subtype [npeek] 1:name
2494 0409 name        .    name            : npeek
set_subtype [(] 33:paren_open
2495 0409 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2496 0409 block       .  ) paren_close     : )
2497 0409 operator    . == relation_op     : ==
set_subtype [/] 0:undef
2498 0409 string      .    undef           : /
set_subtype [)] 34:paren_close
2499 0409 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
2500 0409 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2501 0409 block       .  { brace_open      : {
set_subtype [str] 1:name
2502 0410 name        .    name            : str
2503 0410 operator    . += assign_op       : +=
set_subtype [advance] 1:name
2504 0410 name        .    name            : advance
set_subtype [(] 33:paren_open
2505 0410 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2506 0410 block       .  ) paren_close     : )
set_subtype [;] 27:schar
2507 0410 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
2508 0411 block       .  } brace_close     : }
set_subtype [if] 2:keyword
2509 0412 name        .    keyword         : if
set_subtype [(] 33:paren_open
2510 0412 block       .  ( paren_open      : (
set_subtype [(] 33:paren_open
2511 0412 block       .  ( paren_open      : (
set_subtype [m_pos] 1:name
2512 0412 name        .    name            : m_pos
2513 0412 operator    .  + arthmetic_op    : +
2514 0412 number      .  d integer         : 1
set_subtype [)] 34:paren_close
2515 0412 block       .  ) paren_close     : )
set_subtype [<] 39:angle_bracket_open
2516 0412 block       .  < angle_bracket_open : <
set_subtype [m_str] 1:name
2517 0412 name        .    name            : m_str
set_subtype [.] 27:schar
2518 0412 sp_char     .  . schar           : .
set_subtype [length] 1:name
2519 0412 name        .    name            : length
set_subtype [(] 33:paren_open
2520 0412 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2521 0412 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
2522 0412 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2523 0412 block       .  { brace_open      : {
set_subtype [str] 1:name
2524 0413 name        .    name            : str
2525 0413 operator    . += assign_op       : +=
set_subtype [advance] 1:name
2526 0413 name        .    name            : advance
set_subtype [(] 33:paren_open
2527 0413 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2528 0413 block       .  ) paren_close     : )
set_subtype [;] 27:schar
2529 0413 sp_char     .  ; schar           : ;
set_subtype [str] 1:name
2530 0414 name        .    name            : str
2531 0414 operator    . += assign_op       : +=
set_subtype [advance] 1:name
2532 0414 name        .    name            : advance
set_subtype [(] 33:paren_open
2533 0414 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2534 0414 block       .  ) paren_close     : )
set_subtype [;] 27:schar
2535 0414 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
2536 0415 block       .  } brace_close     : }
set_subtype [return] 2:keyword
2537 0417 name        .    keyword         : return
set_subtype [Token] 1:name
2538 0417 name        .    name            : Token
set_subtype [(] 33:paren_open
2539 0417 block       .  ( paren_open      : (
set_subtype [TokenType] 1:name
2540 0417 name        .    name            : TokenType
2541 0417 operator    . :: scope_op        : ::
set_subtype [COMMENT] 1:name
2542 0417 name        .    name            : COMMENT
set_subtype [,] 27:schar
2543 0417 sp_char     .  , schar           : ,
set_subtype [str] 1:name
2544 0417 name        .    name            : str
set_subtype [,] 27:schar
2545 0417 sp_char     .  , schar           : ,
set_subtype [start_line] 1:name
2546 0417 name        .    name            : start_line
set_subtype [,] 27:schar
2547 0417 sp_char     .  , schar           : ,
set_subtype [start_col] 1:name
2548 0417 name        .    name            : start_col
set_subtype [,] 27:schar
2549 0417 sp_char     .  , schar           : ,
set_subtype [/*] 0:undef
2550 0417 string      .    undef           : /*
set_subtype [,] 27:schar
2551 0417 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
2552 0417 name        .    name            : TokenSubtype
2553 0417 operator    . :: scope_op        : ::
set_subtype [BLOCK_COMMENT] 1:name
2554 0417 name        .    name            : BLOCK_COMMENT
set_subtype [)] 34:paren_close
2555 0417 block       .  ) paren_close     : )
set_subtype [;] 27:schar
2556 0417 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
2557 0418 block       .  } brace_close     : }
set_subtype [throw] 2:keyword
2558 0419 name        .    keyword         : throw
set_subtype [std] 1:name
2559 0419 name        .    name            : std
2560 0419 operator    . :: scope_op        : ::
set_subtype [runtime_error] 1:name
2561 0419 name        .    name            : runtime_error
set_subtype [(] 33:paren_open
2562 0419 block       .  ( paren_open      : (
set_subtype [not comment [] 0:undef
2563 0419 string      .    undef           : not comment [
2564 0419 operator    .  + arthmetic_op    : +
set_subtype [std] 1:name
2565 0419 name        .    name            : std
2566 0419 operator    . :: scope_op        : ::
set_subtype [to_string] 1:name
2567 0419 name        .    name            : to_string
set_subtype [(] 33:paren_open
2568 0419 block       .  ( paren_open      : (
set_subtype [start_col] 1:name
2569 0419 name        .    name            : start_col
set_subtype [)] 34:paren_close
2570 0419 block       .  ) paren_close     : )
2571 0419 operator    .  + arthmetic_op    : +
set_subtype []] 0:undef
2572 0419 string      .    undef           : ]
set_subtype [)] 34:paren_close
2573 0419 block       .  ) paren_close     : )
set_subtype [;] 27:schar
2574 0419 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
2575 0420 block       .  } brace_close     : }
set_subtype [Token] 1:name
2576 0423 name        .    name            : Token
set_subtype [Lexer] 1:name
2577 0423 name        .    name            : Lexer
2578 0423 operator    . :: scope_op        : ::
set_subtype [parseNumber] 1:name
2579 0423 name        .    name            : parseNumber
set_subtype [(] 33:paren_open
2580 0423 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2581 0423 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2582 0423 block       .  { brace_open      : {
set_subtype [std] 1:name
2583 0424 name        .    name            : std
2584 0424 operator    . :: scope_op        : ::
set_subtype [string] 1:name
2585 0424 name        .    name            : string
set_subtype [str] 1:name
2586 0424 name        .    name            : str
set_subtype [;] 27:schar
2587 0424 sp_char     .  ; schar           : ;
set_subtype [char] 4:dattype
2588 0425 name        .    dattype         : char
set_subtype [ch] 1:name
2589 0425 name        .    name            : ch
2590 0425 operator    .  = assign_op       : =
set_subtype [peek] 1:name
2591 0425 name        .    name            : peek
set_subtype [(] 33:paren_open
2592 0425 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2593 0425 block       .  ) paren_close     : )
set_subtype [;] 27:schar
2594 0425 sp_char     .  ; schar           : ;
set_subtype [char] 4:dattype
2595 0426 name        .    dattype         : char
set_subtype [nh] 1:name
2596 0426 name        .    name            : nh
2597 0426 operator    .  = assign_op       : =
set_subtype [npeek] 1:name
2598 0426 name        .    name            : npeek
set_subtype [(] 33:paren_open
2599 0426 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2600 0426 block       .  ) paren_close     : )
set_subtype [;] 27:schar
2601 0426 sp_char     .  ; schar           : ;
set_subtype [Token] 1:name
2602 0427 name        .    name            : Token
set_subtype [tok] 1:name
2603 0427 name        .    name            : tok
set_subtype [;] 27:schar
2604 0427 sp_char     .  ; schar           : ;
set_subtype [tok] 1:name
2605 0429 name        .    name            : tok
set_subtype [.] 27:schar
2606 0429 sp_char     .  . schar           : .
set_subtype [type] 1:name
2607 0429 name        .    name            : type
2608 0429 operator    .  = assign_op       : =
set_subtype [TokenType] 1:name
2609 0429 name        .    name            : TokenType
2610 0429 operator    . :: scope_op        : ::
set_subtype [NUMBER] 1:name
2611 0429 name        .    name            : NUMBER
set_subtype [;] 27:schar
2612 0429 sp_char     .  ; schar           : ;
set_subtype [tok] 1:name
2613 0430 name        .    name            : tok
set_subtype [.] 27:schar
2614 0430 sp_char     .  . schar           : .
set_subtype [typestr] 1:name
2615 0430 name        .    name            : typestr
2616 0430 operator    .  = assign_op       : =
set_subtype [d] 0:undef
2617 0430 string      .    undef           : d
set_subtype [;] 27:schar
2618 0430 sp_char     .  ; schar           : ;
set_subtype [tok] 1:name
2619 0431 name        .    name            : tok
set_subtype [.] 27:schar
2620 0431 sp_char     .  . schar           : .
set_subtype [subtype] 1:name
2621 0431 name        .    name            : subtype
2622 0431 operator    .  = assign_op       : =
set_subtype [TokenSubtype] 1:name
2623 0431 name        .    name            : TokenSubtype
2624 0431 operator    . :: scope_op        : ::
set_subtype [INTEGER] 1:name
2625 0431 name        .    name            : INTEGER
set_subtype [;] 27:schar
2626 0431 sp_char     .  ; schar           : ;
set_subtype [tok] 1:name
2627 0432 name        .    name            : tok
set_subtype [.] 27:schar
2628 0432 sp_char     .  . schar           : .
set_subtype [line] 1:name
2629 0432 name        .    name            : line
2630 0432 operator    .  = assign_op       : =
set_subtype [m_line] 1:name
2631 0432 name        .    name            : m_line
set_subtype [;] 27:schar
2632 0432 sp_char     .  ; schar           : ;
set_subtype [tok] 1:name
2633 0433 name        .    name            : tok
set_subtype [.] 27:schar
2634 0433 sp_char     .  . schar           : .
set_subtype [column] 1:name
2635 0433 name        .    name            : column
2636 0433 operator    .  = assign_op       : =
set_subtype [m_column] 1:name
2637 0433 name        .    name            : m_column
set_subtype [;] 27:schar
2638 0433 sp_char     .  ; schar           : ;
set_subtype [if] 2:keyword
2639 0436 name        .    keyword         : if
set_subtype [(] 33:paren_open
2640 0436 block       .  ( paren_open      : (
set_subtype [ch] 1:name
2641 0436 name        .    name            : ch
2642 0436 operator    . == relation_op     : ==
set_subtype [0] 0:undef
2643 0436 string      .    undef           : 0
2644 0436 operator    . && logic_op        : &&
set_subtype [(] 33:paren_open
2645 0436 block       .  ( paren_open      : (
set_subtype [nh] 1:name
2646 0436 name        .    name            : nh
2647 0436 operator    . == relation_op     : ==
set_subtype [b] 0:undef
2648 0436 string      .    undef           : b
2649 0436 operator    . || logic_op        : ||
set_subtype [nh] 1:name
2650 0436 name        .    name            : nh
2651 0436 operator    . == relation_op     : ==
set_subtype [x] 0:undef
2652 0436 string      .    undef           : x
2653 0436 operator    . || logic_op        : ||
set_subtype [(] 33:paren_open
2654 0436 block       .  ( paren_open      : (
set_subtype [nh] 1:name
2655 0436 name        .    name            : nh
set_subtype [>] 40:angle_bracket_close
2656 0436 block       .  > angle_bracket_close : >
2657 0436 operator    .  = assign_op       : =
set_subtype [0] 0:undef
2658 0436 string      .    undef           : 0
2659 0436 operator    . && logic_op        : &&
set_subtype [nh] 1:name
2660 0436 name        .    name            : nh
set_subtype [<] 39:angle_bracket_open
2661 0436 block       .  < angle_bracket_open : <
2662 0436 operator    .  = assign_op       : =
set_subtype [7] 0:undef
2663 0436 string      .    undef           : 7
set_subtype [)] 34:paren_close
2664 0436 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
2665 0436 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
2666 0436 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2667 0436 block       .  { brace_open      : {
set_subtype [tok] 1:name
2668 0437 name        .    name            : tok
set_subtype [.] 27:schar
2669 0437 sp_char     .  . schar           : .
set_subtype [value] 1:name
2670 0437 name        .    name            : value
2671 0437 operator    . += assign_op       : +=
set_subtype [advance] 1:name
2672 0437 name        .    name            : advance
set_subtype [(] 33:paren_open
2673 0437 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2674 0437 block       .  ) paren_close     : )
set_subtype [;] 27:schar
2675 0437 sp_char     .  ; schar           : ;
set_subtype [if] 2:keyword
2676 0439 name        .    keyword         : if
set_subtype [(] 33:paren_open
2677 0439 block       .  ( paren_open      : (
set_subtype [nh] 1:name
2678 0439 name        .    name            : nh
2679 0439 operator    . == relation_op     : ==
set_subtype [x] 0:undef
2680 0439 string      .    undef           : x
set_subtype [)] 34:paren_close
2681 0439 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2682 0439 block       .  { brace_open      : {
2683 0439 comment     . // line_comment    : // hexa
set_subtype [tok] 1:name
2684 0440 name        .    name            : tok
set_subtype [.] 27:schar
2685 0440 sp_char     .  . schar           : .
set_subtype [typestr] 1:name
2686 0440 name        .    name            : typestr
2687 0440 operator    .  = assign_op       : =
set_subtype [x] 0:undef
2688 0440 string      .    undef           : x
set_subtype [;] 27:schar
2689 0440 sp_char     .  ; schar           : ;
set_subtype [tok] 1:name
2690 0441 name        .    name            : tok
set_subtype [.] 27:schar
2691 0441 sp_char     .  . schar           : .
set_subtype [value] 1:name
2692 0441 name        .    name            : value
2693 0441 operator    . += assign_op       : +=
set_subtype [advance] 1:name
2694 0441 name        .    name            : advance
set_subtype [(] 33:paren_open
2695 0441 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2696 0441 block       .  ) paren_close     : )
set_subtype [;] 27:schar
2697 0441 sp_char     .  ; schar           : ;
set_subtype [tok] 1:name
2698 0442 name        .    name            : tok
set_subtype [.] 27:schar
2699 0442 sp_char     .  . schar           : .
set_subtype [subtype] 1:name
2700 0442 name        .    name            : subtype
2701 0442 operator    .  = assign_op       : =
set_subtype [TokenSubtype] 1:name
2702 0442 name        .    name            : TokenSubtype
2703 0442 operator    . :: scope_op        : ::
set_subtype [HEX_NUM] 1:name
2704 0442 name        .    name            : HEX_NUM
set_subtype [;] 27:schar
2705 0442 sp_char     .  ; schar           : ;
set_subtype [while] 2:keyword
2706 0444 name        .    keyword         : while
set_subtype [(] 33:paren_open
2707 0444 block       .  ( paren_open      : (
set_subtype [m_pos] 1:name
2708 0444 name        .    name            : m_pos
set_subtype [<] 39:angle_bracket_open
2709 0444 block       .  < angle_bracket_open : <
set_subtype [m_str] 1:name
2710 0444 name        .    name            : m_str
set_subtype [.] 27:schar
2711 0444 sp_char     .  . schar           : .
set_subtype [length] 1:name
2712 0444 name        .    name            : length
set_subtype [(] 33:paren_open
2713 0444 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2714 0444 block       .  ) paren_close     : )
2715 0444 operator    . && logic_op        : &&
set_subtype [std] 1:name
2716 0444 name        .    name            : std
2717 0444 operator    . :: scope_op        : ::
set_subtype [isxdigit] 1:name
2718 0444 name        .    name            : isxdigit
set_subtype [(] 33:paren_open
2719 0444 block       .  ( paren_open      : (
set_subtype [peek] 1:name
2720 0444 name        .    name            : peek
set_subtype [(] 33:paren_open
2721 0444 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2722 0444 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
2723 0444 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
2724 0444 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2725 0444 block       .  { brace_open      : {
set_subtype [tok] 1:name
2726 0445 name        .    name            : tok
set_subtype [.] 27:schar
2727 0445 sp_char     .  . schar           : .
set_subtype [value] 1:name
2728 0445 name        .    name            : value
2729 0445 operator    . += assign_op       : +=
set_subtype [advance] 1:name
2730 0445 name        .    name            : advance
set_subtype [(] 33:paren_open
2731 0445 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2732 0445 block       .  ) paren_close     : )
set_subtype [;] 27:schar
2733 0445 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
2734 0446 block       .  } brace_close     : }
set_subtype [}] 36:brace_close
2735 0448 block       .  } brace_close     : }
set_subtype [else] 2:keyword
2736 0448 name        .    keyword         : else
set_subtype [if] 2:keyword
2737 0448 name        .    keyword         : if
set_subtype [(] 33:paren_open
2738 0448 block       .  ( paren_open      : (
set_subtype [nh] 1:name
2739 0448 name        .    name            : nh
2740 0448 operator    . == relation_op     : ==
set_subtype [b] 0:undef
2741 0448 string      .    undef           : b
set_subtype [)] 34:paren_close
2742 0448 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2743 0448 block       .  { brace_open      : {
2744 0448 comment     . // line_comment    : // bin
set_subtype [tok] 1:name
2745 0449 name        .    name            : tok
set_subtype [.] 27:schar
2746 0449 sp_char     .  . schar           : .
set_subtype [typestr] 1:name
2747 0449 name        .    name            : typestr
2748 0449 operator    .  = assign_op       : =
set_subtype [b] 0:undef
2749 0449 string      .    undef           : b
set_subtype [;] 27:schar
2750 0449 sp_char     .  ; schar           : ;
set_subtype [tok] 1:name
2751 0450 name        .    name            : tok
set_subtype [.] 27:schar
2752 0450 sp_char     .  . schar           : .
set_subtype [value] 1:name
2753 0450 name        .    name            : value
2754 0450 operator    . += assign_op       : +=
set_subtype [advance] 1:name
2755 0450 name        .    name            : advance
set_subtype [(] 33:paren_open
2756 0450 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2757 0450 block       .  ) paren_close     : )
set_subtype [;] 27:schar
2758 0450 sp_char     .  ; schar           : ;
set_subtype [tok] 1:name
2759 0451 name        .    name            : tok
set_subtype [.] 27:schar
2760 0451 sp_char     .  . schar           : .
set_subtype [subtype] 1:name
2761 0451 name        .    name            : subtype
2762 0451 operator    .  = assign_op       : =
set_subtype [TokenSubtype] 1:name
2763 0451 name        .    name            : TokenSubtype
2764 0451 operator    . :: scope_op        : ::
set_subtype [BIN_NUM] 1:name
2765 0451 name        .    name            : BIN_NUM
set_subtype [;] 27:schar
2766 0451 sp_char     .  ; schar           : ;
set_subtype [while] 2:keyword
2767 0453 name        .    keyword         : while
set_subtype [(] 33:paren_open
2768 0453 block       .  ( paren_open      : (
set_subtype [m_pos] 1:name
2769 0453 name        .    name            : m_pos
set_subtype [<] 39:angle_bracket_open
2770 0453 block       .  < angle_bracket_open : <
set_subtype [m_str] 1:name
2771 0453 name        .    name            : m_str
set_subtype [.] 27:schar
2772 0453 sp_char     .  . schar           : .
set_subtype [length] 1:name
2773 0453 name        .    name            : length
set_subtype [(] 33:paren_open
2774 0453 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2775 0453 block       .  ) paren_close     : )
2776 0453 operator    . && logic_op        : &&
set_subtype [(] 33:paren_open
2777 0453 block       .  ( paren_open      : (
set_subtype [peek] 1:name
2778 0453 name        .    name            : peek
set_subtype [(] 33:paren_open
2779 0453 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2780 0453 block       .  ) paren_close     : )
2781 0453 operator    . == relation_op     : ==
set_subtype [0] 0:undef
2782 0453 string      .    undef           : 0
2783 0453 operator    . || logic_op        : ||
set_subtype [peek] 1:name
2784 0453 name        .    name            : peek
set_subtype [(] 33:paren_open
2785 0453 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2786 0453 block       .  ) paren_close     : )
2787 0453 operator    . == relation_op     : ==
set_subtype [1] 0:undef
2788 0453 string      .    undef           : 1
set_subtype [)] 34:paren_close
2789 0453 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
2790 0453 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2791 0453 block       .  { brace_open      : {
set_subtype [tok] 1:name
2792 0454 name        .    name            : tok
set_subtype [.] 27:schar
2793 0454 sp_char     .  . schar           : .
set_subtype [value] 1:name
2794 0454 name        .    name            : value
2795 0454 operator    . += assign_op       : +=
set_subtype [advance] 1:name
2796 0454 name        .    name            : advance
set_subtype [(] 33:paren_open
2797 0454 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2798 0454 block       .  ) paren_close     : )
set_subtype [;] 27:schar
2799 0454 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
2800 0455 block       .  } brace_close     : }
set_subtype [}] 36:brace_close
2801 0456 block       .  } brace_close     : }
set_subtype [else] 2:keyword
2802 0456 name        .    keyword         : else
set_subtype [{] 35:brace_open
2803 0456 block       .  { brace_open      : {
2804 0456 comment     . // line_comment    : // octal
set_subtype [tok] 1:name
2805 0457 name        .    name            : tok
set_subtype [.] 27:schar
2806 0457 sp_char     .  . schar           : .
set_subtype [typestr] 1:name
2807 0457 name        .    name            : typestr
2808 0457 operator    .  = assign_op       : =
set_subtype [o] 0:undef
2809 0457 string      .    undef           : o
set_subtype [;] 27:schar
2810 0457 sp_char     .  ; schar           : ;
set_subtype [tok] 1:name
2811 0458 name        .    name            : tok
set_subtype [.] 27:schar
2812 0458 sp_char     .  . schar           : .
set_subtype [subtype] 1:name
2813 0458 name        .    name            : subtype
2814 0458 operator    .  = assign_op       : =
set_subtype [TokenSubtype] 1:name
2815 0458 name        .    name            : TokenSubtype
2816 0458 operator    . :: scope_op        : ::
set_subtype [OCT_NUM] 1:name
2817 0458 name        .    name            : OCT_NUM
set_subtype [;] 27:schar
2818 0458 sp_char     .  ; schar           : ;
set_subtype [while] 2:keyword
2819 0460 name        .    keyword         : while
set_subtype [(] 33:paren_open
2820 0460 block       .  ( paren_open      : (
set_subtype [m_pos] 1:name
2821 0460 name        .    name            : m_pos
set_subtype [<] 39:angle_bracket_open
2822 0460 block       .  < angle_bracket_open : <
set_subtype [m_str] 1:name
2823 0460 name        .    name            : m_str
set_subtype [.] 27:schar
2824 0460 sp_char     .  . schar           : .
set_subtype [length] 1:name
2825 0460 name        .    name            : length
set_subtype [(] 33:paren_open
2826 0460 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2827 0460 block       .  ) paren_close     : )
2828 0460 operator    . && logic_op        : &&
set_subtype [(] 33:paren_open
2829 0460 block       .  ( paren_open      : (
set_subtype [peek] 1:name
2830 0460 name        .    name            : peek
set_subtype [(] 33:paren_open
2831 0460 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2832 0460 block       .  ) paren_close     : )
set_subtype [>] 40:angle_bracket_close
2833 0460 block       .  > angle_bracket_close : >
2834 0460 operator    .  = assign_op       : =
set_subtype [0] 0:undef
2835 0460 string      .    undef           : 0
2836 0460 operator    . && logic_op        : &&
set_subtype [peek] 1:name
2837 0460 name        .    name            : peek
set_subtype [(] 33:paren_open
2838 0460 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2839 0460 block       .  ) paren_close     : )
set_subtype [<] 39:angle_bracket_open
2840 0460 block       .  < angle_bracket_open : <
2841 0460 operator    .  = assign_op       : =
set_subtype [7] 0:undef
2842 0460 string      .    undef           : 7
set_subtype [)] 34:paren_close
2843 0460 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
2844 0460 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2845 0460 block       .  { brace_open      : {
set_subtype [tok] 1:name
2846 0461 name        .    name            : tok
set_subtype [.] 27:schar
2847 0461 sp_char     .  . schar           : .
set_subtype [value] 1:name
2848 0461 name        .    name            : value
2849 0461 operator    . += assign_op       : +=
set_subtype [advance] 1:name
2850 0461 name        .    name            : advance
set_subtype [(] 33:paren_open
2851 0461 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2852 0461 block       .  ) paren_close     : )
set_subtype [;] 27:schar
2853 0461 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
2854 0462 block       .  } brace_close     : }
set_subtype [}] 36:brace_close
2855 0463 block       .  } brace_close     : }
set_subtype [}] 36:brace_close
2856 0464 block       .  } brace_close     : }
set_subtype [else] 2:keyword
2857 0464 name        .    keyword         : else
set_subtype [{] 35:brace_open
2858 0464 block       .  { brace_open      : {
set_subtype [while] 2:keyword
2859 0465 name        .    keyword         : while
set_subtype [(] 33:paren_open
2860 0465 block       .  ( paren_open      : (
set_subtype [m_pos] 1:name
2861 0465 name        .    name            : m_pos
set_subtype [<] 39:angle_bracket_open
2862 0465 block       .  < angle_bracket_open : <
set_subtype [m_str] 1:name
2863 0465 name        .    name            : m_str
set_subtype [.] 27:schar
2864 0465 sp_char     .  . schar           : .
set_subtype [length] 1:name
2865 0465 name        .    name            : length
set_subtype [(] 33:paren_open
2866 0465 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2867 0465 block       .  ) paren_close     : )
2868 0465 operator    . && logic_op        : &&
set_subtype [std] 1:name
2869 0465 name        .    name            : std
2870 0465 operator    . :: scope_op        : ::
set_subtype [isdigit] 1:name
2871 0465 name        .    name            : isdigit
set_subtype [(] 33:paren_open
2872 0465 block       .  ( paren_open      : (
set_subtype [peek] 1:name
2873 0465 name        .    name            : peek
set_subtype [(] 33:paren_open
2874 0465 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2875 0465 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
2876 0465 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
2877 0465 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2878 0465 block       .  { brace_open      : {
set_subtype [tok] 1:name
2879 0466 name        .    name            : tok
set_subtype [.] 27:schar
2880 0466 sp_char     .  . schar           : .
set_subtype [value] 1:name
2881 0466 name        .    name            : value
2882 0466 operator    . += assign_op       : +=
set_subtype [advance] 1:name
2883 0466 name        .    name            : advance
set_subtype [(] 33:paren_open
2884 0466 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2885 0466 block       .  ) paren_close     : )
set_subtype [;] 27:schar
2886 0466 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
2887 0467 block       .  } brace_close     : }
set_subtype [if] 2:keyword
2888 0469 name        .    keyword         : if
set_subtype [(] 33:paren_open
2889 0469 block       .  ( paren_open      : (
set_subtype [peek] 1:name
2890 0469 name        .    name            : peek
set_subtype [(] 33:paren_open
2891 0469 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2892 0469 block       .  ) paren_close     : )
2893 0469 operator    . == relation_op     : ==
set_subtype [.] 0:undef
2894 0469 string      .    undef           : .
set_subtype [)] 34:paren_close
2895 0469 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2896 0469 block       .  { brace_open      : {
2897 0469 comment     . // line_comment    : // float
set_subtype [tok] 1:name
2898 0470 name        .    name            : tok
set_subtype [.] 27:schar
2899 0470 sp_char     .  . schar           : .
set_subtype [value] 1:name
2900 0470 name        .    name            : value
2901 0470 operator    . += assign_op       : +=
set_subtype [advance] 1:name
2902 0470 name        .    name            : advance
set_subtype [(] 33:paren_open
2903 0470 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2904 0470 block       .  ) paren_close     : )
set_subtype [;] 27:schar
2905 0470 sp_char     .  ; schar           : ;
set_subtype [tok] 1:name
2906 0471 name        .    name            : tok
set_subtype [.] 27:schar
2907 0471 sp_char     .  . schar           : .
set_subtype [typestr] 1:name
2908 0471 name        .    name            : typestr
2909 0471 operator    .  = assign_op       : =
set_subtype [f] 0:undef
2910 0471 string      .    undef           : f
set_subtype [;] 27:schar
2911 0471 sp_char     .  ; schar           : ;
set_subtype [tok] 1:name
2912 0472 name        .    name            : tok
set_subtype [.] 27:schar
2913 0472 sp_char     .  . schar           : .
set_subtype [subtype] 1:name
2914 0472 name        .    name            : subtype
2915 0472 operator    .  = assign_op       : =
set_subtype [TokenSubtype] 1:name
2916 0472 name        .    name            : TokenSubtype
2917 0472 operator    . :: scope_op        : ::
set_subtype [FLOAT] 1:name
2918 0472 name        .    name            : FLOAT
set_subtype [;] 27:schar
2919 0472 sp_char     .  ; schar           : ;
set_subtype [while] 2:keyword
2920 0474 name        .    keyword         : while
set_subtype [(] 33:paren_open
2921 0474 block       .  ( paren_open      : (
set_subtype [m_pos] 1:name
2922 0474 name        .    name            : m_pos
set_subtype [<] 39:angle_bracket_open
2923 0474 block       .  < angle_bracket_open : <
set_subtype [m_str] 1:name
2924 0474 name        .    name            : m_str
set_subtype [.] 27:schar
2925 0474 sp_char     .  . schar           : .
set_subtype [length] 1:name
2926 0474 name        .    name            : length
set_subtype [(] 33:paren_open
2927 0474 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2928 0474 block       .  ) paren_close     : )
2929 0474 operator    . && logic_op        : &&
set_subtype [std] 1:name
2930 0474 name        .    name            : std
2931 0474 operator    . :: scope_op        : ::
set_subtype [isdigit] 1:name
2932 0474 name        .    name            : isdigit
set_subtype [(] 33:paren_open
2933 0474 block       .  ( paren_open      : (
set_subtype [peek] 1:name
2934 0474 name        .    name            : peek
set_subtype [(] 33:paren_open
2935 0474 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2936 0474 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
2937 0474 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
2938 0474 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2939 0474 block       .  { brace_open      : {
set_subtype [tok] 1:name
2940 0475 name        .    name            : tok
set_subtype [.] 27:schar
2941 0475 sp_char     .  . schar           : .
set_subtype [value] 1:name
2942 0475 name        .    name            : value
2943 0475 operator    . += assign_op       : +=
set_subtype [advance] 1:name
2944 0475 name        .    name            : advance
set_subtype [(] 33:paren_open
2945 0475 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2946 0475 block       .  ) paren_close     : )
set_subtype [;] 27:schar
2947 0475 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
2948 0476 block       .  } brace_close     : }
set_subtype [}] 36:brace_close
2949 0477 block       .  } brace_close     : }
set_subtype [}] 36:brace_close
2950 0478 block       .  } brace_close     : }
set_subtype [return] 2:keyword
2951 0480 name        .    keyword         : return
set_subtype [Token] 1:name
2952 0480 name        .    name            : Token
set_subtype [(] 33:paren_open
2953 0480 block       .  ( paren_open      : (
set_subtype [tok] 1:name
2954 0480 name        .    name            : tok
set_subtype [)] 34:paren_close
2955 0480 block       .  ) paren_close     : )
set_subtype [;] 27:schar
2956 0480 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
2957 0481 block       .  } brace_close     : }
set_subtype [Token] 1:name
2958 0483 name        .    name            : Token
set_subtype [Lexer] 1:name
2959 0483 name        .    name            : Lexer
2960 0483 operator    . :: scope_op        : ::
set_subtype [parseName] 1:name
2961 0483 name        .    name            : parseName
set_subtype [(] 33:paren_open
2962 0483 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2963 0483 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
2964 0483 block       .  { brace_open      : {
set_subtype [int] 4:dattype
2965 0484 name        .    dattype         : int
set_subtype [start_col] 1:name
2966 0484 name        .    name            : start_col
2967 0484 operator    .  = assign_op       : =
set_subtype [m_column] 1:name
2968 0484 name        .    name            : m_column
set_subtype [;] 27:schar
2969 0484 sp_char     .  ; schar           : ;
set_subtype [std] 1:name
2970 0485 name        .    name            : std
2971 0485 operator    . :: scope_op        : ::
set_subtype [string] 1:name
2972 0485 name        .    name            : string
set_subtype [ident_str] 1:name
2973 0485 name        .    name            : ident_str
set_subtype [;] 27:schar
2974 0485 sp_char     .  ; schar           : ;
set_subtype [while] 2:keyword
2975 0486 name        .    keyword         : while
set_subtype [(] 33:paren_open
2976 0486 block       .  ( paren_open      : (
set_subtype [m_pos] 1:name
2977 0486 name        .    name            : m_pos
set_subtype [<] 39:angle_bracket_open
2978 0486 block       .  < angle_bracket_open : <
set_subtype [m_str] 1:name
2979 0486 name        .    name            : m_str
set_subtype [.] 27:schar
2980 0486 sp_char     .  . schar           : .
set_subtype [length] 1:name
2981 0486 name        .    name            : length
set_subtype [(] 33:paren_open
2982 0486 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2983 0486 block       .  ) paren_close     : )
2984 0486 operator    . && logic_op        : &&
set_subtype [(] 33:paren_open
2985 0486 block       .  ( paren_open      : (
set_subtype [std] 1:name
2986 0486 name        .    name            : std
2987 0486 operator    . :: scope_op        : ::
set_subtype [isalnum] 1:name
2988 0486 name        .    name            : isalnum
set_subtype [(] 33:paren_open
2989 0486 block       .  ( paren_open      : (
set_subtype [peek] 1:name
2990 0486 name        .    name            : peek
set_subtype [(] 33:paren_open
2991 0486 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2992 0486 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
2993 0486 block       .  ) paren_close     : )
2994 0486 operator    . || logic_op        : ||
set_subtype [peek] 1:name
2995 0486 name        .    name            : peek
set_subtype [(] 33:paren_open
2996 0486 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
2997 0486 block       .  ) paren_close     : )
2998 0486 operator    . == relation_op     : ==
set_subtype [_] 0:undef
2999 0486 string      .    undef           : _
set_subtype [)] 34:paren_close
3000 0486 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
3001 0486 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3002 0486 block       .  { brace_open      : {
set_subtype [ident_str] 1:name
3003 0487 name        .    name            : ident_str
3004 0487 operator    . += assign_op       : +=
set_subtype [advance] 1:name
3005 0487 name        .    name            : advance
set_subtype [(] 33:paren_open
3006 0487 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3007 0487 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3008 0487 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
3009 0488 block       .  } brace_close     : }
set_subtype [return] 2:keyword
3010 0490 name        .    keyword         : return
set_subtype [Token] 1:name
3011 0490 name        .    name            : Token
set_subtype [(] 33:paren_open
3012 0490 block       .  ( paren_open      : (
set_subtype [TokenType] 1:name
3013 0490 name        .    name            : TokenType
3014 0490 operator    . :: scope_op        : ::
set_subtype [NAME] 1:name
3015 0490 name        .    name            : NAME
set_subtype [,] 27:schar
3016 0490 sp_char     .  , schar           : ,
set_subtype [ident_str] 1:name
3017 0490 name        .    name            : ident_str
set_subtype [,] 27:schar
3018 0490 sp_char     .  , schar           : ,
set_subtype [m_line] 1:name
3019 0490 name        .    name            : m_line
set_subtype [,] 27:schar
3020 0490 sp_char     .  , schar           : ,
set_subtype [start_col] 1:name
3021 0490 name        .    name            : start_col
set_subtype [)] 34:paren_close
3022 0490 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3023 0490 sp_char     .  ; schar           : ;
3024 0490 comment     . // line_comment    : // 식별자 토큰
set_subtype [}] 36:brace_close
3025 0491 block       .  } brace_close     : }
set_subtype [Token] 1:name
3026 0493 name        .    name            : Token
set_subtype [Lexer] 1:name
3027 0493 name        .    name            : Lexer
3028 0493 operator    . :: scope_op        : ::
set_subtype [parseOperator] 1:name
3029 0493 name        .    name            : parseOperator
set_subtype [(] 33:paren_open
3030 0493 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3031 0493 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3032 0493 block       .  { brace_open      : {
set_subtype [int] 4:dattype
3033 0494 name        .    dattype         : int
set_subtype [start_col] 1:name
3034 0494 name        .    name            : start_col
3035 0494 operator    .  = assign_op       : =
set_subtype [m_column] 1:name
3036 0494 name        .    name            : m_column
set_subtype [;] 27:schar
3037 0494 sp_char     .  ; schar           : ;
set_subtype [char] 4:dattype
3038 0495 name        .    dattype         : char
set_subtype [ch] 1:name
3039 0495 name        .    name            : ch
3040 0495 operator    .  = assign_op       : =
set_subtype [peek] 1:name
3041 0495 name        .    name            : peek
set_subtype [(] 33:paren_open
3042 0495 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3043 0495 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3044 0495 sp_char     .  ; schar           : ;
set_subtype [char] 4:dattype
3045 0496 name        .    dattype         : char
set_subtype [nh] 1:name
3046 0496 name        .    name            : nh
3047 0496 operator    .  = assign_op       : =
set_subtype [npeek] 1:name
3048 0496 name        .    name            : npeek
set_subtype [(] 33:paren_open
3049 0496 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3050 0496 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3051 0496 sp_char     .  ; schar           : ;
set_subtype [if] 2:keyword
3052 0498 name        .    keyword         : if
set_subtype [(] 33:paren_open
3053 0498 block       .  ( paren_open      : (
set_subtype [(] 33:paren_open
3054 0498 block       .  ( paren_open      : (
set_subtype [ch] 1:name
3055 0498 name        .    name            : ch
3056 0498 operator    . == relation_op     : ==
set_subtype [+] 0:undef
3057 0498 string      .    undef           : +
3058 0498 operator    . || logic_op        : ||
set_subtype [ch] 1:name
3059 0498 name        .    name            : ch
3060 0498 operator    . == relation_op     : ==
set_subtype [-] 0:undef
3061 0498 string      .    undef           : -
set_subtype [)] 34:paren_close
3062 0498 block       .  ) paren_close     : )
3063 0498 operator    . && logic_op        : &&
set_subtype [(] 33:paren_open
3064 0498 block       .  ( paren_open      : (
set_subtype [std] 1:name
3065 0498 name        .    name            : std
3066 0498 operator    . :: scope_op        : ::
set_subtype [isalnum] 1:name
3067 0498 name        .    name            : isalnum
set_subtype [(] 33:paren_open
3068 0498 block       .  ( paren_open      : (
set_subtype [nh] 1:name
3069 0498 name        .    name            : nh
set_subtype [)] 34:paren_close
3070 0498 block       .  ) paren_close     : )
3071 0498 operator    . || logic_op        : ||
set_subtype [nh] 1:name
3072 0498 name        .    name            : nh
3073 0498 operator    . == relation_op     : ==
set_subtype [_] 0:undef
3074 0498 string      .    undef           : _
set_subtype [)] 34:paren_close
3075 0498 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
3076 0498 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3077 0498 block       .  { brace_open      : {
set_subtype [m_column] 1:name
3078 0499 name        .    name            : m_column
3079 0499 operator    . ++ incre_op        : ++
set_subtype [;] 27:schar
3080 0499 sp_char     .  ; schar           : ;
set_subtype [m_pos] 1:name
3081 0500 name        .    name            : m_pos
3082 0500 operator    . ++ incre_op        : ++
set_subtype [;] 27:schar
3083 0500 sp_char     .  ; schar           : ;
set_subtype [Token] 1:name
3084 0501 name        .    name            : Token
set_subtype [(] 33:paren_open
3085 0501 block       .  ( paren_open      : (
set_subtype [TokenType] 1:name
3086 0501 name        .    name            : TokenType
3087 0501 operator    . :: scope_op        : ::
set_subtype [OPERATOR] 1:name
3088 0501 name        .    name            : OPERATOR
set_subtype [,] 27:schar
3089 0501 sp_char     .  , schar           : ,
set_subtype [std] 1:name
3090 0501 name        .    name            : std
3091 0501 operator    . :: scope_op        : ::
set_subtype [string] 1:name
3092 0501 name        .    name            : string
set_subtype [(] 33:paren_open
3093 0501 block       .  ( paren_open      : (
3094 0501 number      .  d integer         : 1
set_subtype [,] 27:schar
3095 0501 sp_char     .  , schar           : ,
set_subtype [ch] 1:name
3096 0501 name        .    name            : ch
set_subtype [)] 34:paren_close
3097 0501 block       .  ) paren_close     : )
set_subtype [,] 27:schar
3098 0501 sp_char     .  , schar           : ,
set_subtype [m_line] 1:name
3099 0501 name        .    name            : m_line
set_subtype [,] 27:schar
3100 0501 sp_char     .  , schar           : ,
set_subtype [start_col] 1:name
3101 0501 name        .    name            : start_col
set_subtype [,] 27:schar
3102 0501 sp_char     .  , schar           : ,
set_subtype [std] 1:name
3103 0501 name        .    name            : std
3104 0501 operator    . :: scope_op        : ::
set_subtype [string] 1:name
3105 0501 name        .    name            : string
set_subtype [(] 33:paren_open
3106 0501 block       .  ( paren_open      : (
3107 0501 number      .  d integer         : 1
set_subtype [,] 27:schar
3108 0501 sp_char     .  , schar           : ,
set_subtype [ch] 1:name
3109 0501 name        .    name            : ch
set_subtype [)] 34:paren_close
3110 0501 block       .  ) paren_close     : )
set_subtype [,] 27:schar
3111 0501 sp_char     .  , schar           : ,
set_subtype [TokenSubtype] 1:name
3112 0501 name        .    name            : TokenSubtype
3113 0501 operator    . :: scope_op        : ::
set_subtype [UNARY_OP] 1:name
3114 0501 name        .    name            : UNARY_OP
set_subtype [)] 34:paren_close
3115 0501 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3116 0501 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
3117 0502 block       .  } brace_close     : }
set_subtype [std] 1:name
3118 0503 name        .    name            : std
3119 0503 operator    . :: scope_op        : ::
set_subtype [string] 1:name
3120 0503 name        .    name            : string
set_subtype [str] 1:name
3121 0503 name        .    name            : str
set_subtype [;] 27:schar
3122 0503 sp_char     .  ; schar           : ;
3123 0505 comment     . // line_comment    : // m_strs + m_pos; 으로부터 연속되는 연산자를 (최대 3개까지) 가져옴 <- __operator_chars
3124 0506 comment     . // line_comment    : // check =+, =-, ::<, |+,....
3125 0507 comment     . // line_comment    : // opierators_subtype에 있는지 차례로 찾음 (map}
set_subtype [int] 4:dattype
3126 0509 name        .    dattype         : int
set_subtype [len] 1:name
3127 0509 name        .    name            : len
3128 0509 operator    .  = assign_op       : =
3129 0509 number      .  d integer         : 0
set_subtype [;] 27:schar
3130 0509 sp_char     .  ; schar           : ;
set_subtype [TokenSubtype] 1:name
3131 0510 name        .    name            : TokenSubtype
set_subtype [st] 1:name
3132 0510 name        .    name            : st
set_subtype [;] 27:schar
3133 0510 sp_char     .  ; schar           : ;
set_subtype [for] 2:keyword
3134 0511 name        .    keyword         : for
set_subtype [(] 33:paren_open
3135 0511 block       .  ( paren_open      : (
set_subtype [size_t] 1:name
3136 0511 name        .    name            : size_t
set_subtype [ix] 1:name
3137 0511 name        .    name            : ix
3138 0511 operator    .  = assign_op       : =
set_subtype [m_pos] 1:name
3139 0511 name        .    name            : m_pos
set_subtype [;] 27:schar
3140 0511 sp_char     .  ; schar           : ;
set_subtype [(] 33:paren_open
3141 0511 block       .  ( paren_open      : (
set_subtype [ix] 1:name
3142 0511 name        .    name            : ix
set_subtype [<] 39:angle_bracket_open
3143 0511 block       .  < angle_bracket_open : <
set_subtype [m_str] 1:name
3144 0511 name        .    name            : m_str
set_subtype [.] 27:schar
3145 0511 sp_char     .  . schar           : .
set_subtype [length] 1:name
3146 0511 name        .    name            : length
set_subtype [(] 33:paren_open
3147 0511 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3148 0511 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
3149 0511 block       .  ) paren_close     : )
3150 0511 operator    . && logic_op        : &&
set_subtype [strchr] 1:name
3151 0511 name        .    name            : strchr
set_subtype [(] 33:paren_open
3152 0511 block       .  ( paren_open      : (
set_subtype [__operator_chars] 1:name
3153 0511 name        .    name            : __operator_chars
set_subtype [,] 27:schar
3154 0511 sp_char     .  , schar           : ,
set_subtype [(] 33:paren_open
3155 0511 block       .  ( paren_open      : (
set_subtype [int] 4:dattype
3156 0511 name        .    dattype         : int
set_subtype [)] 34:paren_close
3157 0511 block       .  ) paren_close     : )
set_subtype [m_str] 1:name
3158 0511 name        .    name            : m_str
set_subtype [[] 37:square_bracket_open
3159 0511 block       .  [ square_bracket_open : [
set_subtype [ix] 1:name
3160 0511 name        .    name            : ix
set_subtype []] 38:square_bracket_close
3161 0511 block       .  ] square_bracket_close : ]
set_subtype [)] 34:paren_close
3162 0511 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3163 0511 sp_char     .  ; schar           : ;
set_subtype [ix] 1:name
3164 0511 name        .    name            : ix
3165 0511 operator    . ++ incre_op        : ++
set_subtype [)] 34:paren_close
3166 0511 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3167 0511 block       .  { brace_open      : {
set_subtype [str] 1:name
3168 0512 name        .    name            : str
3169 0512 operator    . += assign_op       : +=
set_subtype [m_str] 1:name
3170 0512 name        .    name            : m_str
set_subtype [[] 37:square_bracket_open
3171 0512 block       .  [ square_bracket_open : [
set_subtype [ix] 1:name
3172 0512 name        .    name            : ix
set_subtype []] 38:square_bracket_close
3173 0512 block       .  ] square_bracket_close : ]
set_subtype [;] 27:schar
3174 0512 sp_char     .  ; schar           : ;
set_subtype [len] 1:name
3175 0513 name        .    name            : len
3176 0513 operator    . ++ incre_op        : ++
set_subtype [;] 27:schar
3177 0513 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
3178 0514 block       .  } brace_close     : }
set_subtype [for] 2:keyword
3179 0516 name        .    keyword         : for
set_subtype [(] 33:paren_open
3180 0516 block       .  ( paren_open      : (
set_subtype [;] 27:schar
3181 0516 sp_char     .  ; schar           : ;
set_subtype [(] 33:paren_open
3182 0516 block       .  ( paren_open      : (
set_subtype [len] 1:name
3183 0516 name        .    name            : len
set_subtype [>] 40:angle_bracket_close
3184 0516 block       .  > angle_bracket_close : >
3185 0516 number      .  d integer         : 0
set_subtype [)] 34:paren_close
3186 0516 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3187 0516 sp_char     .  ; schar           : ;
set_subtype [len] 1:name
3188 0516 name        .    name            : len
3189 0516 operator    . -- incre_op        : --
set_subtype [)] 34:paren_close
3190 0516 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3191 0516 block       .  { brace_open      : {
set_subtype [auto] 2:keyword
3192 0517 name        .    keyword         : auto
set_subtype [it] 1:name
3193 0517 name        .    name            : it
3194 0517 operator    .  = assign_op       : =
set_subtype [operators_subtype] 1:name
3195 0517 name        .    name            : operators_subtype
set_subtype [.] 27:schar
3196 0517 sp_char     .  . schar           : .
set_subtype [find] 1:name
3197 0517 name        .    name            : find
set_subtype [(] 33:paren_open
3198 0517 block       .  ( paren_open      : (
set_subtype [str] 1:name
3199 0517 name        .    name            : str
set_subtype [)] 34:paren_close
3200 0517 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3201 0517 sp_char     .  ; schar           : ;
set_subtype [if] 2:keyword
3202 0518 name        .    keyword         : if
set_subtype [(] 33:paren_open
3203 0518 block       .  ( paren_open      : (
set_subtype [it] 1:name
3204 0518 name        .    name            : it
3205 0518 operator    . != relation_op     : !=
set_subtype [operators_subtype] 1:name
3206 0518 name        .    name            : operators_subtype
set_subtype [.] 27:schar
3207 0518 sp_char     .  . schar           : .
set_subtype [end] 1:name
3208 0518 name        .    name            : end
set_subtype [(] 33:paren_open
3209 0518 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3210 0518 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
3211 0518 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3212 0518 block       .  { brace_open      : {
set_subtype [st] 1:name
3213 0520 name        .    name            : st
3214 0520 operator    .  = assign_op       : =
set_subtype [it] 1:name
3215 0520 name        .    name            : it
3216 0520 operator    . -> struct_op       : ->
set_subtype [second] 1:name
3217 0520 name        .    name            : second
set_subtype [;] 27:schar
3218 0520 sp_char     .  ; schar           : ;
set_subtype [m_column] 1:name
3219 0521 name        .    name            : m_column
3220 0521 operator    . += assign_op       : +=
set_subtype [len] 1:name
3221 0521 name        .    name            : len
set_subtype [;] 27:schar
3222 0521 sp_char     .  ; schar           : ;
set_subtype [m_pos] 1:name
3223 0522 name        .    name            : m_pos
3224 0522 operator    . += assign_op       : +=
set_subtype [len] 1:name
3225 0522 name        .    name            : len
set_subtype [;] 27:schar
3226 0522 sp_char     .  ; schar           : ;
set_subtype [return] 2:keyword
3227 0524 name        .    keyword         : return
set_subtype [Token] 1:name
3228 0524 name        .    name            : Token
set_subtype [(] 33:paren_open
3229 0524 block       .  ( paren_open      : (
set_subtype [TokenType] 1:name
3230 0524 name        .    name            : TokenType
3231 0524 operator    . :: scope_op        : ::
set_subtype [OPERATOR] 1:name
3232 0524 name        .    name            : OPERATOR
set_subtype [,] 27:schar
3233 0524 sp_char     .  , schar           : ,
set_subtype [str] 1:name
3234 0524 name        .    name            : str
set_subtype [,] 27:schar
3235 0524 sp_char     .  , schar           : ,
set_subtype [m_line] 1:name
3236 0524 name        .    name            : m_line
set_subtype [,] 27:schar
3237 0524 sp_char     .  , schar           : ,
set_subtype [start_col] 1:name
3238 0524 name        .    name            : start_col
set_subtype [,] 27:schar
3239 0524 sp_char     .  , schar           : ,
set_subtype [str] 1:name
3240 0524 name        .    name            : str
set_subtype [,] 27:schar
3241 0524 sp_char     .  , schar           : ,
set_subtype [st] 1:name
3242 0524 name        .    name            : st
set_subtype [)] 34:paren_close
3243 0524 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3244 0524 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
3245 0525 block       .  } brace_close     : }
set_subtype [str] 1:name
3246 0526 name        .    name            : str
set_subtype [.] 27:schar
3247 0526 sp_char     .  . schar           : .
set_subtype [pop_back] 1:name
3248 0526 name        .    name            : pop_back
set_subtype [(] 33:paren_open
3249 0526 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3250 0526 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3251 0526 sp_char     .  ; schar           : ;
3252 0526 comment     . // line_comment    : // str.resize(str.length()-1)
set_subtype [}] 36:brace_close
3253 0527 block       .  } brace_close     : }
3254 0528 comment     . // line_comment    : // Error not operator
set_subtype [return] 2:keyword
3255 0529 name        .    keyword         : return
set_subtype [Token] 1:name
3256 0529 name        .    name            : Token
set_subtype [(] 33:paren_open
3257 0529 block       .  ( paren_open      : (
set_subtype [TokenType] 1:name
3258 0529 name        .    name            : TokenType
3259 0529 operator    . :: scope_op        : ::
set_subtype [UNDEF] 1:name
3260 0529 name        .    name            : UNDEF
set_subtype [,] 27:schar
3261 0529 sp_char     .  , schar           : ,
set_subtype [] 0:undef
3262 0529 string      .    undef           : 
set_subtype [,] 27:schar
3263 0529 sp_char     .  , schar           : ,
3264 0529 number      .  d integer         : 0
set_subtype [,] 27:schar
3265 0529 sp_char     .  , schar           : ,
3266 0529 number      .  d integer         : 0
set_subtype [)] 34:paren_close
3267 0529 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3268 0529 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
3269 0530 block       .  } brace_close     : }
set_subtype [Token] 1:name
3270 0532 name        .    name            : Token
set_subtype [Lexer] 1:name
3271 0532 name        .    name            : Lexer
3272 0532 operator    . :: scope_op        : ::
set_subtype [parseBlock] 1:name
3273 0532 name        .    name            : parseBlock
set_subtype [(] 33:paren_open
3274 0532 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3275 0532 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3276 0532 block       .  { brace_open      : {
set_subtype [int] 4:dattype
3277 0533 name        .    dattype         : int
set_subtype [start_col] 1:name
3278 0533 name        .    name            : start_col
3279 0533 operator    .  = assign_op       : =
set_subtype [m_column] 1:name
3280 0533 name        .    name            : m_column
set_subtype [;] 27:schar
3281 0533 sp_char     .  ; schar           : ;
set_subtype [char] 4:dattype
3282 0534 name        .    dattype         : char
set_subtype [quote_char] 1:name
3283 0534 name        .    name            : quote_char
3284 0534 operator    .  = assign_op       : =
set_subtype [peek] 1:name
3285 0534 name        .    name            : peek
set_subtype [(] 33:paren_open
3286 0534 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3287 0534 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3288 0534 sp_char     .  ; schar           : ;
3289 0534 comment     . // line_comment    : // advance(); // 
set_subtype [if] 2:keyword
3290 0536 name        .    keyword         : if
set_subtype [(] 33:paren_open
3291 0536 block       .  ( paren_open      : (
3292 0536 operator    .  ! logic_op        : !
set_subtype [is_block_char] 1:name
3293 0536 name        .    name            : is_block_char
set_subtype [(] 33:paren_open
3294 0536 block       .  ( paren_open      : (
set_subtype [quote_char] 1:name
3295 0536 name        .    name            : quote_char
set_subtype [)] 34:paren_close
3296 0536 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
3297 0536 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3298 0536 block       .  { brace_open      : {
set_subtype [throw] 2:keyword
3299 0537 name        .    keyword         : throw
set_subtype [std] 1:name
3300 0537 name        .    name            : std
3301 0537 operator    . :: scope_op        : ::
set_subtype [runtime_error] 1:name
3302 0537 name        .    name            : runtime_error
set_subtype [(] 33:paren_open
3303 0537 block       .  ( paren_open      : (
set_subtype [Unterminated string literal at line ] 0:undef
3304 0537 string      .    undef           : Unterminated string literal at line 
3305 0537 operator    .  + arthmetic_op    : +
set_subtype [std] 1:name
3306 0537 name        .    name            : std
3307 0537 operator    . :: scope_op        : ::
set_subtype [to_string] 1:name
3308 0537 name        .    name            : to_string
set_subtype [(] 33:paren_open
3309 0537 block       .  ( paren_open      : (
set_subtype [m_line] 1:name
3310 0537 name        .    name            : m_line
set_subtype [)] 34:paren_close
3311 0537 block       .  ) paren_close     : )
3312 0537 operator    .  + arthmetic_op    : +
set_subtype [, column ] 0:undef
3313 0537 string      .    undef           : , column 
3314 0537 operator    .  + arthmetic_op    : +
set_subtype [std] 1:name
3315 0537 name        .    name            : std
3316 0537 operator    . :: scope_op        : ::
set_subtype [to_string] 1:name
3317 0537 name        .    name            : to_string
set_subtype [(] 33:paren_open
3318 0537 block       .  ( paren_open      : (
set_subtype [start_col] 1:name
3319 0537 name        .    name            : start_col
set_subtype [)] 34:paren_close
3320 0537 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
3321 0537 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3322 0537 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
3323 0538 block       .  } brace_close     : }
set_subtype [char] 4:dattype
3324 0539 name        .    dattype         : char
set_subtype [end_char] 1:name
3325 0539 name        .    name            : end_char
3326 0539 operator    .  = assign_op       : =
set_subtype [(] 33:paren_open
3327 0539 block       .  ( paren_open      : (
set_subtype [quote_char] 1:name
3328 0539 name        .    name            : quote_char
3329 0539 operator    . == relation_op     : ==
set_subtype [(] 0:undef
3330 0539 string      .    undef           : (
set_subtype [)] 34:paren_close
3331 0539 block       .  ) paren_close     : )
3332 0539 operator    .  ? logic_op        : ?
set_subtype [)] 0:undef
3333 0539 string      .    undef           : )
set_subtype [] 0:undef
set_subtype [:] 27:schar
3334 0539 sp_char     .  : schar           : :
set_subtype [(] 33:paren_open
3335 0540 block       .  ( paren_open      : (
set_subtype [quote_char] 1:name
3336 0540 name        .    name            : quote_char
3337 0540 operator    . == relation_op     : ==
set_subtype [{] 0:undef
3338 0540 string      .    undef           : {
set_subtype [)] 34:paren_close
3339 0540 block       .  ) paren_close     : )
3340 0540 operator    .  ? logic_op        : ?
set_subtype [}] 0:undef
3341 0540 string      .    undef           : }
set_subtype [] 0:undef
set_subtype [:] 27:schar
3342 0540 sp_char     .  : schar           : :
set_subtype [(] 33:paren_open
3343 0541 block       .  ( paren_open      : (
set_subtype [quote_char] 1:name
3344 0541 name        .    name            : quote_char
3345 0541 operator    . == relation_op     : ==
set_subtype [[] 0:undef
3346 0541 string      .    undef           : [
set_subtype [)] 34:paren_close
3347 0541 block       .  ) paren_close     : )
3348 0541 operator    .  ? logic_op        : ?
set_subtype []] 0:undef
3349 0541 string      .    undef           : ]
set_subtype [] 0:undef
set_subtype [:] 27:schar
3350 0541 sp_char     .  : schar           : :
set_subtype [>] 0:undef
3351 0541 string      .    undef           : >
set_subtype [;] 27:schar
3352 0541 sp_char     .  ; schar           : ;
set_subtype [std] 1:name
3353 0543 name        .    name            : std
3354 0543 operator    . :: scope_op        : ::
set_subtype [string] 1:name
3355 0543 name        .    name            : string
set_subtype [str_val] 1:name
3356 0543 name        .    name            : str_val
set_subtype [;] 27:schar
3357 0543 sp_char     .  ; schar           : ;
set_subtype [while] 2:keyword
3358 0544 name        .    keyword         : while
set_subtype [(] 33:paren_open
3359 0544 block       .  ( paren_open      : (
set_subtype [m_pos] 1:name
3360 0544 name        .    name            : m_pos
set_subtype [<] 39:angle_bracket_open
3361 0544 block       .  < angle_bracket_open : <
set_subtype [m_str] 1:name
3362 0544 name        .    name            : m_str
set_subtype [.] 27:schar
3363 0544 sp_char     .  . schar           : .
set_subtype [length] 1:name
3364 0544 name        .    name            : length
set_subtype [(] 33:paren_open
3365 0544 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3366 0544 block       .  ) paren_close     : )
3367 0544 operator    . && logic_op        : &&
set_subtype [peek] 1:name
3368 0544 name        .    name            : peek
set_subtype [(] 33:paren_open
3369 0544 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3370 0544 block       .  ) paren_close     : )
3371 0544 operator    . != relation_op     : !=
set_subtype [end_char] 1:name
3372 0544 name        .    name            : end_char
set_subtype [)] 34:paren_close
3373 0544 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3374 0544 block       .  { brace_open      : {
set_subtype [str_val] 1:name
3375 0545 name        .    name            : str_val
3376 0545 operator    . += assign_op       : +=
set_subtype [advance] 1:name
3377 0545 name        .    name            : advance
set_subtype [(] 33:paren_open
3378 0545 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3379 0545 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3380 0545 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
3381 0546 block       .  } brace_close     : }
set_subtype [str_val] 1:name
3382 0547 name        .    name            : str_val
3383 0547 operator    . += assign_op       : +=
set_subtype [advance] 1:name
3384 0547 name        .    name            : advance
set_subtype [(] 33:paren_open
3385 0547 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3386 0547 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3387 0547 sp_char     .  ; schar           : ;
3388 0547 comment     . // line_comment    : // end_char  
set_subtype [return] 2:keyword
3389 0548 name        .    keyword         : return
set_subtype [Token] 1:name
3390 0548 name        .    name            : Token
set_subtype [(] 33:paren_open
3391 0548 block       .  ( paren_open      : (
set_subtype [TokenType] 1:name
3392 0548 name        .    name            : TokenType
3393 0548 operator    . :: scope_op        : ::
set_subtype [BLOCK] 1:name
3394 0548 name        .    name            : BLOCK
set_subtype [,] 27:schar
3395 0548 sp_char     .  , schar           : ,
set_subtype [str_val] 1:name
3396 0548 name        .    name            : str_val
set_subtype [,] 27:schar
3397 0548 sp_char     .  , schar           : ,
set_subtype [m_line] 1:name
3398 0548 name        .    name            : m_line
set_subtype [,] 27:schar
3399 0548 sp_char     .  , schar           : ,
set_subtype [start_col] 1:name
3400 0548 name        .    name            : start_col
set_subtype [)] 34:paren_close
3401 0548 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3402 0548 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
3403 0549 block       .  } brace_close     : }
3404 0551 comment     . // line_comment    : // python """, '''
set_subtype [Token] 1:name
3405 0552 name        .    name            : Token
set_subtype [Lexer] 1:name
3406 0552 name        .    name            : Lexer
3407 0552 operator    . :: scope_op        : ::
set_subtype [parseString] 1:name
3408 0552 name        .    name            : parseString
set_subtype [(] 33:paren_open
3409 0552 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3410 0552 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3411 0552 block       .  { brace_open      : {
set_subtype [int] 4:dattype
3412 0553 name        .    dattype         : int
set_subtype [start_col] 1:name
3413 0553 name        .    name            : start_col
3414 0553 operator    .  = assign_op       : =
set_subtype [m_column] 1:name
3415 0553 name        .    name            : m_column
set_subtype [;] 27:schar
3416 0553 sp_char     .  ; schar           : ;
set_subtype [char] 4:dattype
3417 0554 name        .    dattype         : char
set_subtype [quote_char] 1:name
3418 0554 name        .    name            : quote_char
3419 0554 operator    .  = assign_op       : =
set_subtype [advance] 1:name
3420 0554 name        .    name            : advance
set_subtype [(] 33:paren_open
3421 0554 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3422 0554 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3423 0554 sp_char     .  ; schar           : ;
set_subtype [std] 1:name
3424 0556 name        .    name            : std
3425 0556 operator    . :: scope_op        : ::
set_subtype [string] 1:name
3426 0556 name        .    name            : string
set_subtype [str_val] 1:name
3427 0556 name        .    name            : str_val
set_subtype [;] 27:schar
3428 0556 sp_char     .  ; schar           : ;
set_subtype [char] 4:dattype
3429 0557 name        .    dattype         : char
set_subtype [ch] 1:name
3430 0557 name        .    name            : ch
set_subtype [;] 27:schar
3431 0557 sp_char     .  ; schar           : ;
set_subtype [while] 2:keyword
3432 0558 name        .    keyword         : while
set_subtype [(] 33:paren_open
3433 0558 block       .  ( paren_open      : (
set_subtype [m_pos] 1:name
3434 0558 name        .    name            : m_pos
set_subtype [<] 39:angle_bracket_open
3435 0558 block       .  < angle_bracket_open : <
set_subtype [m_str] 1:name
3436 0558 name        .    name            : m_str
set_subtype [.] 27:schar
3437 0558 sp_char     .  . schar           : .
set_subtype [length] 1:name
3438 0558 name        .    name            : length
set_subtype [(] 33:paren_open
3439 0558 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3440 0558 block       .  ) paren_close     : )
3441 0558 operator    . && logic_op        : &&
set_subtype [peek] 1:name
3442 0558 name        .    name            : peek
set_subtype [(] 33:paren_open
3443 0558 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3444 0558 block       .  ) paren_close     : )
3445 0558 operator    . != relation_op     : !=
set_subtype [quote_char] 1:name
3446 0558 name        .    name            : quote_char
set_subtype [)] 34:paren_close
3447 0558 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3448 0558 block       .  { brace_open      : {
set_subtype [ch] 1:name
3449 0559 name        .    name            : ch
3450 0559 operator    .  = assign_op       : =
set_subtype [advance] 1:name
3451 0559 name        .    name            : advance
set_subtype [(] 33:paren_open
3452 0559 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3453 0559 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3454 0559 sp_char     .  ; schar           : ;
set_subtype [str_val] 1:name
3455 0560 name        .    name            : str_val
3456 0560 operator    . += assign_op       : +=
set_subtype [ch] 1:name
3457 0560 name        .    name            : ch
set_subtype [;] 27:schar
3458 0560 sp_char     .  ; schar           : ;
set_subtype [if] 2:keyword
3459 0561 name        .    keyword         : if
set_subtype [(] 33:paren_open
3460 0561 block       .  ( paren_open      : (
set_subtype [ch] 1:name
3461 0561 name        .    name            : ch
3462 0561 operator    . == relation_op     : ==
set_subtype [\\] 0:undef
3463 0561 string      .    undef           : \\
set_subtype [)] 34:paren_close
3464 0561 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3465 0561 block       .  { brace_open      : {
set_subtype [str_val] 1:name
3466 0562 name        .    name            : str_val
3467 0562 operator    . += assign_op       : +=
set_subtype [advance] 1:name
3468 0562 name        .    name            : advance
set_subtype [(] 33:paren_open
3469 0562 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3470 0562 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3471 0562 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
3472 0563 block       .  } brace_close     : }
set_subtype [}] 36:brace_close
3473 0564 block       .  } brace_close     : }
set_subtype [advance] 1:name
3474 0565 name        .    name            : advance
set_subtype [(] 33:paren_open
3475 0565 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3476 0565 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3477 0565 sp_char     .  ; schar           : ;
set_subtype [return] 2:keyword
3478 0566 name        .    keyword         : return
set_subtype [Token] 1:name
3479 0566 name        .    name            : Token
set_subtype [(] 33:paren_open
3480 0566 block       .  ( paren_open      : (
set_subtype [TokenType] 1:name
3481 0566 name        .    name            : TokenType
3482 0566 operator    . :: scope_op        : ::
set_subtype [CONST] 1:name
3483 0566 name        .    name            : CONST
set_subtype [,] 27:schar
3484 0566 sp_char     .  , schar           : ,
set_subtype [str_val] 1:name
3485 0566 name        .    name            : str_val
set_subtype [,] 27:schar
3486 0566 sp_char     .  , schar           : ,
set_subtype [m_line] 1:name
3487 0566 name        .    name            : m_line
set_subtype [,] 27:schar
3488 0566 sp_char     .  , schar           : ,
set_subtype [start_col] 1:name
3489 0566 name        .    name            : start_col
set_subtype [)] 34:paren_close
3490 0566 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3491 0566 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
3492 0567 block       .  } brace_close     : }
set_subtype [bool] 4:dattype
3493 0569 name        .    dattype         : bool
set_subtype [comp_str_charp] 1:name
3494 0569 name        .    name            : comp_str_charp
set_subtype [(] 33:paren_open
3495 0569 block       .  ( paren_open      : (
set_subtype [const] 4:dattype
3496 0569 name        .    dattype         : const
set_subtype [std] 1:name
3497 0569 name        .    name            : std
3498 0569 operator    . :: scope_op        : ::
set_subtype [string] 1:name
3499 0569 name        .    name            : string
3500 0569 operator    .  & bitwise_op      : &
set_subtype [str] 1:name
3501 0569 name        .    name            : str
set_subtype [,] 27:schar
3502 0569 sp_char     .  , schar           : ,
set_subtype [size_t] 1:name
3503 0569 name        .    name            : size_t
set_subtype [at] 1:name
3504 0569 name        .    name            : at
set_subtype [,] 27:schar
3505 0569 sp_char     .  , schar           : ,
set_subtype [const] 4:dattype
3506 0569 name        .    dattype         : const
set_subtype [char] 4:dattype
3507 0569 name        .    dattype         : char
3508 0569 operator    .  * arthmetic_op    : *
set_subtype [chs] 1:name
3509 0569 name        .    name            : chs
set_subtype [)] 34:paren_close
3510 0569 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3511 0569 block       .  { brace_open      : {
3512 0570 comment     . // line_comment    : // 1. const char* (chs)의 nullptr 검사
set_subtype [if] 2:keyword
3513 0571 name        .    keyword         : if
set_subtype [(] 33:paren_open
3514 0571 block       .  ( paren_open      : (
set_subtype [chs] 1:name
3515 0571 name        .    name            : chs
3516 0571 operator    . == relation_op     : ==
set_subtype [nullptr] 1:name
3517 0571 name        .    name            : nullptr
set_subtype [)] 34:paren_close
3518 0571 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3519 0571 block       .  { brace_open      : {
set_subtype [return] 2:keyword
3520 0572 name        .    keyword         : return
set_subtype [false] 4:dattype
3521 0572 name        .    dattype         : false
set_subtype [;] 27:schar
3522 0572 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
3523 0573 block       .  } brace_close     : }
set_subtype [size_t] 1:name
3524 0575 name        .    name            : size_t
set_subtype [str_len] 1:name
3525 0575 name        .    name            : str_len
3526 0575 operator    .  = assign_op       : =
set_subtype [str] 1:name
3527 0575 name        .    name            : str
set_subtype [.] 27:schar
3528 0575 sp_char     .  . schar           : .
set_subtype [length] 1:name
3529 0575 name        .    name            : length
set_subtype [(] 33:paren_open
3530 0575 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3531 0575 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3532 0575 sp_char     .  ; schar           : ;
set_subtype [size_t] 1:name
3533 0576 name        .    name            : size_t
set_subtype [chs_len] 1:name
3534 0576 name        .    name            : chs_len
3535 0576 operator    .  = assign_op       : =
set_subtype [strlen] 1:name
3536 0576 name        .    name            : strlen
set_subtype [(] 33:paren_open
3537 0576 block       .  ( paren_open      : (
set_subtype [chs] 1:name
3538 0576 name        .    name            : chs
set_subtype [)] 34:paren_close
3539 0576 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3540 0576 sp_char     .  ; schar           : ;
3541 0578 comment     . // line_comment    : // 2. 비교하려는 범위가 원본 문자열의 경계를 벗어나는지 검사
3542 0579 comment     . // line_comment    : //    at이 str_len보다 크거나 같으면, 시작 위치 자체가 유효하지 않음
3543 0580 comment     . // line_comment    : //    (at + chs_len)이 str_len보다 크면, chs가 str의 끝을 넘어감
set_subtype [if] 2:keyword
3544 0581 name        .    keyword         : if
set_subtype [(] 33:paren_open
3545 0581 block       .  ( paren_open      : (
set_subtype [at] 1:name
3546 0581 name        .    name            : at
set_subtype [>] 40:angle_bracket_close
3547 0581 block       .  > angle_bracket_close : >
3548 0581 operator    .  = assign_op       : =
set_subtype [str_len] 1:name
3549 0581 name        .    name            : str_len
3550 0581 operator    . || logic_op        : ||
set_subtype [(] 33:paren_open
3551 0581 block       .  ( paren_open      : (
set_subtype [at] 1:name
3552 0581 name        .    name            : at
3553 0581 operator    .  + arthmetic_op    : +
set_subtype [chs_len] 1:name
3554 0581 name        .    name            : chs_len
set_subtype [)] 34:paren_close
3555 0581 block       .  ) paren_close     : )
set_subtype [>] 40:angle_bracket_close
3556 0581 block       .  > angle_bracket_close : >
set_subtype [str_len] 1:name
3557 0581 name        .    name            : str_len
set_subtype [)] 34:paren_close
3558 0581 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3559 0581 block       .  { brace_open      : {
set_subtype [return] 2:keyword
3560 0582 name        .    keyword         : return
set_subtype [false] 4:dattype
3561 0582 name        .    dattype         : false
set_subtype [;] 27:schar
3562 0582 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
3563 0583 block       .  } brace_close     : }
3564 0585 comment     . // line_comment    : // 3. std::string의 내부 데이터에 접근하기 위해 .data() 사용
3565 0586 comment     . // line_comment    : //    .data()는 C++11부터 null-terminated C-string을 반환함을 보장
set_subtype [const] 4:dattype
3566 0587 name        .    dattype         : const
set_subtype [char] 4:dattype
3567 0587 name        .    dattype         : char
3568 0587 operator    .  * arthmetic_op    : *
set_subtype [p_str] 1:name
3569 0587 name        .    name            : p_str
3570 0587 operator    .  = assign_op       : =
set_subtype [str] 1:name
3571 0587 name        .    name            : str
set_subtype [.] 27:schar
3572 0587 sp_char     .  . schar           : .
set_subtype [data] 1:name
3573 0587 name        .    name            : data
set_subtype [(] 33:paren_open
3574 0587 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3575 0587 block       .  ) paren_close     : )
3576 0587 operator    .  + arthmetic_op    : +
set_subtype [at] 1:name
3577 0587 name        .    name            : at
set_subtype [;] 27:schar
3578 0587 sp_char     .  ; schar           : ;
3579 0587 comment     . // line_comment    : // str의 시작 지점 + at 만큼 이동한 포인터
3580 0589 comment     . // line_comment    : // chs 문자열을 순회하기 위한 임시 포인터
set_subtype [const] 4:dattype
3581 0590 name        .    dattype         : const
set_subtype [char] 4:dattype
3582 0590 name        .    dattype         : char
3583 0590 operator    .  * arthmetic_op    : *
set_subtype [p_chs] 1:name
3584 0590 name        .    name            : p_chs
3585 0590 operator    .  = assign_op       : =
set_subtype [chs] 1:name
3586 0590 name        .    name            : chs
set_subtype [;] 27:schar
3587 0590 sp_char     .  ; schar           : ;
3588 0592 comment     . // line_comment    : // 4. 문자열 비교 루프
set_subtype [while] 2:keyword
3589 0593 name        .    keyword         : while
set_subtype [(] 33:paren_open
3590 0593 block       .  ( paren_open      : (
3591 0593 operator    .  * arthmetic_op    : *
set_subtype [p_chs] 1:name
3592 0593 name        .    name            : p_chs
3593 0593 operator    . != relation_op     : !=
set_subtype [\0] 0:undef
3594 0593 string      .    undef           : \0
set_subtype [)] 34:paren_close
3595 0593 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3596 0593 block       .  { brace_open      : {
3597 0593 comment     . // line_comment    : // chs의 끝(null-terminator)에 도달할 때까지
set_subtype [if] 2:keyword
3598 0594 name        .    keyword         : if
set_subtype [(] 33:paren_open
3599 0594 block       .  ( paren_open      : (
3600 0594 operator    .  * arthmetic_op    : *
set_subtype [p_str] 1:name
3601 0594 name        .    name            : p_str
3602 0594 operator    . != relation_op     : !=
3603 0594 operator    .  * arthmetic_op    : *
set_subtype [p_chs] 1:name
3604 0594 name        .    name            : p_chs
set_subtype [)] 34:paren_close
3605 0594 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3606 0594 block       .  { brace_open      : {
set_subtype [return] 2:keyword
3607 0595 name        .    keyword         : return
set_subtype [false] 4:dattype
3608 0595 name        .    dattype         : false
set_subtype [;] 27:schar
3609 0595 sp_char     .  ; schar           : ;
3610 0595 comment     . // line_comment    : // 문자가 다르면 바로 false 반환
set_subtype [}] 36:brace_close
3611 0596 block       .  } brace_close     : }
set_subtype [p_str] 1:name
3612 0597 name        .    name            : p_str
3613 0597 operator    . ++ incre_op        : ++
set_subtype [;] 27:schar
3614 0597 sp_char     .  ; schar           : ;
3615 0597 comment     . // line_comment    : // 다음 문자로 이동
set_subtype [p_chs] 1:name
3616 0598 name        .    name            : p_chs
3617 0598 operator    . ++ incre_op        : ++
set_subtype [;] 27:schar
3618 0598 sp_char     .  ; schar           : ;
3619 0598 comment     . // line_comment    : // 다음 문자로 이동
set_subtype [}] 36:brace_close
3620 0599 block       .  } brace_close     : }
set_subtype [return] 2:keyword
3621 0601 name        .    keyword         : return
set_subtype [true] 4:dattype
3622 0601 name        .    dattype         : true
set_subtype [;] 27:schar
3623 0601 sp_char     .  ; schar           : ;
3624 0601 comment     . // line_comment    : // 모든 문자가 일치했으므로 true 반환
set_subtype [}] 36:brace_close
3625 0602 block       .  } brace_close     : }
3626 0604 comment     . // line_comment    : ////////////////////////////////////////////////////////////////////////////////////
3627 0606 comment     .  # line_comment    : #include <stdio.h> // for static keywords map
set_subtype [Token] 1:name
3628 0607 name        .    name            : Token
set_subtype [Lexer] 1:name
3629 0607 name        .    name            : Lexer
3630 0607 operator    . :: scope_op        : ::
set_subtype [getToken] 1:name
3631 0607 name        .    name            : getToken
set_subtype [(] 33:paren_open
3632 0607 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3633 0607 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3634 0607 block       .  { brace_open      : {
set_subtype [skipWhitespace] 1:name
3635 0608 name        .    name            : skipWhitespace
set_subtype [(] 33:paren_open
3636 0608 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3637 0608 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3638 0608 sp_char     .  ; schar           : ;
3639 0608 comment     . // line_comment    : // 공백 무시
set_subtype [Token] 1:name
3640 0610 name        .    name            : Token
set_subtype [tok] 1:name
3641 0610 name        .    name            : tok
set_subtype [;] 27:schar
3642 0610 sp_char     .  ; schar           : ;
set_subtype [int] 4:dattype
3643 0611 name        .    dattype         : int
set_subtype [start_col] 1:name
3644 0611 name        .    name            : start_col
3645 0611 operator    .  = assign_op       : =
set_subtype [m_column] 1:name
3646 0611 name        .    name            : m_column
set_subtype [;] 27:schar
3647 0611 sp_char     .  ; schar           : ;
3648 0611 comment     . // line_comment    : // 토큰 시작 컬럼 저장
set_subtype [char] 4:dattype
3649 0612 name        .    dattype         : char
set_subtype [c] 1:name
3650 0612 name        .    name            : c
3651 0612 operator    .  = assign_op       : =
set_subtype [peek] 1:name
3652 0612 name        .    name            : peek
set_subtype [(] 33:paren_open
3653 0612 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3654 0612 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3655 0612 sp_char     .  ; schar           : ;
set_subtype [char] 4:dattype
3656 0613 name        .    dattype         : char
set_subtype [n] 1:name
3657 0613 name        .    name            : n
3658 0613 operator    .  = assign_op       : =
set_subtype [npeek] 1:name
3659 0613 name        .    name            : npeek
set_subtype [(] 33:paren_open
3660 0613 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3661 0613 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3662 0613 sp_char     .  ; schar           : ;
set_subtype [if] 2:keyword
3663 0615 name        .    keyword         : if
set_subtype [(] 33:paren_open
3664 0615 block       .  ( paren_open      : (
set_subtype [(] 33:paren_open
3665 0615 block       .  ( paren_open      : (
set_subtype [m_pos] 1:name
3666 0615 name        .    name            : m_pos
set_subtype [] 0:undef
set_subtype [] 0:undef
3667 0615 undef       .    undef           : 
3668 0615 number      .  d integer         : 1
set_subtype [)] 34:paren_close
3669 0615 block       .  ) paren_close     : )
set_subtype [>] 40:angle_bracket_close
3670 0615 block       .  > angle_bracket_close : >
set_subtype [m_str] 1:name
3671 0615 name        .    name            : m_str
set_subtype [.] 27:schar
3672 0615 sp_char     .  . schar           : .
set_subtype [length] 1:name
3673 0615 name        .    name            : length
set_subtype [(] 33:paren_open
3674 0615 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3675 0615 block       .  ) paren_close     : )
3676 0615 operator    . || logic_op        : ||
set_subtype [c] 1:name
3677 0615 name        .    name            : c
3678 0615 operator    . == relation_op     : ==
set_subtype [\0] 0:undef
3679 0615 string      .    undef           : \0
set_subtype [)] 34:paren_close
3680 0615 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3681 0615 block       .  { brace_open      : {
set_subtype [return] 2:keyword
3682 0616 name        .    keyword         : return
set_subtype [Token] 1:name
3683 0616 name        .    name            : Token
set_subtype [(] 33:paren_open
3684 0616 block       .  ( paren_open      : (
set_subtype [TokenType] 1:name
3685 0616 name        .    name            : TokenType
3686 0616 operator    . :: scope_op        : ::
set_subtype [END_OF_FILE] 1:name
3687 0616 name        .    name            : END_OF_FILE
set_subtype [,] 27:schar
3688 0616 sp_char     .  , schar           : ,
set_subtype [] 0:undef
3689 0616 string      .    undef           : 
set_subtype [,] 27:schar
3690 0616 sp_char     .  , schar           : ,
set_subtype [m_line] 1:name
3691 0616 name        .    name            : m_line
set_subtype [,] 27:schar
3692 0616 sp_char     .  , schar           : ,
set_subtype [m_column] 1:name
3693 0616 name        .    name            : m_column
set_subtype [)] 34:paren_close
3694 0616 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3695 0616 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
3696 0617 block       .  } brace_close     : }
set_subtype [if] 2:keyword
3697 0618 name        .    keyword         : if
set_subtype [(] 33:paren_open
3698 0618 block       .  ( paren_open      : (
set_subtype [c] 1:name
3699 0618 name        .    name            : c
3700 0618 operator    . == relation_op     : ==
set_subtype [\\] 0:undef
3701 0618 string      .    undef           : \\
set_subtype [)] 34:paren_close
3702 0618 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3703 0618 block       .  { brace_open      : {
set_subtype [std] 1:name
3704 0619 name        .    name            : std
3705 0619 operator    . :: scope_op        : ::
set_subtype [string] 1:name
3706 0619 name        .    name            : string
set_subtype [sval] 1:name
3707 0619 name        .    name            : sval
set_subtype [;] 27:schar
3708 0619 sp_char     .  ; schar           : ;
set_subtype [sval] 1:name
3709 0620 name        .    name            : sval
3710 0620 operator    . += assign_op       : +=
set_subtype [c] 1:name
3711 0620 name        .    name            : c
set_subtype [;] 27:schar
3712 0620 sp_char     .  ; schar           : ;
set_subtype [sval] 1:name
3713 0621 name        .    name            : sval
3714 0621 operator    . += assign_op       : +=
set_subtype [npeek] 1:name
3715 0621 name        .    name            : npeek
set_subtype [(] 33:paren_open
3716 0621 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3717 0621 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3718 0621 sp_char     .  ; schar           : ;
set_subtype [m_column] 1:name
3719 0622 name        .    name            : m_column
3720 0622 operator    . += assign_op       : +=
3721 0622 number      .  d integer         : 2
set_subtype [;] 27:schar
3722 0622 sp_char     .  ; schar           : ;
set_subtype [m_pos] 1:name
3723 0623 name        .    name            : m_pos
3724 0623 operator    . += assign_op       : +=
3725 0623 number      .  d integer         : 2
set_subtype [;] 27:schar
3726 0623 sp_char     .  ; schar           : ;
set_subtype [return] 2:keyword
3727 0624 name        .    keyword         : return
set_subtype [Token] 1:name
3728 0624 name        .    name            : Token
set_subtype [(] 33:paren_open
3729 0624 block       .  ( paren_open      : (
set_subtype [TokenType] 1:name
3730 0624 name        .    name            : TokenType
3731 0624 operator    . :: scope_op        : ::
set_subtype [SCHAR] 1:name
3732 0624 name        .    name            : SCHAR
set_subtype [,] 27:schar
3733 0624 sp_char     .  , schar           : ,
set_subtype [sval] 1:name
3734 0624 name        .    name            : sval
set_subtype [,] 27:schar
3735 0624 sp_char     .  , schar           : ,
set_subtype [m_line] 1:name
3736 0624 name        .    name            : m_line
set_subtype [,] 27:schar
3737 0624 sp_char     .  , schar           : ,
set_subtype [start_col] 1:name
3738 0624 name        .    name            : start_col
set_subtype [)] 34:paren_close
3739 0624 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3740 0624 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
3741 0625 block       .  } brace_close     : }
3742 0626 comment     . // line_comment    : //  if( is_comment_char(c) ) {
set_subtype [if] 2:keyword
3743 0628 name        .    keyword         : if
set_subtype [(] 33:paren_open
3744 0628 block       .  ( paren_open      : (
set_subtype [(] 33:paren_open
3745 0628 block       .  ( paren_open      : (
set_subtype [c] 1:name
3746 0628 name        .    name            : c
3747 0628 operator    . == relation_op     : ==
set_subtype [#] 0:undef
3748 0628 string      .    undef           : #
set_subtype [)] 34:paren_close
3749 0628 block       .  ) paren_close     : )
3750 0629 operator    . || logic_op        : ||
set_subtype [(] 33:paren_open
3751 0629 block       .  ( paren_open      : (
set_subtype [c] 1:name
3752 0629 name        .    name            : c
3753 0629 operator    . == relation_op     : ==
set_subtype [/] 0:undef
3754 0629 string      .    undef           : /
3755 0629 operator    . && logic_op        : &&
set_subtype [n] 1:name
3756 0629 name        .    name            : n
3757 0629 operator    . == relation_op     : ==
set_subtype [/] 0:undef
3758 0629 string      .    undef           : /
set_subtype [)] 34:paren_close
3759 0629 block       .  ) paren_close     : )
3760 0630 operator    . || logic_op        : ||
set_subtype [(] 33:paren_open
3761 0630 block       .  ( paren_open      : (
set_subtype [c] 1:name
3762 0630 name        .    name            : c
3763 0630 operator    . == relation_op     : ==
set_subtype [/] 0:undef
3764 0630 string      .    undef           : /
3765 0630 operator    . && logic_op        : &&
set_subtype [n] 1:name
3766 0630 name        .    name            : n
3767 0630 operator    . == relation_op     : ==
set_subtype [*] 0:undef
3768 0630 string      .    undef           : *
set_subtype [)] 34:paren_close
3769 0630 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
3770 0630 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3771 0630 block       .  { brace_open      : {
set_subtype [return] 2:keyword
3772 0632 name        .    keyword         : return
set_subtype [parseComment] 1:name
3773 0632 name        .    name            : parseComment
set_subtype [(] 33:paren_open
3774 0632 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3775 0632 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3776 0632 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
3777 0633 block       .  } brace_close     : }
set_subtype [if] 2:keyword
3778 0634 name        .    keyword         : if
set_subtype [(] 33:paren_open
3779 0634 block       .  ( paren_open      : (
set_subtype [c] 1:name
3780 0634 name        .    name            : c
3781 0634 operator    . == relation_op     : ==
set_subtype [\"] 0:undef
3782 0634 string      .    undef           : \"
3783 0634 operator    . || logic_op        : ||
set_subtype [c] 1:name
3784 0634 name        .    name            : c
3785 0634 operator    . == relation_op     : ==
set_subtype [\'] 0:undef
3786 0634 string      .    undef           : \'
3787 0634 operator    . || logic_op        : ||
set_subtype [c] 1:name
3788 0634 name        .    name            : c
3789 0634 operator    . == relation_op     : ==
set_subtype [`] 0:undef
3790 0634 string      .    undef           : `
set_subtype [)] 34:paren_close
3791 0634 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3792 0634 block       .  { brace_open      : {
set_subtype [return] 2:keyword
3793 0635 name        .    keyword         : return
set_subtype [parseString] 1:name
3794 0635 name        .    name            : parseString
set_subtype [(] 33:paren_open
3795 0635 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3796 0635 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3797 0635 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
3798 0636 block       .  } brace_close     : }
set_subtype [if] 2:keyword
3799 0638 name        .    keyword         : if
set_subtype [(] 33:paren_open
3800 0638 block       .  ( paren_open      : (
set_subtype [std] 1:name
3801 0638 name        .    name            : std
3802 0638 operator    . :: scope_op        : ::
set_subtype [isdigit] 1:name
3803 0638 name        .    name            : isdigit
set_subtype [(] 33:paren_open
3804 0638 block       .  ( paren_open      : (
set_subtype [c] 1:name
3805 0638 name        .    name            : c
set_subtype [)] 34:paren_close
3806 0638 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
3807 0638 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3808 0638 block       .  { brace_open      : {
3809 0638 comment     . // line_comment    : // +n, (p * -n)
set_subtype [return] 2:keyword
3810 0639 name        .    keyword         : return
set_subtype [parseNumber] 1:name
3811 0639 name        .    name            : parseNumber
set_subtype [(] 33:paren_open
3812 0639 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3813 0639 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3814 0639 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
3815 0640 block       .  } brace_close     : }
set_subtype [if] 2:keyword
3816 0641 name        .    keyword         : if
set_subtype [(] 33:paren_open
3817 0641 block       .  ( paren_open      : (
set_subtype [std] 1:name
3818 0641 name        .    name            : std
3819 0641 operator    . :: scope_op        : ::
set_subtype [isalpha] 1:name
3820 0641 name        .    name            : isalpha
set_subtype [(] 33:paren_open
3821 0641 block       .  ( paren_open      : (
set_subtype [c] 1:name
3822 0641 name        .    name            : c
set_subtype [)] 34:paren_close
3823 0641 block       .  ) paren_close     : )
3824 0641 operator    . || logic_op        : ||
set_subtype [c] 1:name
3825 0641 name        .    name            : c
3826 0641 operator    . == relation_op     : ==
set_subtype [_] 0:undef
3827 0641 string      .    undef           : _
set_subtype [)] 34:paren_close
3828 0641 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3829 0641 block       .  { brace_open      : {
set_subtype [return] 2:keyword
3830 0642 name        .    keyword         : return
set_subtype [parseName] 1:name
3831 0642 name        .    name            : parseName
set_subtype [(] 33:paren_open
3832 0642 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3833 0642 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3834 0642 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
3835 0643 block       .  } brace_close     : }
set_subtype [if] 2:keyword
3836 0644 name        .    keyword         : if
set_subtype [(] 33:paren_open
3837 0644 block       .  ( paren_open      : (
set_subtype [is_block_char] 1:name
3838 0644 name        .    name            : is_block_char
set_subtype [(] 33:paren_open
3839 0644 block       .  ( paren_open      : (
set_subtype [c] 1:name
3840 0644 name        .    name            : c
set_subtype [)] 34:paren_close
3841 0644 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
3842 0644 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3843 0644 block       .  { brace_open      : {
3844 0645 comment     . // line_comment    : //return parseBlock();
set_subtype [advance] 1:name
3845 0646 name        .    name            : advance
set_subtype [(] 33:paren_open
3846 0646 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3847 0646 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3848 0646 sp_char     .  ; schar           : ;
set_subtype [return] 2:keyword
3849 0647 name        .    keyword         : return
set_subtype [Token] 1:name
3850 0647 name        .    name            : Token
set_subtype [(] 33:paren_open
3851 0647 block       .  ( paren_open      : (
set_subtype [TokenType] 1:name
3852 0647 name        .    name            : TokenType
3853 0647 operator    . :: scope_op        : ::
set_subtype [BLOCK] 1:name
3854 0647 name        .    name            : BLOCK
set_subtype [,] 27:schar
3855 0647 sp_char     .  , schar           : ,
set_subtype [std] 1:name
3856 0647 name        .    name            : std
3857 0647 operator    . :: scope_op        : ::
set_subtype [string] 1:name
3858 0647 name        .    name            : string
set_subtype [(] 33:paren_open
3859 0647 block       .  ( paren_open      : (
3860 0647 number      .  d integer         : 1
set_subtype [,] 27:schar
3861 0647 sp_char     .  , schar           : ,
set_subtype [c] 1:name
3862 0647 name        .    name            : c
set_subtype [)] 34:paren_close
3863 0647 block       .  ) paren_close     : )
set_subtype [,] 27:schar
3864 0647 sp_char     .  , schar           : ,
set_subtype [m_line] 1:name
3865 0647 name        .    name            : m_line
set_subtype [,] 27:schar
3866 0647 sp_char     .  , schar           : ,
set_subtype [start_col] 1:name
3867 0647 name        .    name            : start_col
set_subtype [)] 34:paren_close
3868 0647 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3869 0647 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
3870 0648 block       .  } brace_close     : }
set_subtype [if] 2:keyword
3871 0649 name        .    keyword         : if
set_subtype [(] 33:paren_open
3872 0649 block       .  ( paren_open      : (
set_subtype [is_oper_char] 1:name
3873 0649 name        .    name            : is_oper_char
set_subtype [(] 33:paren_open
3874 0649 block       .  ( paren_open      : (
set_subtype [c] 1:name
3875 0649 name        .    name            : c
set_subtype [)] 34:paren_close
3876 0649 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
3877 0649 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3878 0649 block       .  { brace_open      : {
set_subtype [tok] 1:name
3879 0650 name        .    name            : tok
3880 0650 operator    .  = assign_op       : =
set_subtype [parseOperator] 1:name
3881 0650 name        .    name            : parseOperator
set_subtype [(] 33:paren_open
3882 0650 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3883 0650 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3884 0650 sp_char     .  ; schar           : ;
set_subtype [if] 2:keyword
3885 0651 name        .    keyword         : if
set_subtype [(] 33:paren_open
3886 0651 block       .  ( paren_open      : (
set_subtype [tok] 1:name
3887 0651 name        .    name            : tok
set_subtype [.] 27:schar
3888 0651 sp_char     .  . schar           : .
set_subtype [type] 1:name
3889 0651 name        .    name            : type
3890 0651 operator    . != relation_op     : !=
set_subtype [TokenType] 1:name
3891 0651 name        .    name            : TokenType
3892 0651 operator    . :: scope_op        : ::
set_subtype [UNDEF] 1:name
3893 0651 name        .    name            : UNDEF
set_subtype [)] 34:paren_close
3894 0651 block       .  ) paren_close     : )
set_subtype [return] 2:keyword
3895 0651 name        .    keyword         : return
set_subtype [Token] 1:name
3896 0651 name        .    name            : Token
set_subtype [(] 33:paren_open
3897 0651 block       .  ( paren_open      : (
set_subtype [tok] 1:name
3898 0651 name        .    name            : tok
set_subtype [)] 34:paren_close
3899 0651 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3900 0651 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
3901 0652 block       .  } brace_close     : }
set_subtype [if] 2:keyword
3902 0653 name        .    keyword         : if
set_subtype [(] 33:paren_open
3903 0653 block       .  ( paren_open      : (
set_subtype [is_special_char] 1:name
3904 0653 name        .    name            : is_special_char
set_subtype [(] 33:paren_open
3905 0653 block       .  ( paren_open      : (
set_subtype [c] 1:name
3906 0653 name        .    name            : c
set_subtype [)] 34:paren_close
3907 0653 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
3908 0653 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3909 0653 block       .  { brace_open      : {
set_subtype [advance] 1:name
3910 0654 name        .    name            : advance
set_subtype [(] 33:paren_open
3911 0654 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3912 0654 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3913 0654 sp_char     .  ; schar           : ;
set_subtype [return] 2:keyword
3914 0655 name        .    keyword         : return
set_subtype [Token] 1:name
3915 0655 name        .    name            : Token
set_subtype [(] 33:paren_open
3916 0655 block       .  ( paren_open      : (
set_subtype [TokenType] 1:name
3917 0655 name        .    name            : TokenType
3918 0655 operator    . :: scope_op        : ::
set_subtype [SCHAR] 1:name
3919 0655 name        .    name            : SCHAR
set_subtype [,] 27:schar
3920 0655 sp_char     .  , schar           : ,
set_subtype [std] 1:name
3921 0655 name        .    name            : std
3922 0655 operator    . :: scope_op        : ::
set_subtype [string] 1:name
3923 0655 name        .    name            : string
set_subtype [(] 33:paren_open
3924 0655 block       .  ( paren_open      : (
3925 0655 number      .  d integer         : 1
set_subtype [,] 27:schar
3926 0655 sp_char     .  , schar           : ,
set_subtype [c] 1:name
3927 0655 name        .    name            : c
set_subtype [)] 34:paren_close
3928 0655 block       .  ) paren_close     : )
set_subtype [,] 27:schar
3929 0655 sp_char     .  , schar           : ,
set_subtype [m_line] 1:name
3930 0655 name        .    name            : m_line
set_subtype [,] 27:schar
3931 0655 sp_char     .  , schar           : ,
set_subtype [start_col] 1:name
3932 0655 name        .    name            : start_col
set_subtype [)] 34:paren_close
3933 0655 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3934 0655 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
3935 0656 block       .  } brace_close     : }
set_subtype [std] 1:name
3936 0658 name        .    name            : std
3937 0658 operator    . :: scope_op        : ::
set_subtype [string] 1:name
3938 0658 name        .    name            : string
set_subtype [str_val] 1:name
3939 0658 name        .    name            : str_val
set_subtype [;] 27:schar
3940 0658 sp_char     .  ; schar           : ;
set_subtype [while] 2:keyword
3941 0659 name        .    keyword         : while
set_subtype [(] 33:paren_open
3942 0659 block       .  ( paren_open      : (
set_subtype [m_pos] 1:name
3943 0659 name        .    name            : m_pos
set_subtype [<] 39:angle_bracket_open
3944 0659 block       .  < angle_bracket_open : <
set_subtype [m_str] 1:name
3945 0659 name        .    name            : m_str
set_subtype [.] 27:schar
3946 0659 sp_char     .  . schar           : .
set_subtype [length] 1:name
3947 0659 name        .    name            : length
set_subtype [(] 33:paren_open
3948 0659 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3949 0659 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
3950 0659 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3951 0659 block       .  { brace_open      : {
set_subtype [if] 2:keyword
3952 0660 name        .    keyword         : if
set_subtype [(] 33:paren_open
3953 0660 block       .  ( paren_open      : (
set_subtype [peek] 1:name
3954 0660 name        .    name            : peek
set_subtype [(] 33:paren_open
3955 0660 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3956 0660 block       .  ) paren_close     : )
set_subtype [<] 39:angle_bracket_open
3957 0660 block       .  < angle_bracket_open : <
set_subtype [ ] 0:undef
3958 0660 string      .    undef           :  
3959 0660 operator    . || logic_op        : ||
set_subtype [peek] 1:name
3960 0660 name        .    name            : peek
set_subtype [(] 33:paren_open
3961 0660 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3962 0660 block       .  ) paren_close     : )
set_subtype [>] 40:angle_bracket_close
3963 0660 block       .  > angle_bracket_close : >
set_subtype [~] 0:undef
3964 0660 string      .    undef           : ~
set_subtype [)] 34:paren_close
3965 0660 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
3966 0660 block       .  { brace_open      : {
set_subtype [str_val] 1:name
3967 0661 name        .    name            : str_val
3968 0661 operator    . += assign_op       : +=
set_subtype [advance] 1:name
3969 0661 name        .    name            : advance
set_subtype [(] 33:paren_open
3970 0661 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
3971 0661 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3972 0661 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
3973 0662 block       .  } brace_close     : }
set_subtype [else] 2:keyword
3974 0662 name        .    keyword         : else
set_subtype [break] 2:keyword
3975 0662 name        .    keyword         : break
set_subtype [;] 27:schar
3976 0662 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
3977 0663 block       .  } brace_close     : }
set_subtype [return] 2:keyword
3978 0665 name        .    keyword         : return
set_subtype [Token] 1:name
3979 0665 name        .    name            : Token
set_subtype [(] 33:paren_open
3980 0665 block       .  ( paren_open      : (
set_subtype [TokenType] 1:name
3981 0665 name        .    name            : TokenType
3982 0665 operator    . :: scope_op        : ::
set_subtype [UNDEF] 1:name
3983 0665 name        .    name            : UNDEF
set_subtype [,] 27:schar
3984 0665 sp_char     .  , schar           : ,
set_subtype [str_val] 1:name
3985 0665 name        .    name            : str_val
set_subtype [,] 27:schar
3986 0665 sp_char     .  , schar           : ,
set_subtype [m_line] 1:name
3987 0665 name        .    name            : m_line
set_subtype [,] 27:schar
3988 0665 sp_char     .  , schar           : ,
set_subtype [start_col] 1:name
3989 0665 name        .    name            : start_col
set_subtype [)] 34:paren_close
3990 0665 block       .  ) paren_close     : )
set_subtype [;] 27:schar
3991 0665 sp_char     .  ; schar           : ;
3992 0667 comment     . // line_comment    : // 알 수 없는 문자
3993 0668 comment     . // line_comment    : //  throw std::runtime_error("Unexpected character \'" + std::string(1, c) + "\' at line " + std::to_string(m_line) + ", column " + std::to_string(m_column));
set_subtype [}] 36:brace_close
3994 0669 block       .  } brace_close     : }
set_subtype [std] 1:name
3995 0672 name        .    name            : std
3996 0672 operator    . :: scope_op        : ::
set_subtype [vector] 1:name
3997 0672 name        .    name            : vector
set_subtype [<] 39:angle_bracket_open
3998 0672 block       .  < angle_bracket_open : <
set_subtype [Token] 1:name
3999 0672 name        .    name            : Token
set_subtype [>] 40:angle_bracket_close
4000 0672 block       .  > angle_bracket_close : >
set_subtype [Lexer] 1:name
4001 0672 name        .    name            : Lexer
4002 0672 operator    . :: scope_op        : ::
set_subtype [tokenize] 1:name
4003 0672 name        .    name            : tokenize
set_subtype [(] 33:paren_open
4004 0672 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
4005 0672 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
4006 0672 block       .  { brace_open      : {
set_subtype [Token] 1:name
4007 0673 name        .    name            : Token
set_subtype [tok] 1:name
4008 0673 name        .    name            : tok
set_subtype [;] 27:schar
4009 0673 sp_char     .  ; schar           : ;
4010 0674 comment     .  # line_comment    : #ifdef TEST    
set_subtype [int] 4:dattype
4011 0675 name        .    dattype         : int
set_subtype [cnt] 1:name
4012 0675 name        .    name            : cnt
4013 0675 operator    .  = assign_op       : =
4014 0675 number      .  d integer         : 0
set_subtype [;] 27:schar
4015 0675 sp_char     .  ; schar           : ;
4016 0676 comment     .  # line_comment    : #endif
set_subtype [do] 2:keyword
4017 0678 name        .    keyword         : do
set_subtype [{] 35:brace_open
4018 0678 block       .  { brace_open      : {
set_subtype [tok] 1:name
4019 0679 name        .    name            : tok
4020 0679 operator    .  = assign_op       : =
set_subtype [getToken] 1:name
4021 0679 name        .    name            : getToken
set_subtype [(] 33:paren_open
4022 0679 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
4023 0679 block       .  ) paren_close     : )
set_subtype [;] 27:schar
4024 0679 sp_char     .  ; schar           : ;
4025 0680 comment     .  # line_comment    : #ifdef TEST    
set_subtype [try] 2:keyword
4026 0681 name        .    keyword         : try
set_subtype [{] 35:brace_open
4027 0681 block       .  { brace_open      : {
set_subtype [std] 1:name
4028 0682 name        .    name            : std
4029 0682 operator    . :: scope_op        : ::
set_subtype [cout] 1:name
4030 0682 name        .    name            : cout
set_subtype [<] 39:angle_bracket_open
4031 0682 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
4032 0682 block       .  < angle_bracket_open : <
set_subtype [std] 1:name
4033 0682 name        .    name            : std
4034 0682 operator    . :: scope_op        : ::
set_subtype [format] 1:name
4035 0682 name        .    name            : format
set_subtype [(] 33:paren_open
4036 0682 block       .  ( paren_open      : (
set_subtype [{:04} {:04} {:<12}.{:>3} {:15} : {}\n] 0:undef
4037 0682 string      .    undef           : {:04} {:04} {:<12}.{:>3} {:15} : {}\n
set_subtype [,] 27:schar
4038 0682 sp_char     .  , schar           : ,
set_subtype [cnt] 1:name
4039 0683 name        .    name            : cnt
4040 0683 operator    . ++ incre_op        : ++
set_subtype [,] 27:schar
4041 0683 sp_char     .  , schar           : ,
set_subtype [tok] 1:name
4042 0683 name        .    name            : tok
set_subtype [.] 27:schar
4043 0683 sp_char     .  . schar           : .
set_subtype [line] 1:name
4044 0683 name        .    name            : line
set_subtype [,] 27:schar
4045 0683 sp_char     .  , schar           : ,
set_subtype [tokentype_names] 1:name
4046 0683 name        .    name            : tokentype_names
set_subtype [.] 27:schar
4047 0683 sp_char     .  . schar           : .
set_subtype [at] 1:name
4048 0683 name        .    name            : at
set_subtype [(] 33:paren_open
4049 0683 block       .  ( paren_open      : (
set_subtype [tok] 1:name
4050 0683 name        .    name            : tok
set_subtype [.] 27:schar
4051 0683 sp_char     .  . schar           : .
set_subtype [type] 1:name
4052 0683 name        .    name            : type
set_subtype [)] 34:paren_close
4053 0683 block       .  ) paren_close     : )
set_subtype [,] 27:schar
4054 0683 sp_char     .  , schar           : ,
set_subtype [tok] 1:name
4055 0683 name        .    name            : tok
set_subtype [.] 27:schar
4056 0683 sp_char     .  . schar           : .
set_subtype [typestr] 1:name
4057 0683 name        .    name            : typestr
set_subtype [,] 27:schar
4058 0683 sp_char     .  , schar           : ,
set_subtype [tokenSubtype_names] 1:name
4059 0684 name        .    name            : tokenSubtype_names
set_subtype [.] 27:schar
4060 0684 sp_char     .  . schar           : .
set_subtype [at] 1:name
4061 0684 name        .    name            : at
set_subtype [(] 33:paren_open
4062 0684 block       .  ( paren_open      : (
set_subtype [tok] 1:name
4063 0684 name        .    name            : tok
set_subtype [.] 27:schar
4064 0684 sp_char     .  . schar           : .
set_subtype [subtype] 1:name
4065 0684 name        .    name            : subtype
set_subtype [)] 34:paren_close
4066 0684 block       .  ) paren_close     : )
set_subtype [,] 27:schar
4067 0684 sp_char     .  , schar           : ,
set_subtype [tok] 1:name
4068 0684 name        .    name            : tok
set_subtype [.] 27:schar
4069 0684 sp_char     .  . schar           : .
set_subtype [value] 1:name
4070 0684 name        .    name            : value
set_subtype [)] 34:paren_close
4071 0684 block       .  ) paren_close     : )
set_subtype [;] 27:schar
4072 0684 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
4073 0685 block       .  } brace_close     : }
set_subtype [catch] 2:keyword
4074 0685 name        .    keyword         : catch
set_subtype [(] 33:paren_open
4075 0685 block       .  ( paren_open      : (
set_subtype [const] 4:dattype
4076 0685 name        .    dattype         : const
set_subtype [std] 1:name
4077 0685 name        .    name            : std
4078 0685 operator    . :: scope_op        : ::
set_subtype [exception] 1:name
4079 0685 name        .    name            : exception
4080 0685 operator    .  & bitwise_op      : &
set_subtype [e] 1:name
4081 0685 name        .    name            : e
set_subtype [)] 34:paren_close
4082 0685 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
4083 0685 block       .  { brace_open      : {
set_subtype [std] 1:name
4084 0686 name        .    name            : std
4085 0686 operator    . :: scope_op        : ::
set_subtype [cout] 1:name
4086 0686 name        .    name            : cout
set_subtype [<] 39:angle_bracket_open
4087 0686 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
4088 0686 block       .  < angle_bracket_open : <
set_subtype [e] 1:name
4089 0686 name        .    name            : e
set_subtype [.] 27:schar
4090 0686 sp_char     .  . schar           : .
set_subtype [what] 1:name
4091 0686 name        .    name            : what
set_subtype [(] 33:paren_open
4092 0686 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
4093 0686 block       .  ) paren_close     : )
set_subtype [<] 39:angle_bracket_open
4094 0686 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
4095 0686 block       .  < angle_bracket_open : <
set_subtype [std] 1:name
4096 0686 name        .    name            : std
4097 0686 operator    . :: scope_op        : ::
set_subtype [endl] 1:name
4098 0686 name        .    name            : endl
set_subtype [;] 27:schar
4099 0686 sp_char     .  ; schar           : ;
set_subtype [std] 1:name
4100 0687 name        .    name            : std
4101 0687 operator    . :: scope_op        : ::
set_subtype [cout] 1:name
4102 0687 name        .    name            : cout
set_subtype [<] 39:angle_bracket_open
4103 0687 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
4104 0687 block       .  < angle_bracket_open : <
set_subtype [static_cast] 1:name
4105 0687 name        .    name            : static_cast
set_subtype [<] 39:angle_bracket_open
4106 0687 block       .  < angle_bracket_open : <
set_subtype [int] 4:dattype
4107 0687 name        .    dattype         : int
set_subtype [>] 40:angle_bracket_close
4108 0687 block       .  > angle_bracket_close : >
set_subtype [(] 33:paren_open
4109 0687 block       .  ( paren_open      : (
set_subtype [tok] 1:name
4110 0687 name        .    name            : tok
set_subtype [.] 27:schar
4111 0687 sp_char     .  . schar           : .
set_subtype [subtype] 1:name
4112 0687 name        .    name            : subtype
set_subtype [)] 34:paren_close
4113 0687 block       .  ) paren_close     : )
set_subtype [<] 39:angle_bracket_open
4114 0687 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
4115 0687 block       .  < angle_bracket_open : <
set_subtype [ : ] 0:undef
4116 0687 string      .    undef           :  : 
set_subtype [<] 39:angle_bracket_open
4117 0687 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
4118 0687 block       .  < angle_bracket_open : <
set_subtype [tok] 1:name
4119 0687 name        .    name            : tok
set_subtype [.] 27:schar
4120 0687 sp_char     .  . schar           : .
set_subtype [value] 1:name
4121 0687 name        .    name            : value
set_subtype [<] 39:angle_bracket_open
4122 0687 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
4123 0687 block       .  < angle_bracket_open : <
set_subtype [std] 1:name
4124 0687 name        .    name            : std
4125 0687 operator    . :: scope_op        : ::
set_subtype [endl] 1:name
4126 0687 name        .    name            : endl
set_subtype [;] 27:schar
4127 0687 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
4128 0688 block       .  } brace_close     : }
4129 0689 comment     .  # line_comment    : #endif
set_subtype [m_toks] 1:name
4130 0690 name        .    name            : m_toks
set_subtype [.] 27:schar
4131 0690 sp_char     .  . schar           : .
set_subtype [push_back] 1:name
4132 0690 name        .    name            : push_back
set_subtype [(] 33:paren_open
4133 0690 block       .  ( paren_open      : (
set_subtype [tok] 1:name
4134 0690 name        .    name            : tok
set_subtype [)] 34:paren_close
4135 0690 block       .  ) paren_close     : )
set_subtype [;] 27:schar
4136 0690 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
4137 0691 block       .  } brace_close     : }
set_subtype [while] 2:keyword
4138 0691 name        .    keyword         : while
set_subtype [(] 33:paren_open
4139 0691 block       .  ( paren_open      : (
set_subtype [tok] 1:name
4140 0691 name        .    name            : tok
set_subtype [.] 27:schar
4141 0691 sp_char     .  . schar           : .
set_subtype [type] 1:name
4142 0691 name        .    name            : type
4143 0691 operator    . != relation_op     : !=
set_subtype [TokenType] 1:name
4144 0691 name        .    name            : TokenType
4145 0691 operator    . :: scope_op        : ::
set_subtype [END_OF_FILE] 1:name
4146 0691 name        .    name            : END_OF_FILE
set_subtype [)] 34:paren_close
4147 0691 block       .  ) paren_close     : )
set_subtype [;] 27:schar
4148 0691 sp_char     .  ; schar           : ;
set_subtype [return] 2:keyword
4149 0692 name        .    keyword         : return
set_subtype [m_toks] 1:name
4150 0692 name        .    name            : m_toks
set_subtype [;] 27:schar
4151 0692 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
4152 0693 block       .  } brace_close     : }
set_subtype [int] 4:dattype
4153 0695 name        .    dattype         : int
set_subtype [Lexer] 1:name
4154 0695 name        .    name            : Lexer
4155 0695 operator    . :: scope_op        : ::
set_subtype [load_file] 1:name
4156 0695 name        .    name            : load_file
set_subtype [(] 33:paren_open
4157 0695 block       .  ( paren_open      : (
set_subtype [const] 4:dattype
4158 0695 name        .    dattype         : const
set_subtype [char] 4:dattype
4159 0695 name        .    dattype         : char
4160 0695 operator    .  * arthmetic_op    : *
set_subtype [fn] 1:name
4161 0695 name        .    name            : fn
set_subtype [)] 34:paren_close
4162 0695 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
4163 0695 block       .  { brace_open      : {
set_subtype [std] 1:name
4164 0696 name        .    name            : std
4165 0696 operator    . :: scope_op        : ::
set_subtype [ifstream] 1:name
4166 0696 name        .    name            : ifstream
set_subtype [file] 1:name
4167 0696 name        .    name            : file
set_subtype [(] 33:paren_open
4168 0696 block       .  ( paren_open      : (
set_subtype [fn] 1:name
4169 0696 name        .    name            : fn
set_subtype [)] 34:paren_close
4170 0696 block       .  ) paren_close     : )
set_subtype [;] 27:schar
4171 0696 sp_char     .  ; schar           : ;
set_subtype [std] 1:name
4172 0697 name        .    name            : std
4173 0697 operator    . :: scope_op        : ::
set_subtype [stringstream] 1:name
4174 0697 name        .    name            : stringstream
set_subtype [buffer] 1:name
4175 0697 name        .    name            : buffer
set_subtype [;] 27:schar
4176 0697 sp_char     .  ; schar           : ;
set_subtype [buffer] 1:name
4177 0698 name        .    name            : buffer
set_subtype [<] 39:angle_bracket_open
4178 0698 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
4179 0698 block       .  < angle_bracket_open : <
set_subtype [file] 1:name
4180 0698 name        .    name            : file
set_subtype [.] 27:schar
4181 0698 sp_char     .  . schar           : .
set_subtype [rdbuf] 1:name
4182 0698 name        .    name            : rdbuf
set_subtype [(] 33:paren_open
4183 0698 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
4184 0698 block       .  ) paren_close     : )
set_subtype [;] 27:schar
4185 0698 sp_char     .  ; schar           : ;
set_subtype [m_str] 1:name
4186 0699 name        .    name            : m_str
4187 0699 operator    .  = assign_op       : =
set_subtype [buffer] 1:name
4188 0699 name        .    name            : buffer
set_subtype [.] 27:schar
4189 0699 sp_char     .  . schar           : .
set_subtype [str] 1:name
4190 0699 name        .    name            : str
set_subtype [(] 33:paren_open
4191 0699 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
4192 0699 block       .  ) paren_close     : )
set_subtype [;] 27:schar
4193 0699 sp_char     .  ; schar           : ;
set_subtype [return] 2:keyword
4194 0701 name        .    keyword         : return
set_subtype [(] 33:paren_open
4195 0701 block       .  ( paren_open      : (
set_subtype [int] 4:dattype
4196 0701 name        .    dattype         : int
set_subtype [)] 34:paren_close
4197 0701 block       .  ) paren_close     : )
set_subtype [m_str] 1:name
4198 0701 name        .    name            : m_str
set_subtype [.] 27:schar
4199 0701 sp_char     .  . schar           : .
set_subtype [length] 1:name
4200 0701 name        .    name            : length
set_subtype [(] 33:paren_open
4201 0701 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
4202 0701 block       .  ) paren_close     : )
set_subtype [;] 27:schar
4203 0701 sp_char     .  ; schar           : ;
set_subtype [}] 36:brace_close
4204 0702 block       .  } brace_close     : }
set_subtype [}] 36:brace_close
4205 0704 block       .  } brace_close     : }
4206 0704 comment     . // line_comment    : // namespace GLexer
4207 0706 comment     .  # line_comment    : #ifdef TEST
set_subtype [int] 4:dattype
4208 0708 name        .    dattype         : int
set_subtype [main] 1:name
4209 0708 name        .    name            : main
set_subtype [(] 33:paren_open
4210 0708 block       .  ( paren_open      : (
set_subtype [int] 4:dattype
4211 0708 name        .    dattype         : int
set_subtype [argc] 1:name
4212 0708 name        .    name            : argc
set_subtype [,] 27:schar
4213 0708 sp_char     .  , schar           : ,
set_subtype [const] 4:dattype
4214 0708 name        .    dattype         : const
set_subtype [char] 4:dattype
4215 0708 name        .    dattype         : char
4216 0708 operator    .  * arthmetic_op    : *
set_subtype [argv] 1:name
4217 0708 name        .    name            : argv
set_subtype [[] 37:square_bracket_open
4218 0708 block       .  [ square_bracket_open : [
set_subtype []] 38:square_bracket_close
4219 0708 block       .  ] square_bracket_close : ]
set_subtype [)] 34:paren_close
4220 0708 block       .  ) paren_close     : )
set_subtype [{] 35:brace_open
4221 0708 block       .  { brace_open      : {
set_subtype [MyLang] 1:name
4222 0709 name        .    name            : MyLang
4223 0709 operator    . :: scope_op        : ::
set_subtype [Lexer] 1:name
4224 0709 name        .    name            : Lexer
set_subtype [lex] 1:name
4225 0709 name        .    name            : lex
set_subtype [;] 27:schar
4226 0709 sp_char     .  ; schar           : ;
set_subtype [lex] 1:name
4227 0710 name        .    name            : lex
set_subtype [.] 27:schar
4228 0710 sp_char     .  . schar           : .
set_subtype [load_file] 1:name
4229 0710 name        .    name            : load_file
set_subtype [(] 33:paren_open
4230 0710 block       .  ( paren_open      : (
set_subtype [argv] 1:name
4231 0710 name        .    name            : argv
set_subtype [[] 37:square_bracket_open
4232 0710 block       .  [ square_bracket_open : [
4233 0710 number      .  d integer         : 1
set_subtype []] 38:square_bracket_close
4234 0710 block       .  ] square_bracket_close : ]
set_subtype [)] 34:paren_close
4235 0710 block       .  ) paren_close     : )
set_subtype [;] 27:schar
4236 0710 sp_char     .  ; schar           : ;
set_subtype [lex] 1:name
4237 0712 name        .    name            : lex
set_subtype [.] 27:schar
4238 0712 sp_char     .  . schar           : .
set_subtype [tokenize] 1:name
4239 0712 name        .    name            : tokenize
set_subtype [(] 33:paren_open
4240 0712 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
4241 0712 block       .  ) paren_close     : )
set_subtype [;] 27:schar
4242 0712 sp_char     .  ; schar           : ;
4243 0713 comment     .  # line_comment    : #ifdef TEST  
set_subtype [std] 1:name
4244 0714 name        .    name            : std
4245 0714 operator    . :: scope_op        : ::
set_subtype [cout] 1:name
4246 0714 name        .    name            : cout
set_subtype [<] 39:angle_bracket_open
4247 0714 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
4248 0714 block       .  < angle_bracket_open : <
set_subtype [=======================================================] 0:undef
4249 0714 string      .    undef           : =======================================================
set_subtype [<] 39:angle_bracket_open
4250 0714 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
4251 0714 block       .  < angle_bracket_open : <
set_subtype [std] 1:name
4252 0714 name        .    name            : std
4253 0714 operator    . :: scope_op        : ::
set_subtype [endl] 1:name
4254 0714 name        .    name            : endl
set_subtype [;] 27:schar
4255 0714 sp_char     .  ; schar           : ;
set_subtype [std] 1:name
4256 0715 name        .    name            : std
4257 0715 operator    . :: scope_op        : ::
set_subtype [cout] 1:name
4258 0715 name        .    name            : cout
set_subtype [<] 39:angle_bracket_open
4259 0715 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
4260 0715 block       .  < angle_bracket_open : <
set_subtype [std] 1:name
4261 0715 name        .    name            : std
4262 0715 operator    . :: scope_op        : ::
set_subtype [format] 1:name
4263 0715 name        .    name            : format
set_subtype [(] 33:paren_open
4264 0715 block       .  ( paren_open      : (
set_subtype [file size={}, lines={}, tokens={}\n] 0:undef
4265 0715 string      .    undef           : file size={}, lines={}, tokens={}\n
set_subtype [,] 27:schar
4266 0715 sp_char     .  , schar           : ,
set_subtype [lex] 1:name
4267 0715 name        .    name            : lex
set_subtype [.] 27:schar
4268 0715 sp_char     .  . schar           : .
set_subtype [length] 1:name
4269 0715 name        .    name            : length
set_subtype [(] 33:paren_open
4270 0715 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
4271 0715 block       .  ) paren_close     : )
set_subtype [,] 27:schar
4272 0715 sp_char     .  , schar           : ,
set_subtype [lex] 1:name
4273 0715 name        .    name            : lex
set_subtype [.] 27:schar
4274 0715 sp_char     .  . schar           : .
set_subtype [line] 1:name
4275 0715 name        .    name            : line
set_subtype [(] 33:paren_open
4276 0715 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
4277 0715 block       .  ) paren_close     : )
set_subtype [,] 27:schar
4278 0715 sp_char     .  , schar           : ,
set_subtype [lex] 1:name
4279 0715 name        .    name            : lex
set_subtype [.] 27:schar
4280 0715 sp_char     .  . schar           : .
set_subtype [tokens] 1:name
4281 0715 name        .    name            : tokens
set_subtype [(] 33:paren_open
4282 0715 block       .  ( paren_open      : (
set_subtype [)] 34:paren_close
4283 0715 block       .  ) paren_close     : )
set_subtype [)] 34:paren_close
4284 0715 block       .  ) paren_close     : )
set_subtype [;] 27:schar
4285 0715 sp_char     .  ; schar           : ;
set_subtype [std] 1:name
4286 0716 name        .    name            : std
4287 0716 operator    . :: scope_op        : ::
set_subtype [cout] 1:name
4288 0716 name        .    name            : cout
set_subtype [<] 39:angle_bracket_open
4289 0716 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
4290 0716 block       .  < angle_bracket_open : <
set_subtype [=======================================================] 0:undef
4291 0716 string      .    undef           : =======================================================
set_subtype [<] 39:angle_bracket_open
4292 0716 block       .  < angle_bracket_open : <
set_subtype [<] 39:angle_bracket_open
4293 0716 block       .  < angle_bracket_open : <
set_subtype [std] 1:name
4294 0716 name        .    name            : std
4295 0716 operator    . :: scope_op        : ::
set_subtype [endl] 1:name
4296 0716 name        .    name            : endl
set_subtype [;] 27:schar
4297 0716 sp_char     .  ; schar           : ;
4298 0717 comment     .  # line_comment    : #endif
set_subtype [}] 36:brace_close
4299 0718 block       .  } brace_close     : }
4300 0719 comment     .  # line_comment    : #endif // TEST
set_subtype [] 0:undef
4301 0721 endoffile   .    undef           : 
=======================================================
file size=20679, lines=721, tokens=4302
=======================================================
