const columnCheckboxes = document.querySelectorAll('input[type="checkbox"][name="columns"]');
const queryInput = document.getElementById('query-input');
const orderBySelect = document.getElementById('order-by');
const limitInput = document.getElementById('limit-input');
const orderByDescCheckbox = document.getElementById('orderByDesc');
const queryButton = document.getElementById('query-button');
const queryResultDiv = document.getElementById('query-result');
const updateButton = document.getElementById('update-button');

let modifiedCells = new Set();
let resultsCache = []; // Add this line

queryResultDiv.addEventListener('input', (e) => {
    if (e.target.hasAttribute('contenteditable')) {
        const original = e.target.dataset.original;
        const current = e.target.textContent.trim();

        if (original !== current) {
            modifiedCells.add(e.target);
            e.target.classList.add('modified');
        } else {
            modifiedCells.delete(e.target);
            e.target.classList.remove('modified');
        }
        updateButton.style.display = modifiedCells.size > 0 ? 'inline-block' : 'none';
    }
});

queryResultDiv.addEventListener('keydown', (e) => {
    if (e.target.hasAttribute('contenteditable')) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            e.target.blur();
        }
    }
});

queryResultDiv.addEventListener('focusout', (e) => {
    if (e.target.hasAttribute('contenteditable')) {
        if (e.target.classList.contains('modified')) {
            alert("수정된 내용을 저장하세요");
        }
    }
});

updateButton.addEventListener('click', async () => {
    console.log('Sending updates start');
    if (modifiedCells.size === 0) {
        console.log('modifiedCells.size === 0');
        return;
    }
    const updates = [];
    modifiedCells.forEach(cell => {
        const row = cell.closest('tr');
        const id = row.dataset.id;
        const column = cell.dataset.column;
        const value = cell.textContent.trim();
        console.log('update push (id,column,value) :', id, column, value);
        updates.push({ id, column, value });
    });
    console.log('Preparing to send updates:', updates);
    try {
        console.log('Calling window.electronAPI.updateDatabase');
        const result = await window.electronAPI.updateDatabase(updates);
        console.log('Received response:', result);
        if (result && result.success) {
            modifiedCells.forEach(cell => {
                cell.dataset.original = cell.textContent.trim();
                cell.classList.remove('modified');
            });
            modifiedCells.clear();
            updateButton.style.display = 'none';
            // update resultsCache to reflect changes
            resultsCache.forEach(row => {
                const updatedCell = Array.from(modifiedCells).find(cell => cell.closest('tr').dataset.id === row.id.toString());
                if (updatedCell) {
                    row[updatedCell.dataset.column] = updatedCell.textContent.trim();
                }
            });
            displayResults(resultsCache, Array.from(columnCheckboxes)
                .filter(checkbox => checkbox.checked)
                .map(checkbox => checkbox.value));
        } else {
            throw new Error(result?.error || '업데이트 실패');
        }
    } catch (error) {
        console.error('Update error:', error);
        alert(`저장 실패: ${error.message}`);
    }
});

queryButton.addEventListener('click', async () => {
    const selectedColumns = Array.from(columnCheckboxes)
        .filter(checkbox => checkbox.checked)
        .map(checkbox => checkbox.value);

    const whereClause = queryInput.value.trim();
    const orderByColumn = orderBySelect.value;
    const limitClause = limitInput.value.trim();
    const orderDirection = orderByDescCheckbox.checked ? 'DESC' : 'ASC';

    if (selectedColumns.length === 0) {
        queryResultDiv.textContent = '출력할 컬럼을 하나 이상 선택해주세요.';
        return;
    }

    const queryOptions = {
        columns: ['id', ...selectedColumns],
        where: whereClause,
        orderBy: orderByColumn,
        orderDirection: orderDirection,
        limit: limitClause,
    };

    try {
        const results = await window.electronAPI.queryDatabase(queryOptions);
        resultsCache = results; // Store the results in cache
        displayResults(results, selectedColumns);
    } catch (error) {
        console.error('Query error:', error);
        queryResultDiv.textContent = '데이터베이스 조회 실패.';
    }
});

function displayResults(results, selectedColumns) {
    queryResultDiv.innerHTML = ''; // Clear previous results
    if (results && results.length > 0) {
        let output = '<table><thead><tr>';
        selectedColumns.forEach(column => {
            output += `<th>${column}</th>`;
        });
        output += '</tr></thead><tbody>';
        results.forEach(row => {
            output += `<tr data-id="${row.id}">`;
            selectedColumns.forEach(column => {
                const displayValue = row[column] ?? '';
                if (column === 'cover_image' && row[column]) {
                    output += `<td><img src="data:image/jpeg;base64,${row[column]}" style="max-width: 100px; max-height: 100px;"></td>`;
                } else if (column === 'file_name' && row[column]) {
                    output += `<td><a href="#" class="play-mp3" data-filename="${row[column]}">${displayValue}</a></td>`;
                } else {
                    const isModified = Array.from(modifiedCells).some(cell =>
                        cell.closest('tr').dataset.id === row.id.toString() && cell.dataset.column === column
                    );
                    const modifiedClass = isModified ? 'modified' : '';
                    output += `<td contenteditable="true" data-column="${column}" data-original="${displayValue}" class="${modifiedClass}">${displayValue}</td>`;
                }
            });
            output += '</tr>';
        });
        output += '</tbody></table>';
        queryResultDiv.innerHTML = output;
        document.querySelectorAll('.play-mp3').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const filename = e.target.getAttribute('data-filename');
                window.electronAPI.playMp3(filename);
            });
        });
        console.log(output);
    } else if (results && results.length === 0) {
        queryResultDiv.textContent = '조회 결과가 없습니다.';
    } else {
        queryResultDiv.textContent = '데이터베이스 조회 실패.';
    }
}

async function playMp3(filename) {
    try {
        await window.electronAPI.playMp3(filename);
        console.log('MP3 재생 요청을 메인 프로세스로 보냈습니다.', filename);
    } catch (error) {
        console.error('MP3 재생 요청 실패:', error);
        alert('MP3 재생 요청 실패: ' + error.message);
    }
}

